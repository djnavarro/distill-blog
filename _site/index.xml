<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>Notes from a data witch</title>
    <link>https://blog.djnavarro.net</link>
    <atom:link href="https://blog.djnavarro.net/index.xml" rel="self" type="application/rss+xml"/>
    <description/>
    <generator>Distill</generator>
    <lastBuildDate>Thu, 15 Apr 2021 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Pretty little CLIs</title>
      <dc:creator>Danielle Navarro</dc:creator>
      <link>https://blog.djnavarro.net/posts/pretty-little-clis</link>
      <description>


&lt;p&gt;If you’ve been working in R for any length of time, you’ve probably realised that you sometimes need to write code that prints information to the R console, and if you’re like me you’ve learned that the simplest way to do this is to use the &lt;code&gt;cat()&lt;/code&gt; function. Perhaps you find yourself writing code like this:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;wait &amp;lt;- function(seconds = 2) {Sys.sleep(seconds)}
send_cat_threat &amp;lt;- function() {
  cat(&amp;quot;Dead girls walking.\n&amp;quot;); wait()
  cat(&amp;quot; --A.\n&amp;quot;)
}
send_cat_threat()&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
The ominous text messages used in this post are taken from the TV show &lt;a href="https://prettylittleliars.fandom.com/"&gt;&lt;em&gt;Pretty Little Liars&lt;/em&gt;&lt;/a&gt;
&lt;/aside&gt;
&lt;p&gt;In a realistic example, the &lt;code&gt;wait()&lt;/code&gt; function would likely be something that takes some time to complete, and the lines above and below are a polite way to let your user (even if that’s just you!) know when the waiting process starts and when it finishes. In any case, when you source a script containing this code, the first part of the message will appear on the console immediately:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dead girls walking.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then after a two second delay, the console updates to reveal that the author of the threatening message is the mysterious “A.” character:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dead girls walking.
 --A.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s not too difficult to imagine what this looks like in the console, but courtesy of the &lt;a href="https://github.com/r-lib/asciicast"&gt;asciicast&lt;/a&gt; package &lt;span class="citation"&gt;(Csárdi et al. 2019)&lt;/span&gt;, there’s no need to leave anything to the imagination:&lt;/p&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/cat-example.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;This approach works perfectly well for simple text communication, but sometimes you want something that looks a little nicer. After all, if you’re planning to impersonate a dead teenager and terrorise her friends using R, you might as well put a little effort into the details, right?&lt;/p&gt;
&lt;h2 id="meet-the-cli-package"&gt;Meet the cli package&lt;/h2&gt;
&lt;p&gt;If you’ve worked in the &lt;a href="https://www.tidyverse.org/"&gt;tidyverse&lt;/a&gt; &lt;span class="citation"&gt;(Wickham et al. 2019)&lt;/span&gt; for any length of time you will have noticed that messages produced by tidyverse packages seem to have a more polished look to them. Perhaps, like me, you’ve wondered how the magic works and if you too can create pretty messages at the console. As it happens, many wonderful things become possible if you happen to have the &lt;a href="https://cli.r-lib.org"&gt;cli&lt;/a&gt; package &lt;span class="citation"&gt;(Csárdi 2021a)&lt;/span&gt; as your talented assistant, and in this post I’ll talk about some of them.&lt;/p&gt;
&lt;p&gt;To craft a beautiful command line interface (CLI) of our very own, the first thing we’ll need to do is load the package:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(cli)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can create the same threatening text message using the &lt;code&gt;cli_text()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;send_cli_threat &amp;lt;- function() {
  cli_text(&amp;quot;Dead girls walking.&amp;quot;); wait()
  cli_text(&amp;quot;--A.&amp;quot;)
}
send_cli_threat()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/cli-example-1.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;Sometimes you may prefer send the user short alert messages. You can create generic alerts with &lt;code&gt;cli_alert()&lt;/code&gt; or you could be more specific by using &lt;code&gt;cli_alert_info()&lt;/code&gt;, &lt;code&gt;cli_alert_warning()&lt;/code&gt;, &lt;code&gt;cli_alert_danger()&lt;/code&gt;, &lt;code&gt;cli_alert_success()&lt;/code&gt;. Most of the text messages sent by A. in &lt;em&gt;Pretty Little Liars&lt;/em&gt; were quite threatening, so in this case it might be more appropriate to mark it as one:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;send_cli_warning &amp;lt;- function() {
  cli_alert_warning(&amp;quot;Dead girls walking.&amp;quot;); wait()
  cli_alert_warning(&amp;quot;--A.&amp;quot;)
}
send_cli_warning()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/cli-example-2.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;h2 id="separating-style-from-structure"&gt;Separating style from structure&lt;/h2&gt;
&lt;p&gt;The design of cli separates style from structure: your messaging code specifies the &lt;em&gt;structure&lt;/em&gt; associated with the message, not the superficial &lt;em&gt;style&lt;/em&gt;. The &lt;code&gt;cli_h1()&lt;/code&gt; command generates a “top-level” heading, the &lt;code&gt;cli_h2()&lt;/code&gt; command generates a second level heading, &lt;code&gt;cli_text()&lt;/code&gt;inserts basic, and so on. If we wanted the title theme to &lt;em&gt;Pretty Little Liars&lt;/em&gt; to reveal itself gradually, we could combine a heading with text&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;title_theme_scroll &amp;lt;- function() {
  cli_h1(&amp;quot;Secret, by The Pierces&amp;quot;); wait()
  cli_text(&amp;quot;Got a secret, can you keep it?&amp;quot;); wait()
  cli_text(&amp;quot;Swear this one you&amp;#39;ll save&amp;quot;); wait()
  cli_text(&amp;quot;Better lock it in your pocket&amp;quot;); wait()
  cli_text(&amp;quot;Taking this one to the grave&amp;quot;); wait()
  cli_text(&amp;quot;If I show you then I know you won&amp;#39;t tell what I said&amp;quot;); wait()
  cli_text(&amp;quot;Cause two can keep a secret if one of them is dead&amp;quot;); wait()
}
title_theme_scroll()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/message-structure-3.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;aside&gt;
The theme song is &lt;em&gt;Secrets&lt;/em&gt;, the first track from the 2007 album &lt;a href="https://en.wikipedia.org/wiki/Thirteen_Tales_of_Love_and_Revenge"&gt;Thirteen Tales of Love and Revenge&lt;/a&gt; by &lt;em&gt;The Pierces&lt;/em&gt;
&lt;/aside&gt;
&lt;h2 id="using-the-status-bar"&gt;Using the status bar&lt;/h2&gt;
&lt;p&gt;In this instance, the output happens to be identical to our first example: all it does is print the lyrics to the music in the title credits from &lt;em&gt;Pretty Little Liars&lt;/em&gt;, with a brief pause between each line. However the R console has many dark secrets, and fancier tricks than this are possible once you know a few…&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;message_scroll &amp;lt;- function() {
  cli_text(&amp;quot;You found my bracelet.&amp;quot;); wait()
  cli_text(&amp;quot;Now come find me.&amp;quot;); wait()
  cli_text(&amp;quot;Good luck bitches.&amp;quot;); wait()
  cli_text(&amp;quot;-A&amp;quot;); wait()
}
message_scroll()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/status-bar-1.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;message_inline &amp;lt;- function() {
  id &amp;lt;- cli_status(&amp;quot;&amp;quot;)
  cli_status_update(id, &amp;quot;You found my bracelet.&amp;quot;); wait()
  cli_status_update(id, &amp;quot;Now come find me.&amp;quot;); wait()
  cli_status_update(id, &amp;quot;Good luck bitches.&amp;quot;); wait()
  cli_status_update(id, &amp;quot;-A&amp;quot;); wait()
  cli_status_clear(id)
}
message_inline()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/status-bar-2.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;h2 id="creating-spinners"&gt;Creating spinners&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;theatrics &amp;lt;- function(which) {
  spinny &amp;lt;- make_spinner(
    which = which,
    template = &amp;quot;{spin} It&amp;#39;s not over until I say it is.&amp;quot;
  )
  for(i in 1:100) {
    spinny$spin()
    wait(.05)
  }
  spinny$finish()
  cli_alert_success(&amp;quot;Sleep tight while you still can, bitches. -A&amp;quot;)
}

theatrics(&amp;quot;dots2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/spinner-1.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;There are quite a few possible spinners&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;list_spinners()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; [1] &amp;quot;dots&amp;quot;                &amp;quot;dots2&amp;quot;               &amp;quot;dots3&amp;quot;              
 [4] &amp;quot;dots4&amp;quot;               &amp;quot;dots5&amp;quot;               &amp;quot;dots6&amp;quot;              
 [7] &amp;quot;dots7&amp;quot;               &amp;quot;dots8&amp;quot;               &amp;quot;dots9&amp;quot;              
[10] &amp;quot;dots10&amp;quot;              &amp;quot;dots11&amp;quot;              &amp;quot;dots12&amp;quot;             
[13] &amp;quot;line&amp;quot;                &amp;quot;line2&amp;quot;               &amp;quot;pipe&amp;quot;               
[16] &amp;quot;simpleDots&amp;quot;          &amp;quot;simpleDotsScrolling&amp;quot; &amp;quot;star&amp;quot;               
[19] &amp;quot;star2&amp;quot;               &amp;quot;flip&amp;quot;                &amp;quot;hamburger&amp;quot;          
[22] &amp;quot;growVertical&amp;quot;        &amp;quot;growHorizontal&amp;quot;      &amp;quot;balloon&amp;quot;            
[25] &amp;quot;balloon2&amp;quot;            &amp;quot;noise&amp;quot;               &amp;quot;bounce&amp;quot;             
[28] &amp;quot;boxBounce&amp;quot;           &amp;quot;boxBounce2&amp;quot;          &amp;quot;triangle&amp;quot;           
[31] &amp;quot;arc&amp;quot;                 &amp;quot;circle&amp;quot;              &amp;quot;squareCorners&amp;quot;      
[34] &amp;quot;circleQuarters&amp;quot;      &amp;quot;circleHalves&amp;quot;        &amp;quot;squish&amp;quot;             
[37] &amp;quot;toggle&amp;quot;              &amp;quot;toggle2&amp;quot;             &amp;quot;toggle3&amp;quot;            
[40] &amp;quot;toggle4&amp;quot;             &amp;quot;toggle5&amp;quot;             &amp;quot;toggle6&amp;quot;            
[43] &amp;quot;toggle7&amp;quot;             &amp;quot;toggle8&amp;quot;             &amp;quot;toggle9&amp;quot;            
[46] &amp;quot;toggle10&amp;quot;            &amp;quot;toggle11&amp;quot;            &amp;quot;toggle12&amp;quot;           
[49] &amp;quot;toggle13&amp;quot;            &amp;quot;arrow&amp;quot;               &amp;quot;arrow2&amp;quot;             
[52] &amp;quot;arrow3&amp;quot;              &amp;quot;bouncingBar&amp;quot;         &amp;quot;bouncingBall&amp;quot;       
[55] &amp;quot;smiley&amp;quot;              &amp;quot;monkey&amp;quot;              &amp;quot;hearts&amp;quot;             
[58] &amp;quot;clock&amp;quot;               &amp;quot;earth&amp;quot;               &amp;quot;moon&amp;quot;               
[61] &amp;quot;runner&amp;quot;              &amp;quot;pong&amp;quot;                &amp;quot;shark&amp;quot;              
[64] &amp;quot;dqpb&amp;quot;               &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;theatrics(&amp;quot;hearts&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/spinner-2.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;h2 id="showing-cli-messages-in-r-markdown"&gt;Showing cli messages in R markdown&lt;/h2&gt;
&lt;p&gt;Throughout this post I’ve relied on asciicast to display screencasts of the R console as animated SVG files, rather than what I might normally do and rely on regular R markdown code chunks to do the work. There’s a reason for this: the R console is a terminal, and its behaviour doesn’t always translate nicely to HTML. Part of the magic of the &lt;a href="https://rmarkdown.rstudio.com/"&gt;rmarkdown&lt;/a&gt; package &lt;span class="citation"&gt;(Xie, Allaire, and Grolemund 2018)&lt;/span&gt; is that &lt;em&gt;most&lt;/em&gt; of the time it is able to capture terminal output and translate it seamlessly into HTML, and we mere mortal users never notice how clever this is. However, when dealing with cli output, we run into cases where this breaks down and the &lt;a href="https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/"&gt;law of leaky abstractions&lt;/a&gt; comes into play.&lt;/p&gt;
&lt;p&gt;An important thing to remember about cli is that the text it produces is a &lt;em&gt;message&lt;/em&gt;,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; so its visibility in R Markdown depends on the chunk option for messages. For this document I set my knitr defaults so that messages and warnings would be shown, but that isn’t necessarily the case for every R Markdown template. For this document I included this line in the very first chunk:&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;knitr::opts_chunk$set(message = TRUE, warning = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This ensures that R markdown will not suppress the cli output, and as a consequence this works:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cli_text(&amp;quot;I&amp;#39;m still here bitches, and I know everything. -A&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;I&amp;#39;m still here bitches, and I know everything. -A&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, things are not this simple. Suppose I had used &lt;code&gt;cli_alert()&lt;/code&gt; in the previous chunk rather than &lt;code&gt;cli_text()&lt;/code&gt;. Unlike the basic &lt;code&gt;cli_text()&lt;/code&gt; function, &lt;code&gt;cli_alert()&lt;/code&gt; uses fancy symbols and colours in the output, and it is at this point that the cracks become exposed. If I had attempted to use &lt;code&gt;cli_alert()&lt;/code&gt; in the previous chunk, the document would have failed to knit and what I would have gotten is an error message complaining about&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PCDATA invalid Char value&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Intuitively you might guess that somewhere in the R Markdown pipeline, an invalid or malformed character has been created.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; The reason this happens is that the colours and symbols used by cli, and supported in the R console, rely on &lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code"&gt;ANSI escape codes&lt;/a&gt;, but those escape codes aren’t recognised in HTML and – apparently – they can wreak havoc when R markdown writes those characters into the HTML document. ANSI colours in R are usually generated with the help of the &lt;a href="https://github.com/r-lib/crayon"&gt;crayon&lt;/a&gt; package &lt;span class="citation"&gt;(Csárdi 2021b)&lt;/span&gt;, and per the &lt;a href="https://github.com/r-lib/crayon/issues/24"&gt;issue #24&lt;/a&gt; thread that I encounter on a semi-regular basis, it can be tricky to manage. Solving it requires multiple steps. First, we need to make sure that the R Markdown document turns on crayon support:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;options(crayon.enabled = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This isn’t the whole solution, however, because all it does is (as I understand it) tell R Markdown to stop ignoring all the ANSI stuff. To get it to handle the ANSI code correctly we need to specify the knit hooks that explicitly tell R Markdown what to do. We can do this with the help of the &lt;a href="https://github.com/brodieG/fansi"&gt;fansi&lt;/a&gt; package &lt;span class="citation"&gt;(Gaslam 2021)&lt;/span&gt;, which contains an obscurely-named function &lt;code&gt;sgr_to_html()&lt;/code&gt; which translates a subset of the ANSI control sequences to HTML, and ignores all the others. Using this, we can write an &lt;code&gt;ansi_aware_handler()&lt;/code&gt; function that will take an input string &lt;code&gt;x&lt;/code&gt; and return HTML output appropriate for the R Markdown context:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ansi_aware_handler &amp;lt;- function(x, options) {
  paste0(
    &amp;quot;&amp;lt;pre class=\&amp;quot;r-output\&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;quot;,
    fansi::sgr_to_html(x = x, warn = FALSE, term.cap = &amp;quot;256&amp;quot;),
    &amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;quot;
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we tell the &lt;a href="https://yihui.org/knitr/"&gt;knitr&lt;/a&gt; package &lt;span class="citation"&gt;(Xie 2021)&lt;/span&gt; to use this function whenever it needs to handle regular output, and just for good measure we’ll do the same for messages, errors, and warnings:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;knitr::knit_hooks$set(
  output = ansi_aware_handler, 
  message = ansi_aware_handler, 
  warning = ansi_aware_handler,
  error = ansi_aware_handler
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have done all this obnoxious setup, my R Markdown document renders &lt;code&gt;cli_alert()&lt;/code&gt; and friends correctly:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cli({
  cli_alert(&amp;quot;I&amp;#39;m still here bitches, and I know everything. -A&amp;quot;)
  cli_alert_info(&amp;quot;I&amp;#39;m still here bitches, and I know everything. -A&amp;quot;)
  cli_alert_warning(&amp;quot;I&amp;#39;m still here bitches, and I know everything. -A&amp;quot;)
  cli_alert_danger(&amp;quot;I&amp;#39;m still here bitches, and I know everything. -A&amp;quot;)
  cli_alert_success(&amp;quot;I&amp;#39;m still here bitches, and I know everything. -A&amp;quot;)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;→ I'm still here bitches, and I know everything. -A
&lt;span style='color: #00BBBB;'&gt;ℹ&lt;/span&gt;&lt;span&gt; I'm still here bitches, and I know everything. -A
&lt;/span&gt;&lt;span style='color: #BBBB00;'&gt;!&lt;/span&gt;&lt;span&gt; I'm still here bitches, and I know everything. -A
&lt;/span&gt;&lt;span style='color: #BB0000;'&gt;x&lt;/span&gt;&lt;span&gt; I'm still here bitches, and I know everything. -A
&lt;/span&gt;&lt;span style='color: #00BB00;'&gt;✓&lt;/span&gt;&lt;span&gt; I'm still here bitches, and I know everything. -A
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The formatting for blockquotes is preserved:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cli({
  cli_blockquote(
    quote = &amp;quot;Friends share secrets, that&amp;#39;s what keeps us close&amp;quot;,
    citation = &amp;quot;Alison&amp;quot;
  )
  cli_blockquote(
    quote = &amp;quot;Popular in life and death&amp;quot;,
    citation = &amp;quot;Spencer&amp;quot;
  )
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;
    &lt;span style='font-style: italic;'&gt;“Friends share secrets, that's what keeps us close”&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span style='font-weight: bold;font-style: italic;'&gt;— Alison&lt;/span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;span style='font-style: italic;'&gt;“Popular in life and death”&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span style='font-weight: bold;font-style: italic;'&gt;— Spencer&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div id="refs" class="references"&gt;
&lt;div id="ref-cli"&gt;
&lt;p&gt;Csárdi, Gábor. 2021a. &lt;em&gt;Cli: Helpers for Developing Command Line Interfaces&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=cli"&gt;https://CRAN.R-project.org/package=cli&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-crayon"&gt;
&lt;p&gt;———. 2021b. &lt;em&gt;Crayon: Colored Terminal Output&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=crayon"&gt;https://CRAN.R-project.org/package=crayon&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-asciiicast"&gt;
&lt;p&gt;Csárdi, Gábor, Romain Francois, Mario Nebl, and Marcin Kulik. 2019. &lt;em&gt;Asciicast: Create ’Ascii’ Screen Casts from R Scripts&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=asciicast"&gt;https://CRAN.R-project.org/package=asciicast&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-fansi"&gt;
&lt;p&gt;Gaslam, Brodie. 2021. &lt;em&gt;Fansi: ANSI Control Sequence Aware String Functions&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=fansi"&gt;https://CRAN.R-project.org/package=fansi&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-tidyverse"&gt;
&lt;p&gt;Wickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” &lt;em&gt;Journal of Open Source Software&lt;/em&gt; 4 (43): 1686. &lt;a href="https://doi.org/10.21105/joss.01686"&gt;https://doi.org/10.21105/joss.01686&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-knitr"&gt;
&lt;p&gt;Xie, Yihui. 2021. &lt;em&gt;Knitr: A General-Purpose Package for Dynamic Report Generation in R&lt;/em&gt;. &lt;a href="https://yihui.org/knitr/"&gt;https://yihui.org/knitr/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-rmarkdown"&gt;
&lt;p&gt;Xie, Yihui, J. J. Allaire, and Garrett Grolemund. 2018. &lt;em&gt;R Markdown: The Definitive Guide&lt;/em&gt;. Boca Raton, Florida: Chapman; Hall/CRC. &lt;a href="https://bookdown.org/yihui/rmarkdown"&gt;https://bookdown.org/yihui/rmarkdown&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Somewhat counterintuitively, although cli emits messages that can be suppressed by &lt;code&gt;suppressMessages()&lt;/code&gt;, they don’t behave &lt;em&gt;precisely&lt;/em&gt; the same as the messages produced by &lt;code&gt;message()&lt;/code&gt;. The default handler for base R messages sends the output to the &lt;code&gt;stderr()&lt;/code&gt; connection and so they are often shown as the dreaded “red text” that users learn to fear. To avoid this, the default behaviour in cli sends messages to the &lt;code&gt;stdout()&lt;/code&gt; connection, thereby avoiding this issue. However, cli does allow you to control this behaviour: see the &lt;code&gt;start_app()&lt;/code&gt; and &lt;code&gt;stop_app()&lt;/code&gt; functions for more information.&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;That chunk is not visible in the output because I set &lt;code&gt;include=FALSE&lt;/code&gt; in the options for that chunk&lt;a href="#fnref2" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;As an aside, if you’re running a site with an RSS feed it may also write malformed characters into the index.xml file as well as any generated .html file. When I encountered this problem I found that even when I “fixed” my .Rmd file the document wouldn’t re-knit, because of the problems with the xml file. Eventually I realised that I could solve the problem by deleting the index.xml file for the RSS feed and &lt;em&gt;then&lt;/em&gt; knitting again. Sigh&lt;a href="#fnref3" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>d5a41260e8c54f0561bef2a24bea5b1f</distill:md5>
      <guid>https://blog.djnavarro.net/posts/pretty-little-clis</guid>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Welcome to the jungle</title>
      <dc:creator>Danielle Navarro</dc:creator>
      <link>https://blog.djnavarro.net/posts/welcome</link>
      <description>I have reluctantly decided to create a new blog. Some thoughts on 
what I hope to achieve, having tried my hand at blogging so very many times 
before</description>
      <guid>https://blog.djnavarro.net/posts/welcome</guid>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
