<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>Notes from a data witch</title>
    <link>https://blog.djnavarro.net</link>
    <atom:link href="https://blog.djnavarro.net/index.xml" rel="self" type="application/rss+xml"/>
    <description/>
    <generator>Distill</generator>
    <lastBuildDate>Thu, 15 Apr 2021 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Pretty little CLIs</title>
      <dc:creator>Danielle Navarro</dc:creator>
      <link>https://blog.djnavarro.net/posts/pretty-little-clis</link>
      <description>


&lt;p&gt;If you’ve been working in R for any length of time, you’ve probably realised that you sometimes need to write code that prints information to the R console, and if you’re like me you’ve learned that the simplest way to do this is to use the &lt;code&gt;cat()&lt;/code&gt; function. Perhaps you find yourself writing code like this:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cat(&amp;quot;Dead girls walking.&amp;quot;)
wait_for_message()
cat(&amp;quot; --A.\n&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a realistic example, the &lt;code&gt;wait_for_message()&lt;/code&gt; function would likely be something that takes some time to complete, and the lines above and below are a polite way to let your user (even if that’s just you!) know when the waiting process starts and when it finishes. For simplicity, suppose &lt;code&gt;wait_for_message()&lt;/code&gt; is a function that takes one second to evaluate, such as this one:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;wait_for_message &amp;lt;- function() {
  Sys.sleep(1)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you execute the code above by sourcing a script, the first thing you see at the console is the initial message:&lt;/p&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;Dead girls walking.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then after a one second delay, this message is updated to reveal the complete message:&lt;/p&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;Dead girls walking. --A.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach works perfectly well for simple text communication, but sometimes you want something that looks a little nicer. I mean, if you’re planning on impersonating a dead teenager and terrorising her friends using R, you’re going to want to put a little effort into the details, right?&lt;/p&gt;
&lt;h2 id="meet-the-cli-package"&gt;Meet the cli package&lt;/h2&gt;
&lt;p&gt;If you’ve worked with tidyverse for any length of time you will have noticed that messages produced by tidyverse packages seem to have a more polished look to them. Perhaps, like me, you’ve wondered how the magic works and if you too can create pretty messages at the console. As it happens, many wonderful things become possible if you happen to have the &lt;a href="https://cli.r-lib.org"&gt;cli&lt;/a&gt; package as your mysterious assistant, and in this post I’ll talk about some of them. The cli package is developed by &lt;a href="https://twitter.com/GaborCsardi"&gt;Gábor Csárdi&lt;/a&gt;, and its goal is to help you effortlessly create a beautiful command line interface (CLI) of your very own. Load package&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(cli)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commands&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cli_h1(&amp;quot;Secret, by The Pierces&amp;quot;)
cli_alert(&amp;quot;Got a secret, can you keep it?&amp;quot;)
cli_alert(&amp;quot;Swear this one you&amp;#39;ll save&amp;quot;)
cli_alert(&amp;quot;Better lock it, in your pocket&amp;quot;)
cli_alert(&amp;quot;Taking this one to the grave&amp;quot;)
cli_alert(&amp;quot;If I show you then I know you, won&amp;#39;t tell what I said&amp;quot;)
cli_alert(&amp;quot;Cause two can keep a secret if one of them is dead&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;
&lt;span style='color: #00BBBB;'&gt;──&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style='font-weight: bold;'&gt;Secret, by The Pierces&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style='color: #00BBBB;'&gt;────────────────────────────────────────────&lt;/span&gt;&lt;span&gt;
→ Got a secret, can you keep it?
→ Swear this one you'll save
→ Better lock it, in your pocket
→ Taking this one to the grave
→ If I show you then I know you, won't tell what I said
→ Cause two can keep a secret if one of them is dead
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A lot of the cli functionality makes use of dynamic features of the R consoloe, so from now on I’ll show output in the form of these SVG screencasts created using the asciicast package. For example, we might write code that inserts a time consuming process between each line, so the output would look more like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/secret.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;h2 id="spinners"&gt;Spinners&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;spinner &amp;lt;- make_spinner(
  which = &amp;quot;dots2&amp;quot;, 
  template = &amp;quot;{spin} It&amp;#39;s not over until I say it is.&amp;quot;
)

wait_for_reveal &amp;lt;- function(spinner) {
  for(i in 1:100) {
    spinner$spin()
    Sys.sleep(.05)
  }
  spinner$finish()
}

wait_for_reveal(spinner)
cli_alert_success(
  &amp;quot;It&amp;#39;s not over until I say it is. Sleep tight while you still can, bitches. -A&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/spinner-sleeptight.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>d5a41260e8c54f0561bef2a24bea5b1f</distill:md5>
      <guid>https://blog.djnavarro.net/posts/pretty-little-clis</guid>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Welcome to the jungle</title>
      <dc:creator>Danielle Navarro</dc:creator>
      <link>https://blog.djnavarro.net/posts/welcome</link>
      <description>I have reluctantly decided to create a new blog. Some thoughts on 
what I hope to achieve, having tried my hand at blogging so very many times 
before</description>
      <guid>https://blog.djnavarro.net/posts/welcome</guid>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
