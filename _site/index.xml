<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>Notes from a data witch</title>
    <link>https://blog.djnavarro.net</link>
    <atom:link href="https://blog.djnavarro.net/index.xml" rel="self" type="application/rss+xml"/>
    <description/>
    <generator>Distill</generator>
    <lastBuildDate>Sat, 17 Apr 2021 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Pretty little CLIs</title>
      <dc:creator>Danielle Navarro</dc:creator>
      <link>https://blog.djnavarro.net/posts/pretty-little-clis</link>
      <description>


&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/secrets.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;aside&gt;
Lyrics to the title theme of the US TV show, &lt;a href="https://prettylittleliars.fandom.com/"&gt;&lt;em&gt;Pretty Little Liars&lt;/em&gt;&lt;/a&gt;. The song is called &lt;em&gt;Secrets&lt;/em&gt;, taken from the fabulous &lt;a href="https://en.wikipedia.org/wiki/Thirteen_Tales_of_Love_and_Revenge"&gt;Thirteen Tales of Love and Revenge&lt;/a&gt; album by &lt;em&gt;The Pierces&lt;/em&gt;
&lt;/aside&gt;
&lt;p&gt;Anytime you write R code whose output needs to be understood by a human being, it is an act of kindness to spend a little time making sure that the output shown to the human being properly communicates with that human. As a consequence of this, you often find yourself needing to write information to the R console, just to cater to those precious human sensibilities. Perhaps the simplest way to do this is to use the &lt;code&gt;cat()&lt;/code&gt; function. It’s a simple tool and it gets the job done in most cases. If the mysterious “A” from &lt;em&gt;Pretty Little Liars&lt;/em&gt; had used R to craft her threatening text messages, she could have written code like this:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;wait &amp;lt;- function(seconds = 2) {
  Sys.sleep(seconds)
}

send_cat_threat &amp;lt;- function() {
  cat(&amp;quot;Dead girls walking.\n&amp;quot;); wait()
  cat(&amp;quot;--A.\n&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Equipped with a function that specifies her threat, complete with a dramatic pause for effect, she’s ready to go. When her unwitting victim does something to trigger the &lt;code&gt;send_cat_threat()&lt;/code&gt; function, a two part message is displayed on the console. The first part shows up immediately&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dead girls walking.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and after a two second delay, her call sign is revealed&lt;/p&gt;
&lt;p&gt;It’s not too difficult to imagine what As message might look like at the R console, but where’s the fun in that? Thanks to the &lt;a href="https://github.com/r-lib/asciicast"&gt;asciicast&lt;/a&gt; package &lt;span class="citation"&gt;(Csárdi et al. 2019)&lt;/span&gt;, there’s no need to leave anything to the imagination, and we can see the malevolent message in screencast form:&lt;/p&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/cat-example.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;aside&gt;
The ominous text messages used in this post are taken from &lt;em&gt;Pretty Little Liars&lt;/em&gt;.
&lt;/aside&gt;
&lt;p&gt;Using &lt;code&gt;cat()&lt;/code&gt; to craft messages works perfectly well for simple text communication, but sometimes you want something that looks a little fancier. After all, if the big picture plan here is to impersonate a dead teenager and terrorise her friends - and for some reason you’ve chosen R to do so - you might as well put a little effort into the details, right?&lt;/p&gt;
&lt;h2 id="meet-the-cli-package"&gt;Meet the cli package&lt;/h2&gt;
&lt;p&gt;One thing I love about the R community is that if you search long enough you’ll find that someone else has already written a wonderful package that solves the problem you’re facing. If your problem is “how to craft nicely formatted messages” then you’ll be delighted to learn that many wonderful things become possible if you have the &lt;a href="https://cli.r-lib.org"&gt;cli&lt;/a&gt; package &lt;span class="citation"&gt;(Csárdi 2021a)&lt;/span&gt; as your talented assistant. To craft a beautiful command line interface (CLI) of our very own, the first thing we’ll need to do is load the package:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(cli)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once this is done, it is a very trivial task for A to write the same threatening text message using &lt;code&gt;cli_text()&lt;/code&gt;…&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;send_cli_threat &amp;lt;- function() {
  cli_text(&amp;quot;Dead girls walking.&amp;quot;); wait()
  cli_text(&amp;quot;--A.&amp;quot;)
}
send_cli_threat()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/cli-example-1.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;…which is nice and all, but it doesn’t make much of a case for using cli. Stalking and threatening is busy work, and I’d imagine that A would want a more compelling justification before deciding to switch her evil workflow. However, much liky A herself, the R console has many dark secrets, and fancier tricks than this are possible once you know how to expose them using cli.&lt;/p&gt;
&lt;h2 id="using-the-status-bar"&gt;Using the status bar&lt;/h2&gt;
&lt;p&gt;One piece of magic that I have wondered about for a long time is how fancy progress bars work: often when you’re doing something that takes a long time, you’ll see a progress bar rendered in text on the screen, which suddenly vanishes once the process is complete. While teaching myself cli, I found the answer. The most recent line of text generated at the terminal is called the &lt;em&gt;status bar&lt;/em&gt;: the state of the status bar can be manipulated, and the cli package provides a neat toolkit for doing so. So let’s say I were trying to convince A to switch to the cli tools. Right now, she’s writing a function that will send a four-part message, using &lt;code&gt;cli_text()&lt;/code&gt; because I’ve at least convinced her to &lt;em&gt;try&lt;/em&gt; the new tools:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;message_scroll &amp;lt;- function() {
  cli_text(&amp;quot;You found my bracelet.&amp;quot;); wait()
  cli_text(&amp;quot;Now come find me.&amp;quot;); wait()
  cli_text(&amp;quot;Good luck bitches.&amp;quot;); wait()
  cli_text(&amp;quot;-A&amp;quot;); wait()
}
message_scroll()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When her victim triggers this message the lines will appear on screen, one after the other with an appropriate dramatic pause separating them. The victim might see something that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/status-bar-1.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;The problem – when viewed from an evil point of view – is that this message stays on screen after delivery.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The victim has time to think about it, take a screenshot to show her friends, that kind of thing. Wouldn’t the gaslighting be so much more effective if she were to send the message piece by piece, each part disappearing as the next one appears, only to have the whole thing vanish without a trace and leaving the victim wondering if she imagined the whole thing? This is where the status bar comes in handy. Here’s how it would work:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;message_inline &amp;lt;- function() {
  id &amp;lt;- cli_status(&amp;quot;&amp;quot;)
  cli_status_update(id, &amp;quot;You found my bracelet.&amp;quot;); wait()
  cli_status_update(id, &amp;quot;Now come find me.&amp;quot;); wait()
  cli_status_update(id, &amp;quot;Good luck bitches.&amp;quot;); wait()
  cli_status_update(id, &amp;quot;-A&amp;quot;); wait()
  cli_status_clear(id)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line in this function uses &lt;code&gt;cli_status()&lt;/code&gt; to create a blank message on the status bar, and returns an identifier that refers to the status bar. The next four lines all use &lt;code&gt;cli_status_update()&lt;/code&gt; to overwrite the current state of the status bar, and then pause dramatically for two seconds. In a final act of malice, the last line in the function clears the status bar using &lt;code&gt;cli_status_clear()&lt;/code&gt;, leaving nothing except a blank space behind. So what the victim sees is something more like this:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;message_inline()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/status-bar-2.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;h2 id="creating-spinners"&gt;Creating spinners&lt;/h2&gt;
&lt;p&gt;The ability to control the status bar opens up a world of new possibilities. Progress bars are one such possibility, but the &lt;a href="https://github.com/r-lib/progress"&gt;progress&lt;/a&gt; package &lt;span class="citation"&gt;(Csárdi and FitzJohn 2019)&lt;/span&gt; already does this nicely, and in any case I suspect that A might be more intrigued by the possibility of spinners, since they just spin and spin and give the victim no clue about when the process is going to end. Much more appealing when the developer doesn’t know (or doesn’t want to reveal) when the wait will end. The cli package has a nice &lt;code&gt;makes_spinner&lt;/code&gt; function that serves this purpose. Here’s an example:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;spinny &amp;lt;- make_spinner(
  which = &amp;quot;dots2&amp;quot;,
  template = &amp;quot;{spin} It&amp;#39;s not over until I say it is.&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;which&lt;/code&gt; argument is used to choose how the spinner would look, and the &lt;code&gt;template&lt;/code&gt; argument is used to define how the “spinny bit” is placed relative to the rest of the text. The spinny object includes functions to update the state of the spinner (in this case &lt;code&gt;spinny$spin()&lt;/code&gt; would be that function), and a function to clear the spinner from the status bar. So here’s how A might define a function that uses a spinner to keep the victim in suspense…&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;theatrics &amp;lt;- function(which) {
  
  # define the spinner
  spinny &amp;lt;- make_spinner(
    which = which,
    template = &amp;quot;{spin} It&amp;#39;s not over until I say it is.&amp;quot;
  )
  
  # update the spinner 100 times
  for(i in 1:100) {
    spinny$spin()
    wait(.05)
  }
  
  # clear the spinner from the status bar
  spinny$finish()
  
  # send the final part of the message
  cli_alert_success(&amp;quot;Sleep tight while you still can, bitches. -A&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what happens:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;theatrics(&amp;quot;dots2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/spinner-1.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;Setting &lt;code&gt;which = "dots2"&lt;/code&gt; is only one possibility. There are quite a lot of different spinner types that come bundled with the cli package, and I’d imagine A would want to look around to see which one suits her needs. Personally, I’m a fan of hearts:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;theatrics(&amp;quot;hearts&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/home/danielle/GitHub/sites/distill-blog/_posts/pretty-little-clis/output/spinner-2.svg" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;To see the full list use the &lt;code&gt;list_spinners()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;list_spinners()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; [1] &amp;quot;dots&amp;quot;                &amp;quot;dots2&amp;quot;               &amp;quot;dots3&amp;quot;              
 [4] &amp;quot;dots4&amp;quot;               &amp;quot;dots5&amp;quot;               &amp;quot;dots6&amp;quot;              
 [7] &amp;quot;dots7&amp;quot;               &amp;quot;dots8&amp;quot;               &amp;quot;dots9&amp;quot;              
[10] &amp;quot;dots10&amp;quot;              &amp;quot;dots11&amp;quot;              &amp;quot;dots12&amp;quot;             
[13] &amp;quot;line&amp;quot;                &amp;quot;line2&amp;quot;               &amp;quot;pipe&amp;quot;               
[16] &amp;quot;simpleDots&amp;quot;          &amp;quot;simpleDotsScrolling&amp;quot; &amp;quot;star&amp;quot;               
[19] &amp;quot;star2&amp;quot;               &amp;quot;flip&amp;quot;                &amp;quot;hamburger&amp;quot;          
[22] &amp;quot;growVertical&amp;quot;        &amp;quot;growHorizontal&amp;quot;      &amp;quot;balloon&amp;quot;            
[25] &amp;quot;balloon2&amp;quot;            &amp;quot;noise&amp;quot;               &amp;quot;bounce&amp;quot;             
[28] &amp;quot;boxBounce&amp;quot;           &amp;quot;boxBounce2&amp;quot;          &amp;quot;triangle&amp;quot;           
[31] &amp;quot;arc&amp;quot;                 &amp;quot;circle&amp;quot;              &amp;quot;squareCorners&amp;quot;      
[34] &amp;quot;circleQuarters&amp;quot;      &amp;quot;circleHalves&amp;quot;        &amp;quot;squish&amp;quot;             
[37] &amp;quot;toggle&amp;quot;              &amp;quot;toggle2&amp;quot;             &amp;quot;toggle3&amp;quot;            
[40] &amp;quot;toggle4&amp;quot;             &amp;quot;toggle5&amp;quot;             &amp;quot;toggle6&amp;quot;            
[43] &amp;quot;toggle7&amp;quot;             &amp;quot;toggle8&amp;quot;             &amp;quot;toggle9&amp;quot;            
[46] &amp;quot;toggle10&amp;quot;            &amp;quot;toggle11&amp;quot;            &amp;quot;toggle12&amp;quot;           
[49] &amp;quot;toggle13&amp;quot;            &amp;quot;arrow&amp;quot;               &amp;quot;arrow2&amp;quot;             
[52] &amp;quot;arrow3&amp;quot;              &amp;quot;bouncingBar&amp;quot;         &amp;quot;bouncingBall&amp;quot;       
[55] &amp;quot;smiley&amp;quot;              &amp;quot;monkey&amp;quot;              &amp;quot;hearts&amp;quot;             
[58] &amp;quot;clock&amp;quot;               &amp;quot;earth&amp;quot;               &amp;quot;moon&amp;quot;               
[61] &amp;quot;runner&amp;quot;              &amp;quot;pong&amp;quot;                &amp;quot;shark&amp;quot;              
[64] &amp;quot;dqpb&amp;quot;               &lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="showing-cli-messages-in-r-markdown"&gt;Showing cli messages in R markdown&lt;/h2&gt;
&lt;p&gt;Throughout this post I’ve relied on asciicast to display screencasts of the R console as animated SVG files, rather than what I might normally do and rely on regular R markdown code chunks to do the work. There’s a reason for this: the R console is a terminal, and its behaviour doesn’t always translate nicely to HTML. Part of the magic of the &lt;a href="https://rmarkdown.rstudio.com/"&gt;rmarkdown&lt;/a&gt; package &lt;span class="citation"&gt;(Xie, Allaire, and Grolemund 2018)&lt;/span&gt; is that &lt;em&gt;most&lt;/em&gt; of the time it is able to capture terminal output and translate it seamlessly into HTML, and we mere mortal users never notice how clever this is. However, when dealing with cli output, we run into cases where this breaks down and the &lt;a href="https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/"&gt;law of leaky abstractions&lt;/a&gt; comes into play: text generated at the R console does not follow the same rules as text inserted into an HTML document, and R Markdown sometimes needs a little help when transforming one to the other.&lt;/p&gt;
&lt;p&gt;An important thing to remember about cli is that the text it produces is a &lt;em&gt;message&lt;/em&gt;, so its visibility in R Markdown depends on the chunk option for messages. As long as the message option is set to &lt;code&gt;TRUE&lt;/code&gt;, R Markdown will include them as part of the output.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; In the simplest case, R Markdown works nicely, so as long as all A wants to do is send an unformatted threat within an R Markdown document, then this works:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cli_text(&amp;quot;I&amp;#39;m still here bitches, and I know everything. -A&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;I&amp;#39;m still here bitches, and I know everything. -A&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the moment A tries to use any fancy formatting, things will go haywire for her. For example, suppose she wanted to send the message above as a simple “alert” message using &lt;code&gt;cli_alert()&lt;/code&gt;, which uses fancy symbols and colours in the output. It is at this point that the cracks in the R Markdown pipeline start to leak. In this case, the leak would result in the document failing to knit and an error message complaining about&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PCDATA invalid Char value&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Intuitively she might guess that somewhere in the R Markdown pipeline, an invalid or malformed character has been created.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; The reason this happens is that the colours and symbols used by cli, and supported in the R console, rely on &lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code"&gt;ANSI escape codes&lt;/a&gt;, but those escape codes aren’t recognised in HTML and – apparently – they can wreak havoc when R markdown writes those characters into the HTML document. ANSI colours in R are usually generated with the help of the &lt;a href="https://github.com/r-lib/crayon"&gt;crayon&lt;/a&gt; package &lt;span class="citation"&gt;(Csárdi 2021b)&lt;/span&gt;, and per the &lt;a href="https://github.com/r-lib/crayon/issues/24"&gt;issue #24&lt;/a&gt; thread that I encounter on a semi-regular basis, it can be tricky to manage.&lt;/p&gt;
&lt;p&gt;Solving this issue requires A to jump through a few hoops. Annoying, but no-one ever said that running an unhinged stalking campaign via text messages was easy, right? Her first task is to make sure that the R Markdown document turns on crayon support:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;options(crayon.enabled = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This isn’t the whole solution, however, because while that tells R Markdown to stop &lt;em&gt;ignoring&lt;/em&gt; all the ANSI stuff, it doesn’t necessarily allow it to render ANSI sequences properly. To fix this she needs to specify the knit hooks that explicitly tell R Markdown what to do. She can do this with the help of the &lt;a href="https://github.com/brodieG/fansi"&gt;fansi&lt;/a&gt; package &lt;span class="citation"&gt;(Gaslam 2021)&lt;/span&gt;, which contains an obscurely-named function &lt;code&gt;sgr_to_html()&lt;/code&gt; that translates a subset of the ANSI control sequences to HTML, and strips out all the others. Using this, she can write an &lt;code&gt;ansi_aware_handler()&lt;/code&gt; function that will take an input string &lt;code&gt;x&lt;/code&gt; and return HTML output appropriate for the R Markdown context:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ansi_aware_handler &amp;lt;- function(x, options) {
  paste0(
    &amp;quot;&amp;lt;pre class=\&amp;quot;r-output\&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;quot;,
    fansi::sgr_to_html(x = x, warn = FALSE, term.cap = &amp;quot;256&amp;quot;),
    &amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;quot;
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there, it’s relatively easy. All she needs to do is tell &lt;a href="https://yihui.org/knitr/"&gt;knitr&lt;/a&gt; &lt;span class="citation"&gt;(Xie 2021)&lt;/span&gt; to use this function whenever it needs to handle output. Just for good measure she might do the same for messages, errors, and warnings:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;knitr::knit_hooks$set(
  output = ansi_aware_handler, 
  message = ansi_aware_handler, 
  warning = ansi_aware_handler,
  error = ansi_aware_handler
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At long last she is done. Her campaign of bullying and cruelty can continue:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cli_alert(&amp;quot;I&amp;#39;m still here bitches, and I know everything. -A&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;→ I'm still here bitches, and I know everything. -A
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="writing-longer-messages"&gt;Writing longer messages&lt;/h2&gt;
&lt;p&gt;Up to this point the threatening messages that A has been sending have been short, only one line long. In several cases the messages have been cleverly constructed so that the &lt;em&gt;same&lt;/em&gt; line (the status bar) is used to display multiple pieces of text, but ultimately it’s still one line messaging. A needs to take a little care when she wants to branch out. Conceptually, a message should correspond to “one semantically meaningful bundle of information” that might be split over several lines. However, as far as R is concerned, each call to &lt;code&gt;cli_text()&lt;/code&gt; creates a distinct message. To see how this might cause A some grief, here’s the letter that she sent to Aria’s mother announcing the infidelity of Aria’s father:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;send_cruel_letter_piecewise &amp;lt;- function() {
  cli_text(&amp;#39;Your husband, Byron, is involved with another woman&amp;#39;)
  cli_text(&amp;#39;and when I say involved I mean in a &amp;quot;romantic&amp;quot; way.&amp;#39;)
  cli_text(&amp;#39;This is not something recent. It started before your&amp;#39;)
  cli_text(&amp;#39;family went away to Iceland and from the look of&amp;#39;)
  cli_text(&amp;#39;things, it may be starting up again now that you\&amp;#39;re&amp;#39;)
  cli_text(&amp;#39;back. I know this is hard to hear, but it is the&amp;#39;)
  cli_text(&amp;#39;truth. If you don\&amp;#39;t believe this about your husband,&amp;#39;)
  cli_text(&amp;#39;ask your daughter. She knows all about it.&amp;#39;)
  cli_text(&amp;#39;Sincerely,&amp;#39;)
  cli_text(&amp;#39;A&amp;#39;)
}

send_cruel_letter_piecewise()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;Your husband, Byron, is involved with another woman
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;and when I say involved I mean in a "romantic" way.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;This is not something recent. It started before your
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;family went away to Iceland and from the look of
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;things, it may be starting up again now that you're
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;back. I know this is hard to hear, but it is the
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;truth. If you don't believe this about your husband,
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;ask your daughter. She knows all about it.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;Sincerely,
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is not an ideal implementation. What A wants to send is one message spanning 10 lines not 10 separate one-line messages, but it’s the latter that she has actually implemented here. This is where the &lt;code&gt;cli()&lt;/code&gt; function is handy: to takes an expression as input and collects all the constituent parts into a single message. This version of the function now sends a single message:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;send_cruel_letter_singly &amp;lt;- function() {
  cli({
    cli_text(&amp;#39;Your husband, Byron, is involved with another woman&amp;#39;)
    cli_text(&amp;#39;and when I say involved I mean in a &amp;quot;romantic&amp;quot; way.&amp;#39;)
    cli_text(&amp;#39;This is not something recent. It started before your&amp;#39;)
    cli_text(&amp;#39;family went away to Iceland and from the look of&amp;#39;)
    cli_text(&amp;#39;things, it may be starting up again now that you\&amp;#39;re&amp;#39;)
    cli_text(&amp;#39;back. I know this is hard to hear, but it is the&amp;#39;)
    cli_text(&amp;#39;truth. If you don\&amp;#39;t believe this about your husband,&amp;#39;)
    cli_text(&amp;#39;ask your daughter. She knows all about it.&amp;#39;)
    cli_text(&amp;#39;Sincerely,&amp;#39;)
    cli_text(&amp;#39;A&amp;#39;)
  })
}

send_cruel_letter_singly()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;Your husband, Byron, is involved with another woman
and when I say involved I mean in a "romantic" way.
This is not something recent. It started before your
family went away to Iceland and from the look of
things, it may be starting up again now that you're
back. I know this is hard to hear, but it is the
truth. If you don't believe this about your husband,
ask your daughter. She knows all about it.
Sincerely,
A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much nicer. As every would-be tormenter knows, it’s important to pay attention to the details.&lt;/p&gt;
&lt;h2 id="creating-structured-messages"&gt;Creating structured messages&lt;/h2&gt;
&lt;h2 id="epilogue"&gt;Epilogue&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;cli(
  cli_blockquote(
    quote = &amp;quot;Friends share secrets, that&amp;#39;s what keeps us close&amp;quot;,
    citation = &amp;quot;Alison&amp;quot;
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r-output"&gt;&lt;code&gt;
    &lt;span style='font-style: italic;'&gt;“Friends share secrets, that's what keeps us close”&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span style='font-weight: bold;font-style: italic;'&gt;— Alison&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div id="refs" class="references"&gt;
&lt;div id="ref-cli"&gt;
&lt;p&gt;Csárdi, Gábor. 2021a. &lt;em&gt;Cli: Helpers for Developing Command Line Interfaces&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=cli"&gt;https://CRAN.R-project.org/package=cli&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-crayon"&gt;
&lt;p&gt;———. 2021b. &lt;em&gt;Crayon: Colored Terminal Output&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=crayon"&gt;https://CRAN.R-project.org/package=crayon&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-progress"&gt;
&lt;p&gt;Csárdi, Gábor, and Rich FitzJohn. 2019. &lt;em&gt;Progress: Terminal Progress Bars&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=progress"&gt;https://CRAN.R-project.org/package=progress&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-asciiicast"&gt;
&lt;p&gt;Csárdi, Gábor, Romain Francois, Mario Nebl, and Marcin Kulik. 2019. &lt;em&gt;Asciicast: Create ’Ascii’ Screen Casts from R Scripts&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=asciicast"&gt;https://CRAN.R-project.org/package=asciicast&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-fansi"&gt;
&lt;p&gt;Gaslam, Brodie. 2021. &lt;em&gt;Fansi: ANSI Control Sequence Aware String Functions&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=fansi"&gt;https://CRAN.R-project.org/package=fansi&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-knitr"&gt;
&lt;p&gt;Xie, Yihui. 2021. &lt;em&gt;Knitr: A General-Purpose Package for Dynamic Report Generation in R&lt;/em&gt;. &lt;a href="https://yihui.org/knitr/"&gt;https://yihui.org/knitr/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-rmarkdown"&gt;
&lt;p&gt;Xie, Yihui, J. J. Allaire, and Garrett Grolemund. 2018. &lt;em&gt;R Markdown: The Definitive Guide&lt;/em&gt;. Boca Raton, Florida: Chapman; Hall/CRC. &lt;a href="https://bookdown.org/yihui/rmarkdown"&gt;https://bookdown.org/yihui/rmarkdown&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Yes, it does disappear in this screencast, but that’s just the screencast. If it were the R console it would stay on screen the whole time.&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Somewhat counterintuitively, although cli emits messages that can be suppressed by &lt;code&gt;suppressMessages()&lt;/code&gt;, they don’t behave &lt;em&gt;precisely&lt;/em&gt; the same as the messages produced by &lt;code&gt;message()&lt;/code&gt;. The default handler for base R messages sends the output to the &lt;code&gt;stderr()&lt;/code&gt; connection and so they are often shown as the dreaded “red text” that users learn to fear. To avoid this, the default behaviour in cli sends messages to the &lt;code&gt;stdout()&lt;/code&gt; connection, thereby avoiding this issue. However, cli does allow you to control this behaviour: see the &lt;code&gt;start_app()&lt;/code&gt; and &lt;code&gt;stop_app()&lt;/code&gt; functions for more information.&lt;a href="#fnref2" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;As an aside, if you’re running a site with an RSS feed it may also write malformed characters into the index.xml file as well as any generated .html file. When I encountered this problem I found that even when I “fixed” my .Rmd file the document wouldn’t re-knit, because of the problems with the xml file. Eventually I realised that I could solve the problem by deleting the index.xml file for the RSS feed and &lt;em&gt;then&lt;/em&gt; knitting again. Sigh&lt;a href="#fnref3" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>d5a41260e8c54f0561bef2a24bea5b1f</distill:md5>
      <guid>https://blog.djnavarro.net/posts/pretty-little-clis</guid>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Welcome to the jungle</title>
      <dc:creator>Danielle Navarro</dc:creator>
      <link>https://blog.djnavarro.net/posts/welcome</link>
      <description>I have reluctantly decided to create a new blog. Some thoughts on 
what I hope to achieve, having tried my hand at blogging so very many times 
before</description>
      <guid>https://blog.djnavarro.net/posts/welcome</guid>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
