[
  {
    "path": "posts/pretty-little-clis/",
    "title": "Pretty little CLIs",
    "description": "How to make a gorgeous command line interface in R using the cli package.",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-04-16",
    "categories": [],
    "contents": "\nIf you’ve been working in R for any length of time, you’ve probably realised that you sometimes need to write code that prints information to the R console, and if you’re like me you’ve learned that the simplest way to do this is to use the cat() function. Perhaps you find yourself writing code like this:\n\n\n\n\n\ncat(\"Dead girls walking.\")\nwait_for_message()\ncat(\" --A.\\n\")\n\n\n\n\nThe ominous text messages used in this post are all taken from the TV show Pretty Little Liars\nIn a realistic example, the wait_for_message() function would likely be something that takes some time to complete, and the lines above and below are a polite way to let your user (even if that’s just you!) know when the waiting process starts and when it finishes. For simplicity, suppose wait_for_message() is a function that takes one second to evaluate, such as this one:\n\n\nwait_for_message <- function() {\n  Sys.sleep(1)\n}\n\n\n\nWhen you source a script containing this code, the first part of the message will appear on the console immediately:\n\nDead girls walking.\n\n\nThen after a one second delay, the console updates to reveal that the author of the threatening message is the mysterious “A.” character:\n\nDead girls walking. --A.\n\n\nThis approach works perfectly well for simple text communication, but sometimes you want something that looks a little nicer. After all, if you’re planning to impersonate a dead teenager and terrorise her friends using R, you might as well put a little effort into the details, right?\nMeet the cli package\nIf you’ve worked in the tidyverse (Wickham et al. 2019) for any length of time you will have noticed that messages produced by tidyverse packages seem to have a more polished look to them. Perhaps, like me, you’ve wondered how the magic works and if you too can create pretty messages at the console. As it happens, many wonderful things become possible if you happen to have the cli package (Csárdi 2021) as your talented assistant, and in this post I’ll talk about some of them.\nTo craft a beautiful command line interface (CLI) of our very own, the first thing we’ll need to do is load the package:\n\n\nlibrary(cli)\n\n\n\nThe design of cli separates style from structure: your messaging code specifies the structure associated with the message, not the superficial style. The cli_h1() command generates a “top-level” heading, the cli_h2() command generates a second level heading, cli_alert() creates a generic “alert” message, and so on. So the code you write might look something like this:\n\n\ncli_h1(\"Secret, by The Pierces\")\ncli_alert(\"Got a secret, can you keep it?\")\ncli_alert(\"Swear this one you'll save\")\ncli_alert(\"Better lock it in your pocket\")\ncli_alert(\"Taking this one to the grave\")\ncli_alert(\"If I show you then I know you won't tell what I said\")\ncli_alert(\"Cause two can keep a secret if one of them is dead\")\n\n\n\nWhen this code is executed, the cli package applies the appropriate styling to create the actual output. You can customise this style using the theming system in cli, but I’ve never felt a need to do so because the default theme is rather nice:\n\n\n\n\n\n── Secret, by The Pierces ────────────────────────────────────────────\n→ Got a secret, can you keep it?\n→ Swear this one you'll save\n→ Better lock it in your pocket\n→ Taking this one to the grave\n→ If I show you then I know you won't tell what I said\n→ Cause two can keep a secret if one of them is dead\n\n\nA lot of the cli functionality uses dynamic features of the R console that don’t have analogs in the HTML output produced by R Markdown, so in some cases I’ll show the output in the form of an SVG screencast created using the asciicast package (Csárdi et al. 2019). For example, most of the time there’s some code in between each message that takes some time to execute. What that means is that the output of your code tends to look more like this:\n\n\n\nIn this instance, the output happens to be identical to our first one: all it does is print the lyrics to the music in the title credits from Pretty Little Liars, with a brief pause between each line. However the R console has many dark secrets, and fancier tricks than this are possible once you know a few…\n\nThe theme song is Secrets, the first track from the 2007 album Thirteen Tales of Love and Revenge by The Pierces\nStatus Bars\n\n\ndramatic_pause <- function(seconds = 2) {Sys.sleep(seconds)}\nstatus_bar <- cli_status(msg = \"You found my bracelet.\"); dramatic_pause();\ncli_status_update(id = status_bar, msg = \"Now come find me.\"); dramatic_pause();\ncli_status_update(id = status_bar, msg = \"Good luck bitches.\"); dramatic_pause();\ncli_status_update(id = status_bar, msg = \"-A\"); dramatic_pause()\ncli_status_clear(id = status_bar)\n\n\n\n\n\n\nAlerts, Headings and Lists\nIn addition to the generic alert cli_alert() you can choose alerts that convey specific meaning:\n\n\ncli_alert_info(\"Information\")\ncli_alert_warning(\"Warning\")\ncli_alert_danger(\"Danger\")\ncli_alert_success(\"Success\")\n\n\nℹ Information\n! Warning\nx Danger\n✓ Success\n\n\nHeadings\n\n\ncli_h1(\"Heading 1\")\ncli_h2(\"Heading 2\")\ncli_h3(\"Heading 3\")\n\n\n\n── Heading 1 ─────────────────────────────────────────────────────────\n\n── Heading 2 ──\n\n── Heading 3 \n\n\nLists\n\n\ncli_ul()\ncli_li(\"one\")\ncli_li(\"two\")\ncli_li(\"three\")\ncli_end()\n\n\n● one\n● two\n● three\n\n\nSpinners\n\n\nspinner <- make_spinner(\n  which = \"dots2\", \n  template = \"{spin} It's not over until I say it is.\"\n)\n\nwait_for_reveal <- function(spinner) {\n  for(i in 1:100) {\n    spinner$spin()\n    Sys.sleep(.05)\n  }\n  spinner$finish()\n}\n\nwait_for_reveal(spinner)\ncli_alert_success(\"Sleep tight while you still can, bitches. -A\")\n\n\n\n\n\n\n\n\n\nCsárdi, Gábor. 2021. Cli: Helpers for Developing Command Line Interfaces. https://CRAN.R-project.org/package=cli.\n\n\nCsárdi, Gábor, Romain Francois, Mario Nebl, and Marcin Kulik. 2019. Asciicast: Create ’Ascii’ Screen Casts from R Scripts. https://CRAN.R-project.org/package=asciicast.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-17T14:48:54+10:00",
    "input_file": "pretty-little-clis.utf8.md"
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to the jungle",
    "description": "I have reluctantly decided to create a new blog. Some thoughts on \nwhat I hope to achieve, having tried my hand at blogging so very many times \nbefore",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-04-05",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\nI’ve decided the time has come to restart my blog. I’ve tried blogging many times before with mixed success, and this time around I’d like to avoid the mistakes of the past. I’ve set up this blog with a few principles in mind:\nSimplicity. One mistake I’ve often made is to create blogs using the fanciest tools I could find. For example, I’ve previously used Hugo based packages like blogdown and hugodown, and much as I love those tools (and use them on other sites) I want this blog to be as low-maintenance as possible. To that end I’m using distill for R markdown, and I’m keeping the default settings in most respects.\nEncapsulation. There was a time when I really liked the idea of having my blog integrated nicely with my homepage (djnavarro.net). I’ve become less keen on this because the aesthetic and technical demands of a blog aren’t always aligned with the needs of my homepage. This time I’ve set it up so that the blog.djnavarro.net subdomain corresponds to a different repository from my homepage. I’m hoping this will make blogging simpler from a technical standpoint.\nFocus. Another mistake I have made in the past is letting blogs “sprawl”, mixing personal essays with technical posts. My intention with this blog is to write technical posts only, mostly on R and data science. I’ve moved my personal writing to essays.djnavarro.net and my artwork to art.djnavarro.net. My hope is that this will make blogging easier from an emotional standpoint.\nReproducibility. A frustration I’ve had with my previous blogs is that my posts were not particularly reproducible. Source code was often missing, information about the R session was not provided, and so on. This time, I’ve set up the blog so that there is a “details” section at the bottom of each post containing links to the source code, the R session information, and a lockfile generated using renv::snapshot().\nAt this stage I’m not entirely certain how I’ll use the blog. There are a lot of possibilities, and I have some thoughts on which ones I’d like to explore. A self-contained blog such as this seems nicely suited to teaching materials. An obvious example would be to write blog posts to accompany the data science slides and youtube videos I’ve been making. The lack of written material to go with those talks has bothered me for some time. Another possibility might be to write tutorials on generative art. I use my art website to post the art itself, but the site functions as a gallery rather than a classroom. I get a lot of people asking questions about how I make my art, and this blog might be a good place to provide answers. Those aren’t the only possibilities, of course, but they are appealing ones.\nNot sure how this will go, but fingers crossed! 🤞\n\nLast updated\n2021-04-06 13:19:30 AEST\nDetails\nsource code, session info, lockfile\n\n\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-06T13:19:36+10:00",
    "input_file": {}
  }
]
