[
  {
    "path": "posts/pretty-little-clis/",
    "title": "Pretty little CLIs",
    "description": "How to make a gorgeous command line interface in R using the cli package.",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-04-16",
    "categories": [],
    "contents": "\nIf you’ve been working in R for any length of time, you’ve probably realised that you sometimes need to write code that prints information to the R console, and if you’re like me you’ve learned that the simplest way to do this is to use the cat() function. Perhaps you find yourself writing code like this:\n\n\n\n\n\ncat(\"Waiting for Godot\")\nwait_for_godot()\ncat(\"...done!\\n\")\n\n\n\nIn a realistic example, the wait_for_godot() function would likely be something that takes some time to complete, and the lines above and below are a polite way to let your user (even if that’s just you!) know when the Godot process starts and when it finishes. For simplicity, suppose wait_for_godot() is a function that takes one second to evaluate, such as this one:\n\n\nwait_for_godot <- function() {\n  Sys.sleep(1)\n}\n\n\n\nIf you execute the code above by sourcing a script, the first thing you see at the console is the initial message:\n\nWaiting for Godot\n\nand then after a one second delay, this message is updated to show both messages:\n\nWaiting for Godot...done!\n\nThis approach works perfectly well for simple communication, but sometimes you want something that looks a little nicer. For example, if you’ve worked with tidyverse for any length of time you will have noticed that messages produced by tidyverse packages seem to have a more polished look to them. Perhaps, like me, you’ve wondered how the magic works and if you too can create pretty messages at the console. As it happens, many wonderful things become possible if you happen to have the cli package as your talented assistant, and in this post I’ll talk about some of them.\nMeet the cli package\nThe cli package is developed by Gábor Csárdi, and its goal is to help you effortlessly create a beautiful command line interface (CLI) of your very own.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-16T15:45:28+10:00",
    "input_file": "pretty-little-clis.utf8.md"
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to the jungle",
    "description": "I have reluctantly decided to create a new blog. Some thoughts on \nwhat I hope to achieve, having tried my hand at blogging so very many times \nbefore",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-04-05",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\nI’ve decided the time has come to restart my blog. I’ve tried blogging many times before with mixed success, and this time around I’d like to avoid the mistakes of the past. I’ve set up this blog with a few principles in mind:\nSimplicity. One mistake I’ve often made is to create blogs using the fanciest tools I could find. For example, I’ve previously used Hugo based packages like blogdown and hugodown, and much as I love those tools (and use them on other sites) I want this blog to be as low-maintenance as possible. To that end I’m using distill for R markdown, and I’m keeping the default settings in most respects.\nEncapsulation. There was a time when I really liked the idea of having my blog integrated nicely with my homepage (djnavarro.net). I’ve become less keen on this because the aesthetic and technical demands of a blog aren’t always aligned with the needs of my homepage. This time I’ve set it up so that the blog.djnavarro.net subdomain corresponds to a different repository from my homepage. I’m hoping this will make blogging simpler from a technical standpoint.\nFocus. Another mistake I have made in the past is letting blogs “sprawl”, mixing personal essays with technical posts. My intention with this blog is to write technical posts only, mostly on R and data science. I’ve moved my personal writing to essays.djnavarro.net and my artwork to art.djnavarro.net. My hope is that this will make blogging easier from an emotional standpoint.\nReproducibility. A frustration I’ve had with my previous blogs is that my posts were not particularly reproducible. Source code was often missing, information about the R session was not provided, and so on. This time, I’ve set up the blog so that there is a “details” section at the bottom of each post containing links to the source code, the R session information, and a lockfile generated using renv::snapshot().\nAt this stage I’m not entirely certain how I’ll use the blog. There are a lot of possibilities, and I have some thoughts on which ones I’d like to explore. A self-contained blog such as this seems nicely suited to teaching materials. An obvious example would be to write blog posts to accompany the data science slides and youtube videos I’ve been making. The lack of written material to go with those talks has bothered me for some time. Another possibility might be to write tutorials on generative art. I use my art website to post the art itself, but the site functions as a gallery rather than a classroom. I get a lot of people asking questions about how I make my art, and this blog might be a good place to provide answers. Those aren’t the only possibilities, of course, but they are appealing ones.\nNot sure how this will go, but fingers crossed! 🤞\n\nLast updated\n2021-04-06 13:19:30 AEST\nDetails\nsource code, session info, lockfile\n\n\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-06T13:19:36+10:00",
    "input_file": {}
  }
]
