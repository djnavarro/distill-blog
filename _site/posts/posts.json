[
  {
    "path": "posts/2021-10-19_rtistry-posts/",
    "title": "A resource list for aspiring generative artists in R",
    "description": "Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-10-19",
    "categories": [],
    "contents": "\n\n\n\nPeople often ask me if I have any words of advice for young people. No wait, that’s not right. Nobody wants to hear my words of advice for young people, largely because I have none. What they often do ask me is if I have any words of advice for aspiring generative artists who want to use R to make pretty pictures. To be honest, I don’t have a lot of advice there either, but I’ll try my best.\nLet’s start with the big picture: there are no books or general purpose introductions out there. There are no books, no CRAN task views, no courses you can take. In fact, until quite recently generative art in R was an extremely niche topic. To my knowledge, the #rtistry hashtag on twitter is where you’ll find the most art and the most posts about the topic, but that hashtag is pretty new.1 There were resources that existed prior to that, of course: how could there not be? After all, Thomas Lin Pedersen has been building a toolkit for generative art in R for quite some time now. In his keynote talk at celebRation2020, he refers to an “art driven development” process that has led him to create several packages that are valuable to the would-be generative artist. For example:\nambient is amazingly useful when you want to play around with flow fields or generate interesting multidimensional noise patterns\nparticles provides a toolkit for particle simulation in R: it’s inspired by the d3-force javascript module, and is useful when you want to simulate forces acting on particles\nggforce provides a collection of tools that add some missing functionality to ggplot2, much of which is very handy when making art\nThese tools are great, but if you’re just getting started it can be helpful to play around in a more constrained environment. If you want something extremely simple, you could play around with the flametree package I wrote. It’s not very flexible (it just draws branching things!) but it does have the advantage that you can get started with something as simple as this:\n\n\nlibrary(flametree)\n\n# pick some colours\nshades <- c(\"#1b2e3c\", \"#0c0c1e\", \"#74112f\", \"#f3e3e2\")\n\n# data structure defining the trees\ndat <- flametree_grow(time = 10, trees = 10)\n\n# draw the plot\ndat %>% \n  flametree_plot(\n    background = \"antiquewhite\",\n    palette = shades, \n    style = \"nativeflora\"\n  )\n\n\n\n\nPlaying around with a package like flametree – or jasmines if you want something a little more flexible – is a nice way to start drawing things, but at some point you might want to understand the process involved in creating a system like this. I’ve occasionally used art as a way to help teach people how to program in R, so you might find these programming of aRt slides helpful, and the precursor to flametree is discussed in my slides on functional programming.\nResources like mine can help get you started, but there are many other great artists out there who often post tutorials and walkthroughs. For instance, Antonio Sánchez Chinchón has a lot of really useful tutorials on his blog fronkonstin.com. Ijeamaka Anyene has written a lovely and gentle introduction to her system for rectangle subdivision. Will Chase writes about his process on his blog sometimes: here’s an example on a grid system. Jiwan Heo has a wonderful post on how to get started with flow fields in R among many other lovely posts! You can look outside of the R community too: Tyler Hobbs writes a lot of essays about generative art that describe algorithms in fairly general terms. For instance, one of my systems is built from his essay on simulating watercolour paints. And of course there’s also the walkthrough I wrote for one of my systems here and the piece I wrote that talks a little bit about the psychological process of making art in R.\nMy hope is that these resources will point you in the right direction to get started, but more than anything else I would emphasise that it takes time and effort. Art is a skill like any other. I’ve been practicing for about three years now, and while I am happy with the pieces I make, I still have a lot to learn. And that’s okay – one of the big things I always want to stress is that play is a huge part of the process. Making polished systems comes later!\nIn any case, I’ll leave this post as it is for now but if folks would like to suggest additional resources, I can always update it if need be!\n\n\nLast updated\n2021-10-19 06:49:43 AEDT\nDetails\nsource code, R environment\n\n\n\n\n\n\nA little bit of searching on twitter suggests that I proposed the hashtag on January 20th 2021 in a now-deleted tweet.↩︎\n",
    "preview": "posts/2021-10-19_rtistry-posts/index_files/figure-html5/flametree-1.png",
    "last_modified": "2021-10-19T06:49:44+11:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-09-30_on-blogging-reproducibly/",
    "title": "On blogging reproducibly with renv",
    "description": "Some initial thoughts on how to deploy a distill blog in a reproducible fashion. It's a little harder than it looks and I am still working out all the details. To make my life a little easier, I started writing a small package called \"refinery\", which uses the renv package to manage a separate R environment for every post, and aims to prevent conflicts between renv and distill. I'm not sure it's useful to anyone except me, but it makes me happy.",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-09-30",
    "categories": [],
    "contents": "\n\nContents\nWhy is this so hard?\nSome useful tools\nProject environments with renv\nEscaping the Catch 22\nStep 1: Create the post\nStep 2: Start using renv\nStep 3: Loading the environment\nStep 4: Updating the R environment\nStep 5: Let your readers know!\n\nSo… what next?\n\n\n\n\nI started my very first blog in the dark ages, when dialup internet was a thing and the 21st century was still shiny and new. There are very few hints that this blog ever existed, which is perhaps fortunate for me since it wasn’t very good. For all its flaws though, it was a useful thing to try: rather than use one of the big blogging platforms, I hosted my own static site using the university website, and it got me started thinking about other forms of professional communication besides the tiresome process of writing academic papers. Besides, writing blog posts isn’t just useful, it’s fun.\nIt is surprising, then, that I haven’t managed to keep any of my many blogs running consistently. I used to think this was a personal failing on my part, but I’ve come to realise that technical blogging is an extremely difficult thing to do cleanly. In my first post on this blog I outlined four principles that I’ve tried to adhere to over the last year or two, and I think they’ve served me well:\nSimplicity. Try to use the simplest tools you can: hidden dependencies will hurt you later\nEncapsulation. Isolate the blog: don’t incorporate it into your home page\nFocus. A blog should do one thing well: if you do many things, you can have many blogs\nReproducibility. An R blog needs to manage the R environment cleanly\nThe first three are (I think) somewhat self explanatory. It’s the fourth one that I want to talk about here, because it’s a lot harder than it looks, and my initial post on this blog underestimated how tricky it can be to get this one right. I won’t be so arrogant as to claim that I’ve gotten it right now, but with the help of Kevin Ushey’s very excellent renv package, I’m slowly making progress!\nWhy is this so hard?\nRunning a programming blog based in R markdown is fundamentally hard, because of the very thing that makes R markdown attractive: the blog post is also the source code. This is a both a blessing and a curse. It’s a blessing because it forces you, the blogger, to write code that is readable to your audience. It forces you to write code that actually works: if the code doesn’t work, the post doesn’t knit. This is extremely valuable to you and to your audience. Having become addicted to literate programming tools such as R markdown, I would never want to go back to the bad old days where you wrote your code in scripts and pasted chunks of non-executable code into a document. Over and over again I found that this introduced horrible problems: I’d fix a bug in the source code, and then forget to update it in the document. With the advent of R markdown and the many tools that rely on it (distill, blogdown, bookdown, etc), I hope never to be forced to return to that nightmare.\nHowever, there is a catch. There is always a catch. The catch in this cases is that managing your R environment is hard. Every time you write a new post, your R environment is likely to change. Packages will have been updated, and there is a chance that code you wrote in an old post will no longer run the same way now as it did back then. The passage of time means that eventually all your old posts break: they were written using a particular R environment that no longer exists on your computer. What’s worse is that every post has a unique environment. If you want to ensure that old posts still knit, then every post needs to be associated with its own reproducible R environment. In effect, you’re in a situation where you need to maintain many R projects (one per blog post), that are themselves contained within an encompassing R project (the blog itself). That’s not easy to do.\n\n\n\nFigure 1: Image by Patrick Tomasso. Available by CC0 licence on unsplash.\n\n\n\nSome useful tools\nThe difficulty in managing the R environments in a blogging context is something that comes up a lot, and there are a few workarounds that make your life a little easier. For example, in a Distill blog like this one, you maintain manual control over when a post is rendered. Building the whole site with rmarkdown::render_site() won’t trigger a rebuild of posts, so it’s possible to rebuild the rest of the site without attempting to re-knit old posts. This is a very good thing, and in the early days of blogdown the fact that you didn’t have that protection was the source of a lot of problems (happily, they fixed that now!)\nAnother thing you can do to make things a little easier is to use utils::sessionInfo() or devtools::session_info(). Appending a call to one of these functions to your post will at least ensure that the reader of your post knows something about what the R environment was at the time you last knit the post:\n\n\nsessionInfo()\n\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_AU.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_AU.UTF-8        LC_COLLATE=en_AU.UTF-8    \n [5] LC_MONETARY=en_AU.UTF-8    LC_MESSAGES=en_AU.UTF-8   \n [7] LC_PAPER=en_AU.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_AU.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nloaded via a namespace (and not attached):\n [1] fansi_0.5.0         rprojroot_2.0.2     digest_0.6.28      \n [4] R6_2.5.1            jsonlite_1.7.2      magrittr_2.0.1     \n [7] evaluate_0.14       highr_0.9           stringi_1.7.4      \n[10] rlang_0.4.11        renv_0.14.0         fs_1.5.0           \n[13] refinery_0.0.0.9057 jquerylib_0.1.4     bslib_0.3.0        \n[16] vctrs_0.3.8         rmarkdown_2.10      distill_1.2        \n[19] tools_4.1.1         stringr_1.4.0       xfun_0.26          \n[22] yaml_2.2.1          fastmap_1.1.0       compiler_4.1.1     \n[25] htmltools_0.5.2     knitr_1.36          downlit_0.2.1      \n[28] sass_0.4.0         \n\nThese are useful, and taken together it’s possible to run a blog that won’t break on you, but it’s still less than ideal. For example, one problem I used to encounter often is the “minor edit” headache. I would often want to revisit an old blog post – one that no longer knits because the R environment has changed – and add a brief note mentioning that the code doesn’t work with more recent versions of certain packages! This is something I think is important to do, so that anyone reading my old posts won’t try using the same code in an R environment that won’t run it. At a bare minimum that seems polite, but… in order to make the update, I would need to modify the post, which means I’d have to re-knit the post, but… as aforementioned, the post won’t knit. It’s a Catch 22: you can’t inform people that the post won’t knit unless you are able to knit the post.\n\n\n\nFigure 2: Image by Andrew Neel. Available by CC0 licence on unsplash.\n\n\n\nProject environments with renv\nI imagine there are many different ways to solve this problem, but the approach I’ve taken in this blog is to rely on the renv package by Kevin Ushey. The goal of renv is to allow you to create and manage reproducible R environments that you can associate with a project. This post isn’t the place to write a full tutorial on how to use renv, but to oversimplify somewhat, the renv package manages an R environment using two things the lockfile and the a local package library. For any given project, you can start using renv using renv::init().\nThe lockfile associated with an R project has the file name renv.lock and it consists of a collection of records that precisely specify the version of renv, the version of R, and detailed information about the packages used in the project. One nice property of renv is that the lockfile is capable of tracking packages installed from GitHub as well as CRAN. For example, here’s what an entry looks like for a package installed from CRAN:\n\"distill\": {\n  \"Package\": \"distill\",\n  \"Version\": \"1.2\",\n  \"Source\": \"Repository\",\n  \"Repository\": \"CRAN\",\n  \"Hash\": \"5edf0b55f685c668d5e800051bc31f3d\"\n}\nThis entry tells you that this post (because I’m copying from the lockfile for this post) was generated using version 1.2 of the distill package, downloaded from CRAN. On the other hand, the version of cli that I’m currently using came from GitHub:\n\"cli\": {\n  \"Package\": \"cli\",\n  \"Version\": \"3.0.1.9000\",\n  \"Source\": \"GitHub\",\n  \"RemoteType\": \"github\",\n  \"RemoteHost\": \"api.github.com\",\n  \"RemoteRepo\": \"cli\",\n  \"RemoteUsername\": \"r-lib\",\n  \"RemoteRef\": \"HEAD\",\n  \"RemoteSha\": \"154f3215e458728a2155217a7f4897da5b8edea0\",\n  \"Hash\": \"3347d46b7c20b31f8d40491f57e65c38\"\n}\nThe complete lockfile is rather long, and it contains all the information that you need to recreate the R environment.1 For any given project, you can create a lockfile using renv::snapshot().\nHowever, although the lockfile contains the description of the R environment, it doesn’t actually contain the packages. Without the actual packages, you can’t do very much, so the renv package creates a local package library for each project, which contains the actual package installations.2. Given a lockfile, you can update the corresponding library using renv::restore().\nTo learn more about renv, I strongly recommend reading the package documentation. It’s very good.\n\n\n\nFigure 3: Image by Nadine Marfurt. Available by CC0 licence on unsplash.\n\n\n\nEscaping the Catch 22\nThe usual intent when using renv is to maintain one R environment per project, which is not quite perfectly aligned with the needs of a blog. For the blogging situation, we want one R environment per post, and – importantly – we don’t want the renv infrastructure and the blog infrastructure to interfere with each other. It’s not too difficult to do this, but I found it a little finicky to get started. So, to make my life a little easier, I started writing refinery, a small package whose sole purpose is to make distill and renv play nicely together!\nThe package is very much a work in progress. It’s reached the point where I can start using it on a regular basis in my own blogging, but that’s as far as I’ve gotten. But, to give you a sense of some of the design choices I’ve made, here’s a quick run through. The intended blogging workflow is as follows:\nStep 1: Create the post\nAs a general rule, I find it extremely helpful to create posts from a template file. In my blog there’s a _templates folder containing R markdown files that are pre-populated with information that rarely changes (e.g., my name doesn’t change very often). Actually, I only have one template for this blog, but in principle there can be as many as you like: my post template has author information pre-populated, contains instructions on which fields need to be updated, and so on. Using templates is a low-tech but effective way of improving reproducibility, because it will help to ensure that all posts adhere to a common structure.\nSo the first step is to create a new post from a template, and to that end the refinery package has a use_article_template() function:\n\nrefinery::use_article_template(\n  template = \"_templates/standard_post.Rmd\",\n  slug = \"fabulous-blog-post\", \n  date = \"1999-12-31\"\n  renv_new = FALSE\n)\n\nAt a minimum, you need to specify the template argument and the slug argument. If you don’t specify a date, today’s date will be used. The concept behind this function is not at all novel: it was inspired by and is deeply similar to the create_post_from_template() function from Ella Kaye’s distilltools package. The arguments are a little different, but it’s the same idea.\nWhere use_article_template() differs from other “new post” functions is that it contains a renv_new argument. If renv_new = TRUE (the default), then creating the post will also set up the infrastructure necessary to manage the R environment with renv. My usual approach is to stick with the default, and allow use_article_template() to take care of that step for me, but for expository purposes the code snippet above prevents that from happening. So we’ll have to do that manually in the next section.\nIn the meantime, however, the effect of calling use_article_template() is to create a post inside the _posts folder of your blog. In the example above, a new folder will be created here:\n_posts/1999-12-31_fabulous-blog-post\nInside this folder will be an index.Rmd file that has been constructed from the post template.\n\n\n\nFigure 4: Image by Nick Fewings. Available by CC0 licence on unsplash.\n\n\n\nStep 2: Start using renv\nBecause I set renv_new = FALSE in the code snippet above, we currently don’t have any renv infrastructure associated with this post. To do that, we’d use the following command:\n\n\nrefinery::renv_new(\"1999-12-31_fabulous-blog-post\")\n\n\n\nLike everything else in the refinery package, this is just a convenience function. All of the heavily lifting is being performed by renv::init(). What the refinery::renv_new() does is make sure that the renv infrastructure doesn’t get lumped in with the distill infrastructure, and a few other little niceties.\nWhy separate renv from distill? I’m so glad you asked! The default behaviour of renv::init() is to create a renv folder inside your project directory. This makes perfect sense in the “one environment per project” scenario, but it’s awkward for a blog. If you define “the blog” as the project, then you’re right back where you started: there’s no way to have separate environments for each post. But if you define “the post” as the project, you run into a different problem: distill doesn’t know about renv, and if a post folder contains a renv folder, distill will search inside it looking for things that might be blog posts (and it sometimes finds them, which leads to chaos!) We don’t want that.\nThe solution adopted by the refinery package is to create a new top level folder called _renv,3 and then place all the renv infrastructure in there. For our hypothetical post above, the renv infrastructure would be stored in\n_renv/_posts/1999-12-31_fabulous-blog-post\nThe lockfile and library files associated with our new blog post are stored in there, cleanly separated from anything that distill would be interested in peeking at!\nStep 3: Loading the environment\nThe next step is to make sure that your blog post makes proper use of the renv infrastructure we’ve just created. To do that for the hypothetical post above, all you’d need to do is ensure that the R markdown file contains a line like this:\n\n\nrefinery::renv_load(\"1999-12-31_fabulous-blog-post\")\n\n\n\nWhat that will do is ensure that when the post is knit, all the R code is executed using the R environment associated with the post. Yet again, if you take a look at the source code you’ll see that the refinery package really isn’t doing very much work. This is a very thin wrapper around renv::load().\nStep 4: Updating the R environment\nWhen writing a new blog post, there are two main functions in the refinery package that I use to manage the R environment (and a third one I use to rage quit!)\nThe refinery::renv_snapshot() function is a wrapper around renv::snapshot(): it uses renv to scan the post folder looking for package dependencies, and then writes the lockfile to the appropriate location in the renv infrastructure.\nThe refinery::renv_restore() function is a wrapper around renv::restore(). It updates the state of the local package library so that it mirrors the state of the lockfile\nThe refinery::renv_delete() function deletes all the renv infrastructure associated with a particular post. It exists so that you can wipe the local library, lockfile, etc, and start over.\nThe process works like this. When the renv infrastructure gets created using refinery::renv_new(), it includes a bare minimum of packages in the local package library: only renv, distill, refinery, and their dependencies are added. It doesn’t, for example, include dplyr.\nAs you’re writing your blog post, you might find yourself using dplyr functions, and when you go to knit that post… it won’t work, even if you have dplyr on your machine. That’s because dplyr is not yet listed in the lockfile and it’s not stored in the local package library. We can fix this with two lines of code. First, we can use refinery::renv_snapshot() to scan the current post: because Kevin Ushey is very smart and renv is a very good package, the renv::snapshot() function that does all the real work will automatically discover that dplyr is being used, and it will update the lockfile:\n\n\nrefinery::renv_snapshot(\"1999-12-31_fabulous-blog-post\")\n\n\n\nThis updates the lockfile, but only the lockfile. What you can then do is use the updated lockfile to update the library. The command for that is refinery::renv_restore() which – shockingly – is in fact just a thin wrapper around renv::restore():\n\n\nrefinery::renv_restore(\"1999-12-31_fabulous-blog-post\")\n\n\n\nOnce you’ve done that, your post will knit, your lockfile will record all the reproducibility information associated with your post, and you will be happy! (Maybe)\nStep 5: Let your readers know!\nOne thing I’ve been doing on my blog is including a couple of additional appendices besides the usual ones that distill provides: a “last updated” appendix that contains the timestamp indicating when post was most recently re-knit, and a “details” appendix that contains two links: one that goes to the R markdown source for the blog post, and another one that goes to the renv lockfile for the post. For that, there’s a convenience function called insert_appendix(). There are two arguments you need to include: repo_spec is the usual “user/repo” specification for the GitHub repository, and name is the name of the folder containing the blog post. Something like this:\n\nrefinery::insert_appendix(\n  repo_spec = \"djnavarro/distill-blog\"\n  name = \"1999-12-31_fabulous-blog-post\"\n)\n\n\n\n\nFigure 5: Image by Brett Jordan Available by CC0 licence on unsplash.\n\n\n\nSo… what next?\nOne of the open questions I have is whether it’s worthwhile putting much more effort into the refinery package. As it stands I’m planning to improve the documentation a little (so that “me six months in the future” doesn’t hate “me today”), but in truth this is something I wrote for myself: I like having the refinery package around because it supports this blog, but that goal is now (I hope!) mostly accomplished. It may be that other folks running distill blogs would like to use these tools, in which case it might be valuable to do something more rigorous like, oh, write some unit tests and send it to CRAN.\nFor now though I’m happy where things stand. If things work as planned, this should give me the infrastructure I need to maintain this blog properly for as long as I want to, and when the world moves on and an old post is no longer accurate, it should be easy to edit the post noting that the code in the post won’t work any more, re-knit it using the original R environment, and continue blogging with fewer tears. At least, that’s the hope!\n\n\nLast updated\n2021-10-01 20:41:34 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\nIt doesn’t give you complete information about the machine it’s running on though, and I’m not quite at the point that I’m willing to resort to docker yet!↩︎\nThis is an oversimplification: renv tries to be efficient and maintains a cache that helps you avoid duplication. But as I said, I’m not going to dive into details here↩︎\nI decided to call the top-level folder _renv rather than renv to ensure that distill will ignore the folder unless you explicitly tell it otherwise. The _renv files won’t end up being copied to your website.↩︎\n",
    "preview": "posts/2021-09-30_on-blogging-reproducibly/preview-image.jpg",
    "last_modified": "2021-10-01T20:41:35+10:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-09-26_setting-up-on-hic-et-nunc/",
    "title": "How to mint digital art on HEN",
    "description": "Not every artist wants to make cryptoart, and that's okay. Others do, and that's okay too. But if you want to try it out in a socially responsible way, it takes a bit of effort to get started. This post attempts to make the process a little easier by walking you through the whole thing, on the assumption that you are an artist who (like me) has very little interest in blockchain or cryptocurrency but would like to get paid and pay the rent",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-09-26",
    "categories": [],
    "contents": "\n\nContents\nPrologue: Barriers to entry\nEnvironmental costs matter\nThere are alternatives\nIt can be confusing\nLet’s demystify it\n\n1: Get an overview\n2: Create a wallet\n3: Tell HEN who you are\nSynchronise with your wallet\nThe HEN menu is weird\nName, avatar and bio\nCheck out your profile\n\nIntermission: Follow people\n4: Get a little money\n5: Release your art!\nMinting the art\nPutting OBJKTs up for sale\nCreating auctions\nSome art…\n\n6: Share on social media\n7: Manage your identity\nEstablishing a Tezos Profile\nCreating an alias on Tezos Blockchain Explorer\nPurchasing a Tezos Domain\n\n8: Convert tez to dollars\nEpilogue: Is all it worth it?\n\n\n\nCryptoart can be a touchy subject for generative artists, and it’s something a lot of us have messy feelings about. In my case it is no secret that I feel conflicted, and I completely understand why a lot of us are uncomfortable with it. I genuinely believe there are many perfectly good reasons why a generative artist would choose not to participate. On the other hand, I also recognise that there are some very sensible reasons why a generative artist would want (or need) to sell NFTs: artists have to pay rent, for example. So this post isn’t about passing judgment one way or the other. It’s intended to be a guide to help other artists get started in this area, particularly artists in the R community, if they should decide to try it out. That’s all.\nThis post is also not supposed to be an introduction to blockchains or cryptocurrencies. It doesn’t dive into the details on what these things are or even what an NFT is. I make art: I don’t care about any of these subjects. What I’m assuming is that you’re coming to this world from a similar position to me: you have a vague understanding of what blockchain is, what cryptocurrencies are about, and have a similarly vague notion that an NFT is kind of like a “digitally signed copy” of your art that you can sell to other people. That’s all you need.\nPrologue: Barriers to entry\nOne thing I have noticed about the world of cryptoart is that there are many barriers to entry. Some barriers are obvious: if you want to sell art on Foundation, for example, you need to be invited. To be invited, you need to know someone who can and will invite you. As anyone who has ever been excluded from a fancy venue by virtue of their race, gender, sexual orientation, transgender status etc can attest, an invitation requirement is a non-trivial and frequently discriminatory barrier. “By invitation” systems create entry barriers by design: for good or ill, they are inherently exclusionary. But there are other ways in which cryptoart creates barriers to entry.\nEnvironmental costs matter\nAnother kind of barrier comes from the nature of cryptoart. Blockchains were not designed to be energy efficient, and they can be extraordinarily wasteful (much more than you’d think). Environmental considerations also create barriers to entry, albeit indirect barriers. For example, the biggest cryptocurrencies like Bitcoin and Ethereum operate on a “proof of work” principle (often abbreviated to “PoW”) and as the name suggests, operations on those chains require a lot of computational work. A lot. They are staggeringly wasteful, and as a consequence the total energy consumption of these chains is so high that an NFT minted on one of these chains has a very high carbon footprint. Proof of work chains are an environmental disaster, and so (in my mind) they are socially irresponsible. Don’t use them if you can avoid it.\nThis poses a problem for artists, unfortunately. The biggest cryptoart markets are based on the Ethereum chain, and Ethereum is a proof of work chain. True, there are plans to change this and make Ethereum more ethical, but it hasn’t happened yet and I personally am unwilling to participate until that switch actually occurs. This is deeply unfortunate from artistic point of view, because it rules out OpenSea. It sucks because OpenSea is the largest marketplace and it’s very easy to get started there. For instance, I have an unused account that I set up in a few minutes before I realised the problem. But for me the end-user convenience wasn’t worth the environmental costs, so I abandoned this idea at the outset. On the plus side, OpenSea have announced that they are planning to support the Tezos blockchain (see below), and when that day comes I will probably make use of my OpenSea account: the thing I take moral issue with is not OpenSea, it is with Ethereum (or more precisely, with proof-of-work chains). Personally, I don’t want to touch the stuff.\nSo what are the alternatives?\nThere are alternatives\nThe main alternative to the “proof of work” blockchains are the “proof of stake” (PoS) blockchains. These don’t require anywhere near as much computation, and as a consequence are much more energy efficient. For that reason, NFTs on those chains are often called “clean NFTs”. There are a multiple proof of stake chains (Tezos, Solana, etc), but the one I’m most familiar with is Tezos. To give you a sense of just how extreme the difference is, this is a screenshot that popped up on one of the sites while I was doing my initial exploration:\n\n\n\nEven if this claim is somewhat exaggerated for marketing purposes, the sheer scale of it is remarkable. A multiplicative factor of 1.5 million is… enormous. I could literally mint NFTs on Tezos for every single image that I have ever created for the rest of my life, and it would still be several orders of magnitude more energy efficient than minting one piece on Ethereum. To my way of thinking, that makes a massive difference to the moral calculus associated with minting NFTs. In fact, the difference between Tezos and Ethereum is so extreme that there is actually one art marketplace there – Bazaar – that is not just carbon neutral but is actually carbon negative. That’s only possible because Tezos is so much more efficient than Ethereum, and it becomes practical for the developers to impose a carbon tax on minting: the transaction costs are used to purchase sufficient carbon offsets to ensure the system as a whole remains carbon negative. Right now I wouldn’t recommend setting up on Bazaar because it’s so early in development that it’s hard to use, but I’m absolutely keeping an eye on it for the future!\nSetting up on the Tezos blockchain is particularly appealing because it has an established digital art marketplace called “hic et nunc”. The name is Latin in origin and translates to “here and now”. You’ll usually see it abbreviated to “HEN”, which is what I’ll call it in this post, but some people use “H=N”, I guess because it looks visually similar to the HEN logo. The HEN marketplace is completely open: you don’t need an invitation. There’s no super-secret club to be invited into (as far as I know!), and to my mind that’s a huge positive. Better yet, a few folks from the R art community are already there. I’m entirely certain that there are others I don’t know about yet, but so far on HEN I’ve already found Thomas Lin Pedersen, Will Chase, Antonio S. Chinchón, and George Savva. As of a few days ago, I’m there too.\nOpenness! Community! Yay!\nIf there’s one thing I have learned from the lovely R folks on twitter, everything is better when you are part of a supportive team of people who actually care about each other and work to build each other up. From my perspective, this makes HEN a very attractive option.\nThere is, unfortunately, a catch. There is always a catch.\nIt can be confusing\nOne big limitation to HEN is that it isn’t easy to get started there unless you are already somewhat enmeshed in the crypto world generally, or the cryptoart scene specifically. The ecosystem is distributed over several sites that have weird names without enough vowels, the user interfaces on the sites tend to be unconventional (often pointlessly so in my opinion), and the “how to” guides aren’t very easy to read. The overall aesthetic and typology screams out WE ARE THE COOL KIDS in capital letters. It doesn’t even have the good grace to be subtle about it. Taken together, all these little things add up, and it annoys me. I have been a professional educator for 15 years now, and I can absolutely guarantee that the overall effect of this is to create a de facto entry barrier. All these things act as signals to exclude people who aren’t already part of the clique. It feels disproportionately uncomfortable if you’re an outsider. It tells you that you’re not welcome if you’re not one of the cool kids. Are you one of the cool kids? No? Then sorry. No HEN for you babe.\nWell, fuck.\nYet again, there are barriers to entry to HEN, and that makes me uncomfortable. However, unlike the other cryptoart options I looked at, there’s something I can do to improve the situation: I can write a blog post explaining the process. This blog post.\nLet’s demystify it\nLet’s assume you’re not one of the cool kids. Let’s assume you’re just a regular human being who likes to make generative art in R, and are a little curious. You have a vague idea of what cryptocurrencies are (yeah, yeah, digital currency blah blah blah). You have a vague idea of what an NFT is (digitally signed copy of the art, whatever dude). Maaaaaybe you’ve sort of heard of HEN … but that’s only because you’ve seen some R people posting about it on twitter. And that’s it. That’s all you know. But maybe you want to try it out, just to see if it’s for you? Just to try. But you really, really, reaaaaaalllllllly don’t want to wade into all the details and you’re secretly worried that it’s all too complicated and you won’t be able to do it. Your impostor sydrome is going wild. Is that you? Do you feel the same way I felt?\nIf so, this post is written for you.\n1: Get an overview\nWhen I started setting up on, I wandered around the Tezos cryptoart landscape in confusion, wandering aimlessly over the terrain. It was all deeply unsettling. Eventually I pieced together some overall view of things, but I wouldn’t recommend doing things the same way I did. I think the best thing to do first is to “zoom out” and look at the landscape as a whole. The best site I’ve found for doing that is tezos.art. If you click on the link it will take you to a page with the following three sections:\nMarketplaces: Sites where you can mint, buy, and sell art\nWallets: Tools that handle your identity and store your funds\nCommunity: Places where you can go for help\nIt’s worth taking a quick look at this page because it gives you a feel for what all the moving parts are, but doesn’t dive into details. You’ve taken a quick peek, yes? Cool. Let’s get started…\n2: Create a wallet\nIt’s a little counterintuitive, but the natural place to start is not the art marketplaces: the first thing you need is a wallet. The reason for this is that your wallet serves two distinct purposes. As the name suggests, the wallet provides a method for storing funds: the currency itself is referred to as “tezos”, which you’ll see abbreviated to “tez” or denoted “ꜩ”. However, it also serves as your unique identifier on the Tezos blockchain. On blockchains as in life it is rather hard to do anything interesting without a public identity, so you need to create one first.\nOkaaaay… at this point you’d probably be wondering “where do I sign up for one of these wallets?” Excellent question. As you will have noticed by peeking at the tezos.art website, you have a few different options. Being offered choices is nice, of course, but it can also be anxiety-provoking when you don’t even know what the differences between the options are. So, for whatever it’s worth, I’ll mention that I chose Temple Wallet. I made that choice for two reasons and only two reasons. First, it was one of the options listed on the HEN wiki. Second, I was complaining privately to Will Chase about how confused I was and he told me uses Temple and I copied what he did. That being said, I suspect the choice is arbitrary.\nFor the sake of argument, I’ll assume you decided to use Temple too. So now you’re clicking through the link above in order to open an account with Temple Wallet and… wait, it’s just a browser extension? Yup. This seems to be very common in blockchain land, and initially it struck me as bizarre. The longer I hang around there, however, the more I realise it does make a kind of sense. Once you start doing things on Tezos, you’ll find that you have to validate everything you do. Any time you ask a website to undertake some action on your behalf, the first thing that will happen is that you’ll be asked to authorise the action using your public identity. What that means is that you have to use your wallet all the time, even for things that don’t cost money. A browser extension makes this a little easier. When the website asks you to authenticate, the wallet browser extension will create a little popup window that asks you to confirm the transaction. There’s a bit of friction to the process sometimes, and it feels a little alien, but it does start to feel normal after a while.\nMoving on… the next little strangeness is that when you set up the wallet you don’t create a username, only the password, and you’ll be given a “recovery phrase”, which is a sequence of 12 random words. Don’t lose either of these things. Here, as always, I strongly recommend that you use a password manager to store your password, because there aren’t that many options for recovery if you start losing passwords. Personally, I’ve been using 1password for a few years and I really like it. So yes. Use a password manager, store your wallet password there and store your recovery phrase there too.\nAt the end of this process you are assigned a public identity, which is a long string of complete gibberish. For example, this is me:\ntz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7\nNaturally, the first thing I did when seeing this is groan. The second thing I did is notice the Srmojf substring and it made me think of Smurfs. So I secretly think of this gibberish identifier as the Smurf, and that’s how I’ll refer to it for the rest of this post. Of course, in the long run you probably don’t want to be a random string of digits, you want to have a name! This is possible to do, and I’ll walk you through that later. But right now that’s not a complication you need to care about.\nWe’ll get to that a little bit later but the key thing for now is that your equivalent of the Smurf is both a public identifier and a bank account number. If someone wants to send you some tez, all they need to know is that string.\n3: Tell HEN who you are\nSynchronise with your wallet\nWhen you go to the HEN website you’ll see a little bit of text on the top right hand side that has a link that says “sync”. Click on that:\n\n\n\nThis will bring up an overlay that looks like this:\n\n\n\nIf you chose a Temple wallet choose the “Temple - Tezos Wallet (ex. Thanos)” option. It might ask for your password at this point but it probably won’t if you’re already logged in. What you’re more likely to see is a screen like this:\n\n\n\nThis is a message from your wallet asking you to confirm that yes, you do want to synchronise with HEN (it also shows you that I currently have a balance of 11 tez, which I guess is something like US$60). Click on connect, and HEN will now be synchronised with your identity. You can see that because the menu at the top now looks something like this:\n\n\n\nYou’re now synced: in effect, you are now logged in to HEN. You still don’t have a username, but you have authenticated yourself and you can now change some settings.\nThe HEN menu is weird\nOkay, let’s move to the next step. To the right of your Smurf, you’ll see the “hamburger” menu. It behaves pretty much the same as any menu you’d encounter on the internet, but some of the options have very non-intuitive names. Here’s what the menu looks like, with my annotations added:\n\n\n\nAs with everything about HEN, it’s very minimalist. Some of the options are easy to understand, but others are not. The options I’ve been using most are these:\nsearch takes you to the HEN search page\nedit profile allows you add some information about yourself (see next section)\nmanage assets will take you to your profile page (it took me a long time to realise this)\nOBJKT (mint) is the option you select when you want to create art. I’ll talk bout that later\nName, avatar and bio\nThe time has come to give yourself a name. If you do things in the right order and with the right mental model of what’s going on, this is pretty easy to do, but it’s easy to get a little confused because there are actually multiple things going on here, and you always have to keep in mind that your equivalent of my Smurf string is your actual identity.\nSo… your first step is to tell HEN to link your Smurf string to a name, bio and avatar. Click on “edit profile”. This brings up another slightly unconventional looking screen that has several options you can set. Here’s what mine currently looks like:\n\n\n\nThere are three things you can do immediately without any major hassle:\nFirst, if you click on “choose file” you can upload an image to give yourself a profile image.\nSecond, you can give yourself a username. The advice I read on the relevant HEN wiki page suggested that you should avoid spaces and special characters, and should stick to lower case letters because usernames are case sensitive.\nThird, you can write a brief description of yourself. It doesn’t have to be very thorough. Most people say something about who they are and what they do, but you don’t have to. For example, I’ve had a habit of identifying myself as “an object of type closure” on all my social media websites. It’s intended as a silly reference to the classic R error message:\n\n\nidentity[]\n  \n\nError in identity[]: object of type 'closure' is not subsettable\n\nAs it happens, this allowed me to make an even sillier double-layered joke in my HEN bio. When you create art on HEN the tokens that you generate are referred to as OBJKTs, so now I refer to myself as “an OBJKT of type closure”. I’m so funny.\nAaaaanyway… once you’ve done those three things, click on “save profile”, and you’re done for now. Ignore everything below the “save profile” button. All that stuff is useful, and it will let you do things like link to your twitter profile and your github profile, but it’s surprisingly finicky to set up and it costs money, so we’ll leave that until later.\nCheck out your profile\nBefore moving on, take a quick look at your profile. As I mentioned earlier, you can do this through the menu system, by selecting the “manage assets” option. Personally I wish they’d chosen a better name: I’m not an investor and I don’t think of my art as “assets”. The page that displays my art is my homepage on HEN, and it bothers me a little that the site frames it in such mercenary terms. It’s irritating. But whatever, it’s not a dealbreaker.\nIt’s worth quickly commenting on the URL for your profile. When you click on the “manage assets” link, it will take you to a URL that identifies you using the Smurf. For me, that URL is:\nhttps://www.hicetnunc.xyz/tz/tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7/\nAs long as you have your very own Smurf in your wallet, you’ll have this URL. However, if you followed the instructions in the last section, HEN is kind enough to arrange it so that the ugly Smurf based URL will automatically redirect to one based on your username. For me, that URL is:\nhttps://www.hicetnunc.xyz/djnavarro/\nAt this point, you exist on HEN! Yaaaay!\nIntermission: Follow people\nThere’s more stuff you can do to get your account set up, but you might want to take a little breather and look for some art. Maybe you want to search for someone you know in the R community who might be on HEN, and you’d like to find them. As I mentioned earlier, the HEN site does have a search page, but there are some limitations. It’s okay if you want to search by keywords to find art or artists, but what it won’t let you do is follow them. Personally, I quite like being able to follow artists whose work I love, and it would be pretty cool to have a feed where I can see what they’ve posted, arranged in chronological order. That’s where the the “HEN explorer” website is handy:\nhttps://www.henext.xyz/\nLike HEN itself, the HEN explorer site has browsing and search capability. It’s a little clunky in places (on my browser, there seems to be a bug where the search box only works when you’re on the home page), but it does the job.\nTo use HEN explorer, you’ll need to synchronise with your wallet (i.e., log in). To do that you can click on the “profile” icon in the nav bar (the one that looks like a little person), or just visit\nhttps://henext.xyz/profile\nThat will bring up a screen that looks like this\n\n\n\nClick on the “connect wallet” button, and it will take you through the same steps that were involved when you connected your wallet to the HEN site.\nOnce you’ve done that, you’re logged in to HEN explorer, and you’re able to find artists you like and follow them! If you would like to follow me, you can search for “djnavarro” on the HEN explorer search box, or you can visit my HEN explorer profile page directly:\nhttps://www.henext.xyz/tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7\nAdd a few artists you like, and you’ll get a sense of what the feed looks like. The location of the feed is\nhttps://www.henext.xyz/following\nHappy browsing!\n4: Get a little money\nOne slightly frustrating thing about this process is that it’s hard accomplish very much in this arena without spending money, and we’re rapidly reaching the point where you’ll need a little bit. Thankfully, if you’re an artist wanting to create your own art, and aren’t looking to collect anyone else’s, you don’t need very much to get started. If you’re in the R community there’s a good chance you can ask one of the other R folks on HEN to help out. That’s what I did, and I’m grateful to the people who sent me a few tez, and the others who spontaneously offered. R people are lovely.\nIf the “ask a friend” approach is an option for you, I’d recommend it for artists. The reason I say this is that you have a bigger set up cost (in terms of your time and effort) than someone who is joining in order to purchase art, so from the perspective of the artist all you need – right now – is a little start up fund. To use myself as the example, I made a lot of weird mistakes setting up and wasted quite a lot of transactions, but even with all that I think I only spent about 1 tez in total (at the exchange rate at the time that was about US$5).\nAssuming that you can solve the problem that way, you can take care of the other financials later (and there’s a guide on how to do that coming later in the post). There’s a part of me that hopes that if the R art community does end up with a larger presence on HEN, we’ll look after our own. We’re R folks, and we pay it forward because we care for each other.\nThat being said, I’m also not naive, and I know perfectly well that it doesn’t always work that way, so I’ll briefly mention other options. For example, the HEN website has some suggestions for other places you can ask for help. Alternatively if you have a Visa card, one possibility is to buy through https://tzkt.io/buy-tezos (the tzkt.io site will come up later in the post!), though you’ll need identification documents for this (or any other option) because it’s a financial institution. Finally, you can sign up at a currency exchange, which you’ll probably want to do later anyway because that’s going to be how you convert the funds from your HEN sales to regular currency. I’ll talk about that later on.\nRegardless of how you solve this part of the problem, I’m hoping that at this point you have a few tez to start out!\n5: Release your art!\nMinting the art\nSurprisingly, the process of releasing your art on HEN is quite easy, at least when compared to how complicated everything else is. If you open the menu and click on the “OBJKT (mint)” option, it will take you to the minting page, which looks like this:\n\n\n\nAt this stage in the process you upload the file, give it a name and a description, and make some decisions about (a) how many tokens you want to create, and (b) your royalties, the percentage of future sales that are returned to you. Here’s me filling one out:\n\n\n\nClick on the preview button, and it will show you a preview of what the page will look like when it goes live. If you’re happy with it you can proceed and click the “mint OBJKT” button. You’ll be asked by your wallet to confirm the minting operation (this costs a small amount of tez), and then after a short time the OBJKT (i.e., the token) exists. In this case, here’s the page displaying the OBJKT that I’ve just created:\nhttps://www.hicetnunc.xyz/objkt/359761\nPutting OBJKTs up for sale\nThe tokens now exist, but as yet they have not been placed on the market. People can’t buy them from you. To place the token for sale, go to the page showing the token (i.e., the link above). It will look something like this:\n\n\n\nIf you want to put the art on sale, click on the “swap” link that I’ve highlighted here (and if you change your mind and want to destroy it, click on the “burn” link next to it). The interface will look like this:\n\n\n\nIt will then let you decide you many of your tokens you want to put up for sale, and set the price for each one. For this particular piece I’d decided to create a lot of tokens (there are 50 of them), and I’m going to put them all on sale at the very low price of 2 tez. I honestly know nothing about pricing, but I’m playing around with it at the moment: some pieces I mint only a single token and set the price high, others I mint a large number of tokens and set the price low. In any case, when you’re happy press the “swap” button, confirm with your wallet, and the pieces will now be on sale!\nCreating auctions\nThe mechanism I’ve shown above is the simplest way to put art on sale: you list a price and wait for someone to purchase it. However, if you want to try more exotic options like auctions, you can check out objkt.com.\nSome art…\nHere are the Native Flora pieces I posted while writing this post. They’re all available for purchase!\n\n\n\n\n\n\n\n\nOBJKT 359814\n\n\n\n\n\n\n\n\nOBJKT 359795\n\n\n\n\n\n\n\n\nOBJKT 359761\n\n\n\n\n\n\n\n\nOBJKT 359745\n\n\n\n\n\n\n6: Share on social media\nAt some point you’ll probably want to advertise the fact that the artwork is available for purchase. You don’t have to, of course, and I’m honestly not sure how much of my online life I want to spend advertising art for sale, but it’s handy to have the option, and that probably means sharing on social media.\nMost of us in the R community who make art are primarily sharing on twitter. Yes, I have seen some people post on reddit, others on instagram, and no doubt many other places besides, but my social media world is dominated by twitter, and I’d like to be able to post to twitter. To my mild irritation, the HEN website doesn’t seem to do twitter cards properly, so if you share the link on its own, people won’t see a nice preview image.\nThere are a couple of ways to get around this. The first is to post the link on twitter and attach your art as an image: that way folks on twitter will get the link and and the image. But they won’t get an actual twitter card displaying the title of the piece.\nThe second solution is to use the hic.art website. At the moment, if you visit the website it will tell you that signups are closed, but that actually doesn’t matter. You don’t need to sign up to use the service. All you have to do is provide the OBJKT identifier. For instance, here’s one of my pieces on HEN:\nhttps://www.hicetnunc.xyz/objkt/354474\nThe identifier here is 354474. If I share the link above on twitter, it won’t display a very nice twitter preview. However, if I tweet this link\nhttps://hic.art/354474\nIt will display a very lovely looking twitter preview, and when the user clicks on the link or the preview it will automatically redirect to the official HEN page. It’s a nice service!\nHere’s an example from Antonio Sánchez Chinchón:\n\n\nMondrianomie 28Basic cellular multiorganism grown according to neoplasticism assumptions (2033 x 2400 PNG)3 ed - 28 tez at @hicetnunc2000https://t.co/TyNvt1zMBu#HEN #hicetnunc #hicetnunc2000 #nft #NFTs #nftcommunity #nftcollectors #cleannft #nftart #tezos #tezosart\n\n— Antonio Sánchez Chinchón (@aschinchon) September 25, 2021\n\n7: Manage your identity\nThere are at least three additional tools that may be useful to you in managing your identity in the peculiar world of cryptoart on the Tezos blockchain: (1) you can set up a Tezos Profile, (2) you can establish an alias on the Tezos Blockchain Explorer, and/or (3) you can purchase a Tezos Domain. None of these are strictly necessary, but all of them offer some value to you as an artist on HEN so I’ll discuss each one.\nEstablishing a Tezos Profile\nEarlier in this post I mentioned that it’s possible to connect your twitter profile, github account, website, etc with your HEN profile? You can do this with the assistance of Tezos Profiles. So lets go back HEN, open the menu, click on the option that says “edit profile” and then take a closer look at the window that pops up. It’s almost impossible to notice, but the text that reads “Tezos Profiles” is in fact a link:\n\n\n\nClicking on that link will take you to https://tzprofiles.com/, where you will see a very prominent “connect wallet” button. Click on that button, confirm with your wallet that you want to allow tzprofiles to connect (the little popup window will appear, like it always does), and then you’ll see a screen that looks like this:\n\n\n\nThere are several different things you can do here, and any of them that you verify on tzprofiles will eventually end up on HEN. For example, if you want to verify your twitter account, you’ll go through a series of elaborate steps (which, yes, will have to be confirmed with your wallet) and in the end you’ll be forced to send a tweet like this one:\n\n\nI am attesting that this twitter handle @djnavarro is linked to the Tezos account tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7 for @tzprofilessig:edsigtaH3nvbQjpiAfMCnT4zcQESZefXoVLPf2NEYaZeUfhwHjzRYp4oeBiiyDFLdrUAUvjBhvepyDFoxuyE2ynVYxd7TvV9fj6\n\n— Danielle Navarro (@djnavarro) September 21, 2021\n\nTo verify your GitHub account it’s pretty similar, except that it forces you to create a gist, using your GitHub account, that includes a signature block similar to the one in the tweet. For a website, it’s the same idea except you have to insert it as a DNS record (which I found extremely irritating to do). You can verify as many or as few of these as you like, but there is some value to doing them. Because Tezos Profiles forces you to go through the clunky verification process, other people can check your HEN profile and verify for themselves that it really is you posting your artwork onto the site, and not someone else who has stolen your piece (apparently, that happens way too often)\nOnce you’re done verifying your accounts, you may need to use your wallet to confirm again so that the updated Tezos Profile information can be accessed by the HEN website. After that’s been done, you’ll see icons appear on your HEN page, linking to your twitter account, github account, etc:\n\n\n\nAt this point your HEN profile is meaningfully linked to your other public identities, and any artwork you mint on HEN can be traced back to you, the original artist.\nCreating an alias on Tezos Blockchain Explorer\nAll right. If you’re like me you’ve probably been exploring as you go and you’ve been encountering other sites that seem connected to this ecosystem. In particular, you may have clicked on links associated with transactions and it has taken you to the Tezos Blockchain Explorer website. As the name suggests, the role of this website is to publicly display transactions that take place on the Tezos blockchain. For example, here’s the page showing all the transactions that have involved me in some fashion:\nhttps://tzkt.io/tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7/operations/\nWhen I first started (oh so many days ago…) it looked something like this:\n\n\n\nA lot of it is gibberish, but you can kind of see what’s going on here. Yet again you can see my Smurf, there’s a bunch of transactions that show me minting NFTs, etc. It makes a kind of sense.\nWhat might be surprising, particularly if you’ve just gone to the effort of setting up a Tezos Profile, is that the account information doesn’t show my avatar. It doesn’t include my name, or a bio, and it doesn’t include my social media links. Instead, all I have is a cartoon image of a very suspicious looking cartoon cat. Unlike HEN, the tzkt.io site doesn’t pull information from your Tezos Profile.\nThe mystery deepens a little when you start noticing that the exact same cartoon cat appears on various other sites. For example, this was how my profile looked on objkt.com at the time:\n\n\n\nThe weird cryptocat was following me around across all these websites. Hm. The suspicious kitty is cute and everything, but honestly I’d prefer my usual name and profile image to follow me around instead.\nAs it turns out, the source for all these skeptical cats is the blockchain explorer site, tzkt.io, and you can submit an application to the people who run that site to create an alias for you. The process is described in this post on the “Baking Bad” blog (don’t let the name and silly images fool you, the blog is associated with the people who run the site). The post will take you to a Google Form that you can fill out, in order to have your alias created. When you do this, it won’t update immediately: there is a manual verification process that takes about three days, so you’ll need to be patient.\nOnce that happens you’ll discover that your links have appeared on your tzkt.io page, and more importantly perhaps, you have an avatar and description on other sites that make use of this alias. This is what my profile page on objkt.com looks like now:\n\n\n\nMine is a deliberately vague because I’m a peculiar person, but you can see a slightly more informative version if you look at Thomas Lin Pedersen’s profile:\n\n\n\nPurchasing a Tezos Domain\nWhen you look at the two profiles above, there’s something slightly peculiar. Notice how Thomas’ profile now links to thomasp85.tez and mine links to djnavarro.tez? That’s something slightly different again. Those addresses aren’t created by the Tezos Profile, nor are they created when you set your alias on the Tezos Blockchain Explorer. Those are Tezos Domains. The idea is very sensible: human beings don’t really enjoy memorising long strings of random digits. It would be much more convenient if I could message someone and say “hey send tez to me at djnavarro.tez, because that’s me!”. It’s certainly nicer than trying to say “send tez to me at tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7, because that’s me!”\nIf you’d like to do this, visit tezos.domains and follow the instructions there: it costs 1 tez per year to set one up.\n8: Convert tez to dollars\nAt some point, hopefully very soon, you’ll sell some artwork and you’ll want to get paid. To do that, you’ll probably need to sign up with one of the currency exchanges. Although you likely have no desire to be a currency trader, it’s a necessity if you want to get paid in real money. Yes, cryptocurrencies sound cool, but coolness does not pay the rent. My landlord expects to be paid in Australian dollars, and – by extension – so do I. That means exchanging your tez for regular money. The HEN wiki lists a couple of options along with the standard warning that you should definitely do your own research, because this is a thing that will depend a bit on where you live. I looked into one of their suggested options (Kraken) and it seemed fairly standard, but in the end used an Australian provider, CoinSpot. The sign up process was fairly standard, requiring identification documents for verification. Once that was completed, I was able to send money to my bank account. It ended up being a three-step process:\nSend tezos from the Temple wallet associated with my public identity (i.e., the one I’ve been using on HEN etc), to a tezos wallet that is provided for me through my CoinSpot account\nOn CoinSpot, sell the tezos in exchange for Australian dollars\nWithdraw money from my CoinSpot account and deposit it in my Australian bank account\nOnce I figured it all out it was surprisingly smooth. I imagine the process varies a lot from country to country and from exchange to exchange, but hopefully the description of my process is at least somewhat helpful.\nEpilogue: Is all it worth it?\nI haven’t been doing this for very long, but I’m a little surprised to find that I’m enjoying the process of minting art on HEN. I’ve sold three pieces to people who know me, and it is a nice feeling. I’m not making mountains of money, and I don’t expect that I will any time soon, but it is still quite satisfying. The fact that I’m doing it on HEN makes a big difference to how I feel about it too: the environmental costs worry me a lot and don’t think I could make myself use a site that relied on Ethereum. And to be honest, it really is nice to get paid for my art. Praise is nice, sure, but you can’t live off that.\nI suppose the other thing I’m noticing already is that I feel a little less constrained on HEN. When I post art to twitter or instagram, it’s always with the knowledge that the big social media websites are also places where my professional networks exist, and I’m obliged to behave, to be nice, to be the “good girl”. I might swear and be grumpy on twitter sometimes, but for the most part I try not to let other parts of my personality and my life show on those sites. That’s okay, and it’s probably how it should be. Twitter is a place where it’s okay to mix some parts of your personal life with some parts of your work life, but there’s a tacit understanding that you probably ought to keep some things carefully sequestered from the bird site. There are a lot of things about a person’s life that their employer and professional colleagues may not want to know.\nWhere that runs into some difficulty, for me at least, is that a lot of my generative art is deeply entwined with my personal life, with my moods, and my experiences. When done well, art is always intimate, and the intimacy of creating and sharing the art often entails personal disclosures that might not be welcome on twitter. Consider these pieces, for example:\n\n\n\n\n\n\n\n\nOBJKT 341833\n\n\n\n\n\n\n\n\nOBJKT 341852\n\n\n\n\n\n\n\n\nOBJKT 341868\n\n\n\n\n\n\n\n\nOBJKT 341880\n\n\n\n\n\n\nI am very fond of these pieces, but they aren’t the easiest ones to share on twitter. The title of the series is Bruises are how sadists kiss, and the pieces are tagged with “sadomasochism” on my HEN profile. The title isn’t deliberately intended to be provocative or anything of the sort. That’s not really my preferred style. It’s much more prosaic: those things are part of my world and part of my life, and sometimes they show up in my art. The emotional experience expressed through the art (via the code) was one in which a very polite sadist had turned up in my life after a long absence. I was reminiscing, trying to work out what he meant to me, and I wrote the code while I was thinking about it. This was the system that emerged.\nOn twitter I would not dream of referring to those parts of my world so overtly (nor would I typically do so on this blog, focused as it is on technical topics). On HEN though, it feels a little more natural: art is often raw, it is often personal, and those subjects do come up if you spend a little time exploring the cryptoart space. It feels like a place where that version of me is permitted to have an online existence. As it turns out, that’s a thing that has some value to me.\n\n\nLast updated\n2021-10-17 13:58:48 AEDT\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-09-26_setting-up-on-hic-et-nunc/preview-image.jpg",
    "last_modified": "2021-10-17T13:58:49+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-09-14_tidy-tuesday-billboard/",
    "title": "Visualising the hits of Queen Britney",
    "description": "A gentle walkthrough of a few data wrangling and visualisation tools using the Billboard 100 data for this weeks Tidy Tuesday. Pitched at beginners looking to refresh their knowledge and maybe get some pointers at intermediate level tools",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-09-14",
    "categories": [],
    "contents": "\n\nContents\nFinding the data on GitHub\nGitHub repositories\nRepositories have branches\nRepositories are usually organised\nThe anatomy of the data link\n\nAttaching packages\nImporting the data\nFinding Britney\nPattern matching for text data\nCreating the Britney data\nFixing the dates\n\nVisualising a queen\n\n\n\n\nI’ve never participated in Tidy Tuesday before, but because I’ve now joined a slack that does, it is high time I did something about that poor track record. I wasn’t sure what I wanted to do with this week’s “Billboard” data, other than I wanted it to have something to do with Britney Spears (because she’s awesome). After going back and forward for a while, I decided what I’d do is put together a couple of plots showing the chart performance of all her songs and – more importantly – write it up as a blog post in which I try to “over-explain” all my choices. There are a lot of people in our slack who haven’t used R very much, and I want to “unpack” some of the bits and pieces that are involved. This post is pitched at beginners who are hoping for a little bit of extra scaffolding to explain some of the processes…\n\nThere’s an R script containing the source code for this analysis here, and an R markdown version that mirrors this post almost exactly here\nFinding the data on GitHub\nEvery week the Tidy Tuesday data are posted online, and the first step in participating is generally to import the data. After a little bit of hunting online, you might discover that the link to the billboard data looks like this:\nhttps://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/billboard.csv\nLet’s start by unpacking this link. There is a lot of assumed knowledge buried here, and while it is entirely possible for you to get started without understanding it all, for most of us in the slack group the goal is to learn new data science skills. At some point you are probably going to want to learn the “version control” magic. This post is not the place to learn this sorcery, but I am going to start foreshadowing some important concepts because they will be useful later.\nGitHub repositories\nThe place to start in understanding this link is the peculiar bit at the beginning: what is this “github” nonsense? The long answer is very long, but the short answer is that https://github.com is a website that programmers use to store their code. GitHub is one of several sites (e.g., https://gitlab.org, https://bitbucket.com) that are all built on top of a version control system called “git”. Git is a powerful tool that lets you collaborate with other people when writing code, allows you to keep track of the history of your code, and to backup your code online in case your laptop mysteriously catches on fire.\n\nIn the R community, “laptop fires” are universally understood to be a reference to what happens to you when you foolishly ignore the wise advice of Jenny Bryan\nGit is a complicated tool and it takes quite some time to get the hang of (I’m still learning, quite frankly), but it is worth your effort. When you have time, I recommend starting a free GitHub account. You can sign up using an email address, and if you have a university email address you get the educational discount (basically you get the “pro” version for free). My username on GitHub is djnavarro, and you can find my profile page here:\nhttps://github.com/djnavarro\nThe Tidy Tuesday project originated in the “R for data science” learning community, and there is a profile page for that community too:\nhttps://github.com/rfordatascience\nR for data science is a wonderful book by Hadley Wickham and Garrett Grolemund\nOkay, so that’s part of the link explained. The next thing to understand is that when you create projects using git and post them to GitHub, they are organised in a “repository” (“repo” for short). Each repo has its own page. The Tidy Tuesday repo is here:\nhttps://github.com/rfordatascience/tidytuesday\nIf you click on this link, you’ll find that there’s a nice description of the whole project, links to data sets, and a whole lot of other things besides.\nMost of the work organising this is done by Thomas Mock, and it’s very very cool.\nRepositories have branches\nWhenever someone creates a git repository, it will automatically have at least one “branch” (usually called “master” or “main”). The idea behind it is really sensible: suppose you’re working on a project and you think “ooooh, I have a cool idea I want to try but maybe it won’t work”. What you can do is create a new “branch” and try out all your new ideas in the new branch all without ever affecting the master branch. It’s a safe way to explore: if your new idea works you can “merge” the changes into the master branch, but if it fails you can switch back to the master branch and pick up where you left off. No harm done. If you have lots of branches, you effectively have a “tree”, and it’s a suuuuuuper handy feature. Later on as you develop your data science skills you’ll learn how to do this yourself, but for now this is enough information. The key thing is that what you’re looking at when you visit the Tidy Tuesday page on GitHub is actually the master branch on the tree:\nhttps://github.com/rfordatascience/tidytuesday/tree/master\nRepositories are usually organised\nThe Tidy Tuesday repository has a lot of different content, and it’s all nicely organised into folders (no different to the folders you’d have on your own computer). One of the folders is called “data”, and inside the “data” folder there is a “2021” folder:\nhttps://github.com/rfordatascience/tidytuesday/tree/master/data/2021\nInside that folder you find lots more folders, one for every week this year. If you scroll down to the current week and click on the link, it will take you here:\nhttps://github.com/rfordatascience/tidytuesday/tree/master/data/2021/2021-09-14\nBeing the kind soul that he is, Thomas has included a “readme” file in this folder: it’s a plain markdown file that gets displayed in a nice human readable format on the github page. Whenever you’re doing a Tidy Tuesday analysis, it’s super helpful to look at the readme file, because it will provide you a lot of the context you need to understand the data. Whenever doing your own projects, I’d strongly recommend creating readme files yourself: they’re reeeeaaaaaally helpful to anyone using your work, even if that’s just you several months later after you’ve forgotten what you were doing. Over and over again when I pick up an old project I curse the me-from-six-months ago when she was lazy and didn’t write one, or feel deeply grateful to her for taking the time to write one.\n\nReadme files are your best friend. Seriously\nIn any case, one of the things you’ll see on that page is a link to the “billboard.csv” data. If you click on that link it will take you here:\nhttps://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-09-14/billboard.csv\nNotice that this doesn’t take you to the data file itself: it goes to a webpage! Specifically, it takes you to the “blob” link that displays some information about the file (notice the “blob” that has sneakily inserted itself into the link above?). In this case, the page won’t show you very much information at all because the csv file is 43.7MB in size and GitHub doesn’t try to display files that big! However, what it does give you is a link that tells you where they’ve hidden the raw file! If you click on it (which I don’t recommend), it will take you to the “raw” file located at…\nhttps://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/billboard.csv\nThis is the link that you might have discovered if you’d been googling to find the Billboard data. It’s a GitHub link, but GitHub uses the “raw.githubusercontent.com” site as the mechanism for making raw files accessible, which is why that part of the link has changed.\n\nI didn’t intend for this section to be this long, honest\nThe anatomy of the data link\nAll of this tedious exposition should (I hope) help you make sense of what you’re actually looking at when you see this link. In real life I would never bother to do this, but if you wanted to you could decompose the link into its parts. In the snippet below I’ll create separate variables in R, one for each component of the link:\n\n\nsite <- \"https://raw.githubusercontent.com\"\nuser <- \"rfordatascience\"\nrepo <- \"tidytuesday\"\nbranch <- \"master\"\nfolder1 <- \"data\"\nfolder2 <- \"2021\" \nfolder3 <- \"2021-09-14\"\nfile <- \"billboard.csv\"\n\n\n\nArgh. Wait. There’s something slightly off-topic that I should point out… one thing you might be wondering when you look at this snippet, is where that pretty “arrow” character comes from. Don’t be fooled. It’s not a special arrow character, it’s two ordinary characters. What I’ve actually typed is <-, but this blog uses a fancypants font that contains a special ligature that makes <- appear to be a single smooth arrow. The font is called “Fira Code”, and a lot of programmers use it on their blogs. Once you know the trick, it’s really nice because it does make the code a little easier to read, but it can be confusing if you’re completely new to programming! It’s one of those little things that people forget to tell you about :-)\nAnyway, getting back on topic. The URL (a.k.a. “link”) for the Billboard data is what you get when you paste() all these components together, separated by the “/” character:\n\n\ndata_url <- paste(\n  site, \n  user, \n  repo, \n  branch,\n  folder1, \n  folder2, \n  folder3, \n  file, \n  sep = \"/\"\n)\n\ndata_url\n\n\n[1] \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/billboard.csv\"\n\nExciting stuff.\nAttaching packages\nI’m relatively certain that everyone in the slack has been exposed to the idea of an “R package”. A package is a collection of R functions and data sets that don’t automatically come bundled with R, but are freely available online. The tidyverse, for example, is a collection of R packages that a lot people find helpful for data analysis, and you can install all of them onto your machine (or your RStudio Cloud project) by using this command:\n\n\ninstall.packages(\"tidyverse\")\n\n\n\nThis can take quite a while to complete because there are a lot of packages that make up the tidyverse! Once the process is completed, you will now be able to use the tidyverse tools. However, it’s important to recognise that just because you’ve “installed” the packages, it doesn’t mean R will automatically use them. You have to be explicit. There are three tidyverse packages that I’m going to use a lot in this post (dplyr, stringr, and ggplot2), so I’ll use the library() function to “attach” the packages (i.e. tell R to make them available):\n\n\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(ggplot2)\n\n\n\nImporting the data\nAt this point we know where the data set is located, and we have some R tools that we can use to play around with it. The next step is reading the data into R. The readr package is part of the tidyverse, and it contains a useful function called read_csv() that can go online for you, retrive the billboard data, and load it into R. That’s cool and all but if you look at the library() commands above, I didn’t actually attach them. I didn’t want to do this because honestly I’m only going to use the readr package once, and it feels a bit silly to attach the whole package. Instead, what I’ll do is use the “double colon” notation :: to refer to the function more directly. When I write readr::read_csv() in R, what I’m doing is telling R to use the read_csv() function inside the readr package. As long as I have readr on my computer, this will work even if I haven’t attached it using library(). The technical name for this is “namespacing”, and if you hang around enough R programmers long enough that’s a word that will pop up from time to time. The way to think about it is that every package (e.g., readr) contains a collection of things, each of which has a name (e.g., “read_csv” is the name of the read_csv() function). So you can think of a “space” of these names… and hence the boring term “namespace”.\nOkay, let’s use a “namespaced” command to import the data, and assign it to a variable (i.e., give the data a name). I’ll call the data billboard:\n\n\nbillboard <- readr::read_csv(data_url)\n\n\n\nThe billboard data is a nice, rectangular data set. Every row refers to a specific song on a specific date, and tells you its position in the charts on that date. We can type print(billboard) to take a look at the first few rows and columns. In most situations (not all), you can print something out just by typing its name:\n\n\nbillboard\n\n\n# A tibble: 327,895 × 10\n   url      week_id  week_position song   performer song_id   instance\n   <chr>    <chr>            <dbl> <chr>  <chr>     <chr>        <dbl>\n 1 http://… 7/17/19…            34 Don't… Patty Du… Don't Ju…        1\n 2 http://… 7/24/19…            22 Don't… Patty Du… Don't Ju…        1\n 3 http://… 7/31/19…            14 Don't… Patty Du… Don't Ju…        1\n 4 http://… 8/7/1965            10 Don't… Patty Du… Don't Ju…        1\n 5 http://… 8/14/19…             8 Don't… Patty Du… Don't Ju…        1\n 6 http://… 8/21/19…             8 Don't… Patty Du… Don't Ju…        1\n 7 http://… 8/28/19…            14 Don't… Patty Du… Don't Ju…        1\n 8 http://… 9/4/1965            36 Don't… Patty Du… Don't Ju…        1\n 9 http://… 4/19/19…            97 Don't… Teddy Pe… Don't Ke…        1\n10 http://… 4/26/19…            90 Don't… Teddy Pe… Don't Ke…        1\n# … with 327,885 more rows, and 3 more variables:\n#   previous_week_position <dbl>, peak_position <dbl>,\n#   weeks_on_chart <dbl>\n\n\nFinally, some data!\nThis view helps you see the data in its “native” orientation: each column is a variable, each row is an observation. It’s a bit frustrating though because a lot of the columns get chopped off in the printout. It’s often more useful to use dplyr::glimpse() to take a peek. When “glimpsing” the data, R rotates the data on its side and shows you a list of all the variables, along with the first few entries for that variable:\n\n\nglimpse(billboard)\n\n\nRows: 327,895\nColumns: 10\n$ url                    <chr> \"http://www.billboard.com/charts/hot-…\n$ week_id                <chr> \"7/17/1965\", \"7/24/1965\", \"7/31/1965\"…\n$ week_position          <dbl> 34, 22, 14, 10, 8, 8, 14, 36, 97, 90,…\n$ song                   <chr> \"Don't Just Stand There\", \"Don't Just…\n$ performer              <chr> \"Patty Duke\", \"Patty Duke\", \"Patty Du…\n$ song_id                <chr> \"Don't Just Stand TherePatty Duke\", \"…\n$ instance               <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ previous_week_position <dbl> 45, 34, 22, 14, 10, 8, 8, 14, NA, 97,…\n$ peak_position          <dbl> 34, 22, 14, 10, 8, 8, 8, 8, 97, 90, 9…\n$ weeks_on_chart         <dbl> 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4,…\n\nNotice that this time I just typed glimpse rather than dplyr::glimpse. I didn’t need to tell R to look in the dplyr namespace because I’d already attached it when I typed library(dplyr) earlier.\nFinding Britney\nTime to start analysing the data. I have made a decision that today I have love in my heart only for Britney. So what I want to do is find the rows in billboard that correspond to Britney Spears songs. The natural way to do this would be to pull out the “performer” column and then try to find entries that refer to Britney. The slightly tricky aspect to this is that Britney doesn’t appear solely as “Britney Spears”. For example, “Me Against The Music” features Madonna, and the entry in the performer column is “Britney Spears Featuring Madonna”. So we’re going to have to search in a slightly smarter way. Before turning this into R code, I can sketch out my plan like this:\nget the billboard data, THEN\n  pull out the performer column, THEN\n  search for britney, THEN\n  tidy up a bit\nThis kind of workflow is naturally suited to the “pipe”, which is written %>%. You’ll see referred to either as the “magrittr pipe” (referring to the magrittr package where it originally came from) or the “dplyr pipe” (because dplyr made it famous!). I’m sure you’ve seen it before, but since one goal of this post is to be a refresher, I’ll explain it again. The pipe does the same job as the word “THEN” in the pseudo-code I wrote above. Its job is to take the output of one function (whatever is on the left) and then pass it on as the input to the next one (on the right). So here’s that plan re-written in an “R-like” format:\nthe_billboard_data %>% \n  pull_out_the_performer_column() %>% \n  search_for_britney() %>% \n  tidy_it_up()\nIn fact that’s pretty close to what the actual R code is going to look like! The dplyr package has a function dplyr::pull() that will extract a column from the data set (e.g., all 327,895 listings in the performer column), and base R has a function called unique() that will ignore repeat entries, showing you only the unique elements of a column. So our code is going to look almost exactly like this\nbillboard %>% \n  pull(performer) %>% \n  search_for_britney() %>% \n  unique()\nPattern matching for text data\nInexcusably, however, R does not come with a search_for_britney() function, so we’re going to have to do it manually. This is where the stringr package is very helpful. It contains a lot of functions that are very helpful in searching for text and manipulating text. The actual function I’m going to use here is stringr::str_subset() which will return the subset of values that “match” a particular pattern. Here’s a very simple example, where the “pattern” is just the letter “a”. I’ll quickly define a variable animals containing the names of a few different animals:\n\n\nanimals <- c(\"cat\", \"dog\", \"rat\", \"ant\", \"bug\")\n\n\n\nTo retain only those strings that contain the letter \"a\" we do this:\n\n\nstr_subset(string = animals, pattern = \"a\")\n\n\n[1] \"cat\" \"rat\" \"ant\"\n\nAlternatively we could write this using the pipe:\n\n\nanimals %>% \n  str_subset(pattern = \"a\")\n\n\n[1] \"cat\" \"rat\" \"ant\"\n\nI’m not sure this second version is any nicer than the first version, but it can be helpful to see the two versions side by side in order to remind yourself of what the pipe actually does!\nWe can use the same tool to find all the Britney songs. In real life, whenever you’re working with text data you need to be wary of the possibility of mispellings and other errors in the raw data. Wild caught data are often very messy, but thankfully for us the Tidy Tuesday data sets tend to be a little kinder. With that in mind can safely assume that any song by Britney Spears will include the pattern “Britney” in it somewhere.\nSo let’s do just try this and see what we get:\n\n\nbillboard %>% \n  pull(performer) %>% \n  str_subset(\"Britney\") %>% \n  unique()\n\n\n[1] \"Britney Spears\"                              \n[2] \"Rihanna Featuring Britney Spears\"            \n[3] \"will.i.am & Britney Spears\"                  \n[4] \"Britney Spears & Iggy Azalea\"                \n[5] \"Britney Spears Featuring G-Eazy\"             \n[6] \"Britney Spears Featuring Madonna\"            \n[7] \"Britney Spears Featuring Tinashe\"            \n[8] \"Britney Spears Featuring Nicki Minaj & Ke$ha\"\n\n\nAt this point I was sorely tempted to get distracted by Ke$ha and Rihanna, but somehow managed to stay on topic. Somehow\nOkay, so it turns out that Britney is listed in eight different ways. For the sake of this post, I’m happy to include cases where another artist features on a Britney track, but I don’t want to include the two cases where Britney is the featuring artist. Looking at the output above, it seems like I can find those cases by keeping only those rows that start with the word “Britney”.\nNow our question becomes “how do we write down a pattern like that?” and the answer usually involves crying for a bit because the solution is to use a regular expression, or “regex”.\nRegular expressions are a tool used a lot in programming: they provide a compact way to represent patterns in text. They’re very flexible, but can often be quite hard to wrap your head around because there are a lot of special characters that have particular meanings. Thankfully, for our purposes today we only need to know one of them: the ^ character is used to mean “the start of the string”. So when interpreted as a regular expression, \"^Britney\" translates to “any string that begins with ‘Britney’”. Now that we have our regular expression, this works nicely:\n\n\nbillboard %>% \n  pull(performer) %>% \n  str_subset(\"^Britney\") %>% \n  unique()\n\n\n[1] \"Britney Spears\"                              \n[2] \"Britney Spears & Iggy Azalea\"                \n[3] \"Britney Spears Featuring G-Eazy\"             \n[4] \"Britney Spears Featuring Madonna\"            \n[5] \"Britney Spears Featuring Tinashe\"            \n[6] \"Britney Spears Featuring Nicki Minaj & Ke$ha\"\n\nRegular expressions are one of those things you’ll slowly pick up as you go along, and although they can be a huuuuuuge headache to learn, the reward is worth the effort.\n\nIn my mental list of “stuff I hatelove in data science”, git and regexes are tied for first place\nCreating the Britney data\nOkay so now we’re in a position to filter the billboard data, keeping only the rows that correspond to Britney songs. Most people in our slack group have taken an introductory class before, so you’ll be expecting that dplyr::filter() is the tool we need. The kind of filtering you’ve seen before looks like this:\n\n\nbritney <- billboard %>% \n  filter(performer == \"Britney Spears\")\n\n\n\nHowever, this doesn’t work the way we want. The bit of code that reads performer == \"Britney Spears\" is a logical expression (i.e., a code snippet that only returns TRUE and FALSE values) that will only detect exact matches. It’s too literal for our purposes. We can’t use the == operator to detect our regular expression either: that will only detect cases where the performer is literally listed as “^Britney”. What we actually want is something that works like the == test, but uses a regular expression to determine if it’s a match or not.\nThat’s where the str_detect() function from the stringr package is really handy. Instead of using performer == \"Britney Spears\" to detect exact matches, we’ll use str_detect(performer, \"^Britney\") to match using the regular expression:\n\n\nbritney <- billboard %>% \n  filter(str_detect(performer, \"^Britney\"))\n\n\n\n\nA confession. I didn’t technically need to use a regex here, because stringr has a handy str_starts() function. But half the point of our slack group is to accidentally-on-purpose reveal new tools and also I forgot that str_starts() exists so… regex it is\nThis version works the way we want it to, but it’s usually a good idea in practice to check that we haven’t made any mistakes. Perhaps I have forgotten what str_detect() actually does or I’ve made an error in my use of filter(), for example. So let’s take a look at the performer column in the britney data and check that it contains the same six unique strings:\n\n\nbritney %>% \n  pull(performer) %>% \n  unique()\n\n\n[1] \"Britney Spears\"                              \n[2] \"Britney Spears & Iggy Azalea\"                \n[3] \"Britney Spears Featuring G-Eazy\"             \n[4] \"Britney Spears Featuring Madonna\"            \n[5] \"Britney Spears Featuring Tinashe\"            \n[6] \"Britney Spears Featuring Nicki Minaj & Ke$ha\"\n\nThat’s reassuring. So let’s take a quick peek at the results of our data wrangling:\n\n\nglimpse(britney)\n\n\nRows: 468\nColumns: 10\n$ url                    <chr> \"http://www.billboard.com/charts/hot-…\n$ week_id                <chr> \"4/22/2000\", \"10/24/2009\", \"12/20/200…\n$ week_position          <dbl> 67, 1, 3, 70, 70, 21, 17, 29, 76, 1, …\n$ song                   <chr> \"Oops!...I Did It Again\", \"3\", \"Circu…\n$ performer              <chr> \"Britney Spears\", \"Britney Spears\", \"…\n$ song_id                <chr> \"Oops!...I Did It AgainBritney Spears…\n$ instance               <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ previous_week_position <dbl> NA, NA, NA, NA, NA, 45, NA, NA, NA, N…\n$ peak_position          <dbl> 67, 1, 3, 70, 70, 21, 17, 29, 76, 1, …\n$ weeks_on_chart         <dbl> 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1…\n\nThat looks good to me…\nFixing the dates\n…or does it? Looking at the week_id column is enough to make any data analyst sigh in mild irritation. This column encodes the date, but the first two entries are \"4/22/2000\" and \"10/24/2009\". They are encoded in a “month/day/year” format. Nobody on this planet except Americans writes dates this way. Most countries use “day/month/year” as their standard way of writing dates, and most programming style guides strongly recommend “year/month/day” (there are good reasons for this, mostly to do with sorting chronologically). Worse yet, it’s just a character string. R doesn’t know that this column corresponds to a date, and unlike Excel it is smart enough not to try. Trying to guess what is and is not a date is notoriously difficult, so R makes that your job as the data analyst. Thankfully, the lubridate package exists to make it a little bit easier. In this case, where we have data in month/day/year format, the lubridate::mdy() function will do the conversion for us. You’ll be completely unsurprised to learn that there are lubridate::dmy() and lubridate::ymd() functions that handle other kinds of date formats.\nSo let’s do this. I’ll use the dplyr::mutate() function to modify the britney data, like so:\n\n\nbritney <- britney %>% \n  mutate(week_id = lubridate::mdy(week_id))\n\nglimpse(britney)\n\n\nRows: 468\nColumns: 10\n$ url                    <chr> \"http://www.billboard.com/charts/hot-…\n$ week_id                <date> 2000-04-22, 2009-10-24, 2008-12-20, …\n$ week_position          <dbl> 67, 1, 3, 70, 70, 21, 17, 29, 76, 1, …\n$ song                   <chr> \"Oops!...I Did It Again\", \"3\", \"Circu…\n$ performer              <chr> \"Britney Spears\", \"Britney Spears\", \"…\n$ song_id                <chr> \"Oops!...I Did It AgainBritney Spears…\n$ instance               <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ previous_week_position <dbl> NA, NA, NA, NA, NA, 45, NA, NA, NA, N…\n$ peak_position          <dbl> 67, 1, 3, 70, 70, 21, 17, 29, 76, 1, …\n$ weeks_on_chart         <dbl> 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1…\n\nMuch better!\nVisualising a queen\nI’m now at the point that I have a britney data set I can visualise. However, being the queen she is, Britney has quite a few songs that appear in the Billboard Top 100, so the first thing I’ll do is specify a few favourites that we’ll highlight in the plots:\n\n\nhighlights <- c(\"Work B**ch!\", \"...Baby One More Time\", \"Toxic\")\n\n\n\nMost people in our slack will probably have encountered the ggplot2 package before, and at least have some experience in creating data visualisations using it. So we might write some code like this, which draws a plot showing the date on the horizontal axis (the mapping x = week_id) and the position of the song on the vertical axis (represented by the mapping y = week_position). We’ll also map the colour to the song by setting colour = song. Then we’ll add some points and lines:\n\n\nggplot(\n  data = britney,\n  mapping = aes(\n    x = week_id,\n    y = week_position,\n    colour = song\n  )\n) + \n  geom_line(show.legend = FALSE) + \n  geom_point(show.legend = FALSE)\n\n\n\n\nThe reason I’ve included show.legend = FALSE here is that there are quite a few different songs in the data, and if they were all added to a legend it wouldn’t leave any room for the data!\nWe can improve on this in a couple of ways. First up, let’s use scale_y_reverse() to flip the y-axis. That way, a top ranked song appears at the top, and a 100th ranked song appears at the bottom:\n\n\nbritney %>% \n  ggplot(aes(\n    x = week_id, \n    y = week_position, \n    colour = song\n  )) + \n  geom_line(show.legend = FALSE) + \n  geom_point(show.legend = FALSE) + \n  scale_y_reverse()\n\n\n\n\nNotice that I’ve switched to using the pipe here. I take the britney data, pipe it with %>% to the ggplot() function where I set up the mapping, and then add things to the plot with +. It’s a matter of personal style though. Other people write their code differently!\nOkay, it’s time to do something about the lack of labels. My real interest here is in the three songs I listed in the highlights so I’m going to use the gghighlight package, like this:\n\n\nbritney %>% \n  ggplot(aes(\n    x = week_id, \n    y = week_position, \n    colour = song\n  )) + \n  geom_line() + \n  geom_point() + \n  scale_y_reverse() + \n  gghighlight::gghighlight(song %in% highlights)\n\n\n\n\nWhen the data are plotted like this, you get a strong sense of the chronology of Britney’s career, but the downside is that you can’t easily see how the chart performance of “…Baby One More Time” compares to the performance of “Toxic” and \"Work B**ch!\". To give a better sense of that, it’s better to plot weeks_on_chart on the horizontal axis:\n\n\nbritney %>% \n  ggplot(aes(\n    x = weeks_on_chart, \n    y = week_position, \n    group = song,\n    colour = song\n  )) + \n  geom_line() + \n  geom_point() + \n  scale_y_reverse() + \n  gghighlight::gghighlight(song %in% highlights)\n\n\n\n\nShown this way, you get a really strong sense of just how much of an impact “…Baby One More Time” had. It wasn’t just Britney’s first hit, it was also her biggest. It’s quite an outlier on the chart!\nIf we’re doing exploratory data analysis, and the only goal is to have a picture to show a colleague, that’s good enough. However, if we wanted to share it more widely, you’d probably want to spend a little more time fiddling with the details, adding text, colour and other things that actually matter a lot in real life!\n\n\nbritney %>% \n  ggplot(aes(\n    x = weeks_on_chart, \n    y = week_position, \n    group = song,\n    colour = song\n  )) + \n  geom_line(size = 1.5) + \n  scale_y_reverse() + \n  scale_color_brewer(palette = \"Dark2\") + \n  gghighlight::gghighlight(song %in% highlights, \n    unhighlighted_params = list(size = .5)) + \n  theme_minimal() +\n  labs(\n    title = \"Britney Spears' first hit was also her biggest\",\n    subtitle = \"Chart performance of Britney Spears' songs\",\n    x = \"Weeks in Billboard Top 100\",\n    y = \"Chart Position\"\n  )\n\n\n\n\nIf I were less lazy I would also make sure that the chart includes a reference to the original data source, and something that credits myself as the creator of the plot. That’s generally good etiquette if you’re planning on sharing the image on the interwebs. There’s quite a lot you could do to tinker with the plot to get it to publication quality, but this is good enough for my goals today!\n\n\n\nFigure 1: Her Royal Highness Britney Spears, performing in Las Vegas, January 2014. Figure from wikimedia commons, released under a CC-BY-2.0 licence by Rhys Adams\n\n\n\n\n\nLast updated\n2021-09-17 16:58:36 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-09-14_tidy-tuesday-billboard/britney.jpg",
    "last_modified": "2021-09-30T15:08:53+10:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-09-07_water-colours/",
    "title": "Art, jasmines, and the water colours",
    "description": "An essay and tutorial covering a few useful art techniques in R",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-09-07",
    "categories": [],
    "contents": "\n\nContents\nPrelude\nThe water colours repository\nWhy use version control here?\nThe manifest file\nPreviewing the artwork\n\nDependencies\nArt from image processing\nFinding the image file\nImporting the image\nConverting the image to data\nArt from data visualisation\nExtracting the colour channels\nArt from channel manipulation\n\nIntermission\nArt from noise generators\nMultidimensional noise generation\nArt from the noise\nAccumulating art with purrr\n\nAssembling the parts\nAdding noise to jasmines coordinates\nJoining the noise with jasmine colours\nThe last chapter\n\nEpilogue\n\n\n\nPrelude\nIn recent weeks I’ve been posting generative art from the Water Colours series on twitter. The series has been popular, prompting requests that I sell prints, mint NFTs, or write a tutorial showing how they are made. For personal reasons I didn’t want to commercialise this series. Instead, I chose to make the pieces freely available under a CC0 public domain licence and asked people to donate to a gofundme I set up for a charitable organisation I care about (the Lou’s Place women’s refuge here in Sydney). I’m not going to discuss the personal story behind this series, but it does matter. As I’ve mentioned previously, the art I make is inherently tied to moods. It is emotional in nature. In hindsight it is easy enough to describe how the system is implemented but this perspective is misleading. Although a clean and unemotional description of the code is useful for explanatory purposes, the actual process of creating the system is deeply tied to my life, my history, and my subjective experience. Those details are inextricably bound to the system. A friend described it better than I ever could:\n\nThe computer doesn’t make this art any more than a camera makes a photograph; art is always intimate (Amy Patterson)\n\nIn this post I’ll describe the mechanistic processes involved in creating these pieces, but this is woefully inadequate as a description of the artistic process as a whole. The optical mechanics of a camera do not circumscribe the work of a skilled photographer. So it goes with generative art. The code describes the mechanics; it does not describe the art. There is a deeply personal story underneath these pieces (one that I won’t tell here), and I would no more mint an NFT from that story than I would sell a piece of my soul to a collector.\nThe water colours repository\nWhy use version control here?\nWhen I started making generative art I didn’t think much about archiving my art or keeping it organised. I liked making pretty things, and that was as far as my thought process went. I didn’t place the code under version control, and I stored everything in my Dropbox folder. There’s nothing wrong with that: some things don’t belong on GitHub. During the development phase of any art project that’s still what I do, and I’m perfectly happy with it.\nThings become a little trickier when you want to share the art. My art website is hosted on GitHub pages, and so my initial approach was to keep the art in the website repository. Huuuuge mistake. Sometimes the image files can be quite large and sometimes a series contains a large number of images. By the time I’d reached 40+ series, Hugo took a very long time to build the site (several minutes), and GitHub took even longer to deploy it (over half an hour).\nEventually I decided it made more sense to have one repository per series. Each one uses the “series-” prefix to remind me it’s an art repo. I don’t use these repositories during development: they exist solely to snapshot the release. For example, the series-water-colours repository isn’t going to be updated regularly, it’s really just an archive combined with a “docs” folder that is used to host a minimal GitHub Pages site that makes the images public. It’s convenient for my purposes because my art website doesn’t have to host any of the images: all it does is hotlink to the images that are exposed via the series repo.\nIt may seem surprising that I’ve used GitHub for this. Image files aren’t exactly well suited to version control, but it’s not like they’re going to be updated. Plus, there are a lot of advantages. I can explicitly include licencing information in the repository, I can release source code (when I want to), and I can include a readme file for anyone who wants to use it.\nThe manifest file\nOne nice feature of doing things this way is that it has encouraged me to include a manifest file. Because the image files belong to a completely different repository to the website, I need a way to automatically inspect the image repository and construct the links I need (because I’m waaaaaay too lazy to add the links by hand). That’s the primary function of the manifest. The manifest.csv file is a plain csv file with one row per image, and one column for each piece of metadata I want to retain about the images. It might seem like organisational overkill to be this precise about the art, but I’m starting to realise that if I don’t have a proper system in place I’ll forget minor details like “what the piece is called” or “when I made it”. That seems bad :-)\n\n\n\nI can use readr::read_csv() to download the manifest and do a little data wrangling to organise it into a format that is handy to me right now:\n\nThe data wrangling code is here\n\n\nmanifest\n\n\n# A tibble: 20 × 9\n   series      sys_id img_id short_name  format long_name   date      \n   <chr>       <chr>  <chr>  <chr>       <chr>  <chr>       <date>    \n 1 watercolour sys02  img34  teacup-oce… jpg    Ocean in a… 2021-07-31\n 2 watercolour sys02  img31  incursions  jpg    Incursions  2021-08-14\n 3 watercolour sys02  img32  percolate   jpg    Percolate   2021-08-21\n 4 watercolour sys02  img37  gentle-des… jpg    Gentle Des… 2021-08-21\n 5 watercolour sys02  img41  stormy-seas jpg    Stormy Seas 2021-08-22\n 6 watercolour sys02  img42  turmeric    jpg    Turmeric A… 2021-08-24\n 7 watercolour sys02  img43  torn-and-f… jpg    Torn and F… 2021-08-24\n 8 watercolour sys02  img47  inferno     jpg    Seventh Ci… 2021-08-27\n 9 watercolour sys02  img48  storm-cell  jpg    Storm Cell… 2021-08-27\n10 watercolour sys02  img49  tonal-earth jpg    Tonal Earth 2021-08-29\n11 watercolour sys02  img50  cold-front  jpg    Cold Front  2021-08-29\n12 watercolour sys02  img51  kintsugi-d… jpg    Kintsugi D… 2021-08-29\n13 watercolour sys02  img53  departure   jpg    Departure   2021-08-29\n14 watercolour sys02  img54  echo        jpg    Echo        2021-08-30\n15 watercolour sys02  img57  portal      jpg    Portal      2021-08-31\n16 watercolour sys02  img60  salt-stone… jpg    Gods of Sa… 2021-08-31\n17 watercolour sys02  img61  amanecer-d… jpg    El Último … 2021-09-01\n18 watercolour sys02  img65  plume       jpg    Plume       2021-09-02\n19 watercolour sys02  img67  woodland-s… jpg    Woodland S… 2021-09-02\n20 watercolour sys02  img68  below-the-… jpg    Below the … 2021-09-03\n# … with 2 more variables: path_2000 <chr>, path_500 <chr>\n\nPreviewing the artwork\nMore to the point, the manifest data frame is nicely suited for use with the bs4cards package, so I can display some of the pieces in a neat and tidy thumbnail grid. Here are the first eight pieces from the series, arranged by date of creation:\n\n\nmanifest[1:8, ] %>% \n  bs4cards::cards(\n    image = path_500,\n    link = path_2000,\n    title = long_name,\n    spacing = 3,\n    width = 2\n  )  \n\n\n\n\n\n\n\n\n\nOcean in a Teacup\n\n\n\n\n\n\n\n\nIncursions\n\n\n\n\n\n\n\n\nPercolate\n\n\n\n\n\n\n\n\nGentle Descent\n\n\n\n\n\n\n\n\nStormy Seas\n\n\n\n\n\n\n\n\nTurmeric Against Grey Tuesday\n\n\n\n\n\n\n\n\nTorn and Frayed\n\n\n\n\n\n\n\n\nSeventh Circle\n\n\n\n\n\n\nEach thumbnail image links to a medium resolution (2000 x 2000 pixels) jpg version of the corresponding piece, if you’d like to see the images in a little more detail.\nDependencies\nIn the remainder of this post I’ll walk you through the process of creating pieces “in the style of” the water colours series. If you really want to, you can take a look at the actual source, but it may not be very helpful: the code is little opaque, poorly structured, and delegates a lot of the work to the halftoner and jasmines packages, neither of which is on CRAN. To make it a little easier on you, I’ll build a new system in this post that adopts the same core ideas.\nIn this post I’ll assume you’re already familiar with data wrangling and visualisation with tidyverse tools. This is the subset of tidyverse packages that I have attached, and the code that follows relies on all these in some fashion:\n\n\nlibrary(magrittr)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(tibble)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(dplyr)\n\n\n\n\nThe R environment is specified formally in the lockfile. It’s a story for another day, but for reproducibility purposes I have a separate renv configuration for every post\nIn addition to tidyverse and base R functions, I’ll use a few other packages as well. The magick, raster, rprojroot, fs, and ambient packages are all used in making the art. Because functions from those packages may not be as familiar to everyone, I’ll namespace the calls to them in the same way I did with bs4cards::cards() previously. Hopefully that will make it easier to see which functions belong to one of those packages.\nArt from image processing\nFinding the image file\nAs in life, the place to start is knowing where you are.\nThis post is part of my blog, and I’ll need to make use of an image file called \"jasmine.jpg\" stored alongside my R markdown. First, I can use rprojroot to find out where my blog is stored. I’ll do that by searching for a \"_site.yml\" file:\n\n\nblog <- rprojroot::find_root(\"_site.yml\")\nblog\n\n\n[1] \"/home/danielle/GitHub/sites/distill-blog\"\n\nI suspect that most people reading this would be more familiar with the here package that provides a simplified interface to rprojroot and will automatically detect the .Rproj or .here file associated with your project. In fact, because the here::here() function is so convenient, it’s usually my preferred method for solving this problem. Sometimes, however, the additional flexibility provided by rprojroot is very useful. Some of my projects are comprised of partially independent sub-projects, each with a distinct root directory. That happens sometimes when blogging: there are contexts in which you might want to consider “the blog” to be the project, but other contexts in which “the post” might be the project. If you’re not careful this can lead to chaos (e.g., RStudio projects nested inside other RStudio projects), and I’ve found rprojroot very helpful in avoiding ambiguity in these situations.\nHaving chosen “the blog” as the root folder, the next step in orientation is to find the post folder. Because this is a distill blog, all my posts are stored in the _posts folder, and I’ve adopted a consistent naming convention for organising the post folders. Every name begins with the post date in year-month-day format, followed by a human-readable “slug”:\n\n\npost <- paste(params$date, params$slug, sep = \"_\")\npost\n\n\n[1] \"2021-09-07_water-colours\"\n\nThis allows me to construct the path to the image file and display it here:\n\n\nfile <- fs::path(blog, \"_posts\", post, \"jasmine.jpg\")\nknitr::include_graphics(file)\n\n\n\n\n\nThe photo has an emotional resonance to me: it dates back to 2011 and appeared on the cover of Learning Statistics with R. Although 10 years separate the Water Colours series from the text and the photo, the two are linked by a shared connection to events from a decade ago\nImporting the image\nOur next step is to import the image into R at a suitable resolution. The original image size is 1000x600 pixels, which is a little more than we need. Here’s a simple import_image() function that does this:\n\n\nimport_image <- function(path, width, height) {\n  geometry <- paste0(width, \"x\", height) # e.g., \"100x60\"\n  path %>% \n    magick::image_read() %>% \n    magick::image_scale(geometry)\n}\n\n\n\nInternally, the work is being done by the fabulous magick package that provides bindings to the ImageMagick library. In truth, it’s the ImageMagick library that is doing most the work here. R doesn’t load the complete image, it lets ImageMagick take care of that. Generally that’s a good thing for performance reasons (you don’t want to load large images into memory if you can avoid it), but in this case we’re going to work with the raw image data inside R.\nThis brings us to the next task…\nConverting the image to data\nConverting the image into a data structure we can use is a two step process. First, we create a matrix that represents the image in a format similar to the image itself. That’s the job of the construct_matrix() function below. It takes the image as input, and first coerces it to a raster object and then to a regular matrix: in the code below, the matrix is named mat, and the pixel on the i-th row and j-th column of the image is represented by the contents of mat[i, j].\n\n\nconstruct_matrix <- function(image) {\n  \n  # read matrix\n  mat <- image %>% \n    as.raster() %>%\n    as.matrix()\n  \n  # use the row and column names to represent co-ordinates\n  rownames(mat) <- paste0(\"y\", nrow(mat):1) # <- flip y\n  colnames(mat) <- paste0(\"x\", 1:ncol(mat))\n  \n  return(mat)\n}\n\n\n\nA little care is needed when interpreting the rows of this matrix. When we think about graphs, the values on y-axis increase as we move our eyes upwards from the bottom, so our mental model has the small numbers at the bottom and the big numbers at the top. But that’s not the only mental model in play here. When we read a matrix or a table we don’t look at it, we read it - and we read from top to bottom. A numbered list, for example, has the smallest numbers at the top, and the numbers get bigger as we read down the list. Both of those mental models are sensible, but it’s hard to switch between them.\nThe tricky part here is that the raw image is encoded in “reading format”. It’s supposed to be read like a table or a list, so the indices increase as we read down the image. The image data returned by construct_matrix() is organised this format. However, when we draw pictures with ggplot2 later on, we’re going to need to switch to a “graph format” convention with the small numbers at the bottom. That’s the reason why the code above flips the order of the row names. Our next task will be to convert this (reading-formatted) matrix into a tidy tibble, and those row and column names will become become our (graph-formatted) x- and y-coordinates, so the row names need to be labelled in reverse order.\nTo transform the image matrix into a tidy tibble, I’ve written a handy construct_tibble() function:\n\n\nconstruct_tibble <- function(mat) {\n  \n  # convert to tibble\n  tbl <- mat %>%\n    as.data.frame() %>%\n    rownames_to_column(\"y\") %>%\n    as_tibble() \n  \n  # reshape\n  tbl <- tbl %>%\n    pivot_longer(\n      cols = starts_with(\"x\"),\n      names_to = \"x\",\n      values_to = \"shade\"\n    ) \n  \n  # tidy\n  tbl <- tbl %>%\n    arrange(x, y) %>% \n    mutate(\n      x = x %>% str_remove_all(\"x\") %>% as.numeric(),\n      y = y %>% str_remove_all(\"y\") %>% as.numeric(),\n      id = row_number()\n    )\n  \n  return(tbl)\n}\n\n\n\nThe code has the following strucure:\nThe first part of this code coerces the matrix to a plain data frame, then uses rownames_to_columns() to extract the row names before coercing it to a tibble. This step is necessary because tibbles don’t have row names, and we need those row names: our end goal is to have a variable y to store those co-ordinate values.\nThe second part of the code uses pivot_longer() to capture all the other variables (currently named x1, x2, etc) and pull them down into a single column that specifies the x co-ordinate. At this stage, the tbl tibble contains three variables: an x value, a y value, and a shade that contains the hex code for a colour.\nThe last step is to tidy up the values. After pivot_longer() does its job, the x variable contains strings like \"x1\", \"x2\", etc, but we’d prefer them to be actual numbers like 1, 2, etc. The same is true for the y variable. To fix this, the last part of the code does a tiny bit of string manipulation using str_remove_all() to get rid of the unwanted prefixes, and then coerces the result to a number.\n\nThe names_prefix argument to pivot_longer() can transform x without the third step, but I prefer the verbose form. I find it easier to read and it treats x and y the same\nTaken together, the import_image(), construct_matrix(), and construct_tibble() functions provide us with everything we need to pull the data from the image file and wrangle it into a format that ggplot2 is expecting:\n\n\njas <- file %>% \n  import_image(width = 100, height = 60) %>% \n  construct_matrix() %>% \n  construct_tibble()\n\njas\n\n\n# A tibble: 6,000 × 4\n       y     x shade        id\n   <dbl> <dbl> <chr>     <int>\n 1     1     1 #838c70ff     1\n 2    10     1 #3c3123ff     2\n 3    11     1 #503d3dff     3\n 4    12     1 #363126ff     4\n 5    13     1 #443a30ff     5\n 6    14     1 #8a6860ff     6\n 7    15     1 #665859ff     7\n 8    16     1 #5a5d51ff     8\n 9    17     1 #535c4cff     9\n10    18     1 #944b61ff    10\n# … with 5,990 more rows\n\nA little unusually, the hex codes here are specified in RGBA format: the first two alphanumeric characters specify the hexadecimal code for the red level, the second two represent the green level (or “channel”), the third two are the blue channel, and the last two are the opacity level (the alpha channel). I’m going to ignore the alpha channel for this exercise though.\nThere’s one last thing to point out before turning to the fun art part. Notice that jas also contains an id column (added by the third part of the construct_tibble() function). It’s generally good practice to have an id column that uniquely identifies each row, and will turn out to be useful later when we need to join this data set with other data sets that we’ll generate.\nArt from data visualisation\nLet the art begin!\nThe first step is to define a helper function ggplot_themed() that provides a template that we’ll reuse in every plot. Mostly this involves preventing ggplot2 from doing things it wants to do. When we’re doing data visualisation it’s great that ggplot2 automatically provides things like “legends”, “axes”, and “scales” to map from data to visual aesthetics, but from an artistic perspective they’re just clutter. I don’t want to manually strip that out every time I make a plot, so it makes sense to have a function that gets rid of all those things:\n\n\nggplot_themed <- function(data) {\n  data %>% \n    ggplot(aes(x, y)) +\n    coord_equal() + \n    scale_size_identity() + \n    scale_colour_identity() + \n    scale_fill_identity() + \n    theme_void() \n}\n\n\n\nThis “template function” allows us to start with a clean slate, and it makes our subsequent coding task easier. The x and y aesthetics are already specified, ggplot2 won’t try to “interpret” our colours and sizes for us, and it won’t mess with the aspect ratio. In a sense, this function turns off the autopilot: we’re flying this thing manually…\nThere are many ways to plot the jas data in ggplot2. The least imaginative possibility is geom_tile(), which produces a pixellated version of the jasmines photo:\n\n\njas %>% \n  ggplot_themed() + \n  geom_tile(aes(fill = shade)) \n\n\n\n\nOf course, if you are like me you always forget to use the fill aesthetic. The muscle memory tells me to use the colour aesthetic, so I often end up drawing something where only the borders of the tiles are coloured:\n\n\njas %>% \n  ggplot_themed() + \n  geom_tile(aes(colour = shade)) \n\n\n\n\nIt’s surprisingly pretty, and a cute demonstration of how good the visual system is at reconstructing images from low-quality input: remarkably, the jasmines are still perceptible despite the fact that most of the plot area is black. I didn’t end up pursuing this (yet!) but I think there’s a lot of artistic potential here. It might be worth playing with at a later date. In that sense generative art is a lot like any other kind of art (or, for that matter, science). It is as much about exploration and discovery as it is about technical prowess.\nThe path I did follow is based on geom_point(). Each pixel in the original image is plotted as a circular marker in the appropriate colour. Here’s the simplest version of this idea applied to the jas data:\n\n\njas %>% \n  ggplot_themed() + \n  geom_point(aes(colour = shade)) \n\n\n\n\nIt’s simple, but I like it.\nExtracting the colour channels\nUp to this point we haven’t been manipulating the colours in any of the plots: the hex code in the shade variable is left intact. There’s no inherent reason we should limit ourselves to such boring visualisations. All we need to do is extract the different “colour channels” and start playing around.\nIt’s not too difficult to do this: base R provides the col2rgb() function that separates the hex code into red, green, blue channels, and represents each channel with integers between 0 and 255. It also provides the rgb2hsv() function that converts this RGB format into hue, saturation, and value format, represented as numeric values between 0 and 1.\nThis technique is illustrated by the extract_channels() helper function shown below. It looks at the shade column in the data frame, and adds six new columns, one for each channel. I’m a sucker for variable names that are all the same length (often unwisely), and I’ve named them red, grn, blu, hue, sat, and val:\n\n\nextract_channels <- function(tbl) {\n  rgb <- with(tbl, col2rgb(shade))\n  hsv <- rgb2hsv(rgb)\n  tbl <- tbl %>% \n    mutate(\n      red = rgb[1, ],\n      grn = rgb[2, ],\n      blu = rgb[3, ],\n      hue = hsv[1, ],\n      sat = hsv[2, ],\n      val = hsv[3, ]\n    )\n  return(tbl)\n}\n\n\n\nHere’s what that looks like applied to the jas data:\n\n\njas <- extract_channels(jas)\njas\n\n\n# A tibble: 6,000 × 10\n       y     x shade        id   red   grn   blu    hue   sat   val\n   <dbl> <dbl> <chr>     <int> <int> <int> <int>  <dbl> <dbl> <dbl>\n 1     1     1 #838c70ff     1   131   140   112 0.220  0.200 0.549\n 2    10     1 #3c3123ff     2    60    49    35 0.0933 0.417 0.235\n 3    11     1 #503d3dff     3    80    61    61 0      0.237 0.314\n 4    12     1 #363126ff     4    54    49    38 0.115  0.296 0.212\n 5    13     1 #443a30ff     5    68    58    48 0.0833 0.294 0.267\n 6    14     1 #8a6860ff     6   138   104    96 0.0317 0.304 0.541\n 7    15     1 #665859ff     7   102    88    89 0.988  0.137 0.4  \n 8    16     1 #5a5d51ff     8    90    93    81 0.208  0.129 0.365\n 9    17     1 #535c4cff     9    83    92    76 0.260  0.174 0.361\n10    18     1 #944b61ff    10   148    75    97 0.950  0.493 0.580\n# … with 5,990 more rows\n\nA whole new world of artistic possibilities has just emerged!\nArt from channel manipulation\nOne way to use this representation is in halftone images. If you have a printer that contains only black ink, you can approximate shades of grey by using the size of each dot to represent how dark that pixel should be:\n\n\nmap_size <- function(x) {\n  ambient::normalise(1-x, to = c(0, 2))\n}\n\njas %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(size = map_size(val)),\n    colour = \"black\", \n    show.legend = FALSE\n  )\n\n\n\n\n\nIn this code the ambient::normalise() function is used to rescale the input to fall within a specified range. Usually ggplot2 handles this automatically, but as I mentioned, we’ve turned off the autopilot…\nFor real world printers, this approach is very convenient because it allows us to construct any shade we like using only a few different colours of ink. In the halftone world shades of grey are merely blacks of different size, pinks are merely sizes of red (sort of), and so on.\nBut we’re not using real printers, and in any case the image above is not a very good example of a halftone format: I’m crudely mapping 1-val to the size aesthetic, and that’s not actually the right way to do this (if you want to see this done properly, look at the halftoner package). The image above is “inspired by” the halftone concept, not the real thing. I’m okay with that, and abandoning the idea of fidelity opens up new possibilities. For example, there’s nothing stopping us retaining the original hue and saturation, while using dot size to represent the intensity value. That allows us to produce “halftonesque” images like this:\n\n\njas %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(\n      colour = hsv(hue, sat, .5), \n      size = map_size(val)\n    ), \n    show.legend = FALSE\n  )\n\n\n\n\nIn this code, the hsv() function takes the hue and saturation channels from the original image, but combines them with a constant intensity value: the output is a new colour specified as a hex code that ggplot2 can display in the output. Because we have stripped out the value channel, we can reuse the halftone trick. Much like a halftone image, the image above uses the size aesthetic to represent the intensity at the corresponding pixel.\nIntermission\nUp to this point I’ve talked about image manipulation, and I hope you can see the artistic potential created when we pair image processing tools like magick with data visualisation tools like ggplot2. What I haven’t talked about is how to choose (or generate!) the images to manipulate, and I haven’t talked about how we might introduce a probabilistic component to the process. I’m not going to say much about how to choose images. The possibilities are endless. For this post I’ve used a photo I took in my garden many years ago, but the pieces in Water Colours series have a different origin: I dripped some food colouring into a glass of water and took some photos of the dye diffusing. Small sections were cropped out of these photos and often preprocessed in some fashion by changing the hue, saturation etc. These manipulated photos were then passed into a noise generation process, and the output produced images like this:\n\n\n\n\n\n\n\n\nStorm Cell / Air Elemental\n\n\n\n\n\n\n\n\nTonal Earth\n\n\n\n\n\n\n\n\nCold Front\n\n\n\n\n\n\n\n\nKintsugi Dreams\n\n\n\n\n\n\nArt from noise generators\nMultidimensional noise generation\nHow can we generate interesting noise patterns in R? As usual, there are many different ways you can do this, but my favourite method is to use the ambient package that provides bindings to the FastNoise C++ library. A proper description of what you can do with ambient is beyond what I can accomplish here. There are a lot of things you can do with a tool like this, and I’ve explored only a small subset of the possibilities in my art. Rather than make a long post even longer, what I’ll do is link to a lovely essay on flow fields and encourage you to play around yourself.\nTo give you a sense of what the possibilities are, I’ve written a field() function that uses the ambient package to generate noise. At its heart is ambient::gen_simplex(), a function that generates simplex noise (examples here), a useful form of multidimensional noise that has applications in computer graphics. In the code below, the simplex noise is then modified by a billow fractal that makes it “lumpier”: that’s the job of ambient::gen_billow() and ambient::fracture(). This is then modified one last time by the ambient::curl_noise() function to avoid some undesirable properties of the flow fields created by simplex noise.\nIn any case, here is the code. You’ll probably need to read through the ambient documentation to understand all the moving parts here, but for our purposes the main things to note are the arguments. The points argument takes a data frame or tibble that contains the x and y coordinates of a set of points (e.g., something like the jas data!). The frequency argument controls the overall “scale” of the noise: does it change quickly or slowly as you move across the image? The octaves argument controls the amount of fractal-ness (hush, I know that’s not a word) in the image. How many times do you apply the underlying transformation?\n\n\nfield <- function(points, frequency = .1, octaves = 1) {\n  ambient::curl_noise(\n    generator = ambient::fracture,\n    fractal = ambient::billow,\n    noise = ambient::gen_simplex,\n    x = points$x,\n    y = points$y,\n    frequency = frequency,\n    octaves = octaves,\n    seed = 1\n  )\n}\n\n\n\nInterpreting the output of the field() function requires a little care. The result isn’t a new set of points. Rather, it is a collection of directional vectors that tell you “how fast” the x- and y-components are flowing at each of the locations specified in the points input. If we want to compute a new set of points (which is usually true), we need something like the shift() function below. It takes a set of points as input, computes the directional vectors at each of the locations, and then moves each point by a specified amount, using the flow vectors to work out how far to move and what direction to move. The result is a new data frame with the same columns and the same number of rows:\n\n\nshift <- function(points, amount, ...) {\n  vectors <- field(points, ...)\n  points <- points %>%\n    mutate(\n      x = x + vectors$x * amount,\n      y = y + vectors$y * amount,\n      time = time + 1,\n      id = id\n    )\n  return(points)\n}\n\n\n\nIt’s worth noting that the shift() function assumes that points contains an id column as well as the x and y columns. This will be crucial later when we want to merge the output with the jas data. Because the positions of each point are changing, the id column will be the method we use to join the two data sets. It’s also worth noting that shift() keeps track of time for you. It assumes that the input data contains a time column, and the output data contains the same column with every value incremented by one. In other words, it keeps the id constant so we know which point is referred to by the row, but modifies its position in time and space (x and y). Neat.\nArt from the noise\nTo illustrate how this all works, I’ll start by creating a regular 50x30 grid of points:\n\n\npoints_time0 <- expand_grid(x = 1:50, y = 1:30) %>% \n  mutate(time = 0, id = row_number())\n\nggplot_themed(points_time0) + \n  geom_point(size = .5)\n\n\n\n\nNext, I’ll apply the shift() function three times in succession, and bind the results into a single tibble that contains the the data at each point in time:\n\n\npoints_time1 <- shift(points_time0, amount = 1)\npoints_time2 <- shift(points_time1, amount = 1)\npoints_time3 <- shift(points_time2, amount = 1)\n\npts <- bind_rows(\n  points_time0, \n  points_time1, \n  points_time2,\n  points_time3\n)\n\n\n\nThen I’ll quickly write a couple of boring wrapper functions that will control how the size and transparency of the markers changes as a function of time…\n\n\nmap_size <- function(x) {\n  ambient::normalise(x, to = c(0, 2))\n}\nmap_alpha <- function(x) {\n  ambient::normalise(-x, to = c(0, .5))\n}\n\n\n\n…and now we can create some art:\n\n\npts %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(\n      size = map_size(time), \n      alpha = map_alpha(time)\n    ),\n    show.legend = FALSE\n  )\n\n\n\n\nSo pretty!\nAccumulating art with purrr\n… but also so ugly. The code I used above is awfully inelegant: I’ve “iteratively” created a sequence of data frames by writing the same line of code several times. That’s almost never the right answer, especially when the code doesn’t know in advance how many times we want to shift() the points! To fix this I could write a loop (and contrary to folklore, there’s nothing wrong with loops in R so long as you’re careful to avoid unnecessary copying). However, I’ve become addicted to functional programming tools in the purrr package, so I’m going to use those rather than write a loop.\nTo solve my problem I’m going to use the purrr::accumulate() function, which I personally feel is an underappreciated gem in the functional programming toolkit. It does precisely the thing we want to do here: it takes one object (e.g., points) as input together with a second quantity (e.g., an amount), and uses the user-supplied function (e.g., shift()) to produce a new object that can, once again, be passed to the user-supplied function (yielding new points). It continues with this process, taking the output of the last iteration of shift() and using it as input to the next iteration, until it runs out of amount values. It is very similar to the better-known purrr::reduce() function, except that it doesn’t throw away the intermediate values. The reduce() function is only interested in the destination; accumulate() is a whole journey.\nSo let’s use it. The iterate() function below gives a convenient interface:\n\n\niterate <- function(pts, time, step, ...) {\n  bind_rows(accumulate(\n    .x = rep(step, time), \n    .f = shift, \n    .init = pts,\n    ...\n  ))\n}\n\n\n\nHere’s the code to recreate the pts data from the previous section:\n\n\npts <- points_time0 %>% \n  iterate(time = 3, step = 1)\n\n\n\nIt produces the same image, but the code is nicer!\n\n\n\nAssembling the parts\nAdding noise to jasmines coordinates\nThe time has come to start assembling the pieces of the jigsaw puzzle, by applying the flow fields from the previous section to the data associated with the jasmines image. The first step in doing so is to write a small extract_points() function that will take a data frame (like jas) as input, extract the positional information (x and y) and the identifier column (id), and add a time column so that we can modify positions over time:\n\n\nextract_points <- function(data) {\n  data %>% \n    select(x, y, id) %>% \n    mutate(time = 0)\n}\n\n\n\nHere’s how we can use this. The code below extracts the positional information from jas and then use the iterate() function to iteratively shift those positions along the paths traced out by a flow field:\n\n\npts <- jas %>% \n  extract_points() %>% \n  iterate(time = 20, step = .1)\n\n\n\nThe pts tibble doesn’t contain any of the colour information from jas, but it does have the “right kind” of positional information. It’s also rather pretty in its own right:\n\n\nmap_size <- function(x) {\n  ambient::normalise(x^2, to = c(0, 3.5))\n}\n\npts %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(size = map_size(time)),\n    alpha = .01,\n    show.legend = FALSE\n  ) \n\n\n\n\nJoining the noise with jasmine colours\nWe can now take the pixels from the jasmines image and make them “flow” across the image. To do this, we’ll need to reintroduce the colour information. We can do this using full_join() from the dplyr package. I’ve written a small convenience function restore_points() that performs the join only after removing the original x and y coordinates from the jas data. The reason for this is that the pts data now contains the positional information we need, so we want the x and y values from that data set. That’s easy enough: we drop those coordinates with select() and then join the two tables using only the id column. See? I promised it would be useful!\n\n\nrestore_points <- function(jas, pts) {\n  jas %>% \n    select(-x, -y) %>% \n    full_join(pts, by = \"id\") %>% \n    arrange(time, id) \n}\n\n\n\nThe result is a tibble that looks like this:\n\n\njas <- restore_points(jas, pts)\njas\n\n\n# A tibble: 126,000 × 11\n   shade     id   red   grn   blu    hue   sat   val     x     y  time\n   <chr>  <int> <int> <int> <int>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 #838c…     1   131   140   112 0.220  0.200 0.549     1     1     0\n 2 #3c31…     2    60    49    35 0.0933 0.417 0.235     1    10     0\n 3 #503d…     3    80    61    61 0      0.237 0.314     1    11     0\n 4 #3631…     4    54    49    38 0.115  0.296 0.212     1    12     0\n 5 #443a…     5    68    58    48 0.0833 0.294 0.267     1    13     0\n 6 #8a68…     6   138   104    96 0.0317 0.304 0.541     1    14     0\n 7 #6658…     7   102    88    89 0.988  0.137 0.4       1    15     0\n 8 #5a5d…     8    90    93    81 0.208  0.129 0.365     1    16     0\n 9 #535c…     9    83    92    76 0.260  0.174 0.361     1    17     0\n10 #944b…    10   148    75    97 0.950  0.493 0.580     1    18     0\n# … with 125,990 more rows\n\nMore importantly though, it produces images like this:\n\n\nmap_size <- function(x, y) {\n  ambient::normalise((1 - x) * y^2, to = c(0, 5))\n}\n\njas %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(\n      colour = hsv(hue, sat, .5), \n      size = map_size(val, time)\n    ), \n    alpha = .03,\n    show.legend = FALSE\n  )\n\n\n\n\nWhen colouring the image, we’re using the same “halftonesque” trick from earlier. The colours vary only in hue and saturation. The intensity values are mapped to the size aesthetic, much like we did earlier, but this time around the size aesthetic is a function of two variables: it depends on time as well as val. The way I’ve set it up here is to have the points get larger as time increases, but there’s no reason we have to do it that way. There are endless ways in which you could combine the positional, temporal, and shading data to create interesting generative art. This is only one example.\nThe last chapter\nAt last we have the tools we need to create images in a style similar (though not identical) to those produced by the Water Colours system. We can import, reorganise, and separate the data:\n\n\njas <- file %>% \n  import_image(width = 200, height = 120) %>% \n  construct_matrix() %>% \n  construct_tibble() %>% \n  extract_channels()\n\n\n\nWe can define flow fields with different properties, move the pixels through the fields, and rejoin the modified positions with the colour information\n\n\npts <- jas %>% \n  extract_points() %>% \n  iterate(\n    time = 40, \n    step = .2, \n    octaves = 10, \n    frequency = .05\n  )\n\njas <- jas %>%\n  restore_points(pts)\n\njas\n\n\n# A tibble: 984,000 × 11\n   shade    id   red   grn   blu    hue    sat   val     x     y  time\n   <chr> <int> <int> <int> <int>  <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 #9c8…     1   156   129   120 0.0417 0.231  0.612     1     1     0\n 2 #81b…     2   129   181   100 0.274  0.448  0.710     1    10     0\n 3 #8b7…     3   139   120   112 0.0494 0.194  0.545     1   100     0\n 4 #eed…     4   238   223   219 0.0351 0.0798 0.933     1   101     0\n 5 #c29…     5   194   154   163 0.962  0.206  0.761     1   102     0\n 6 #d5e…     6   213   225   195 0.233  0.133  0.882     1   103     0\n 7 #bde…     7   189   232   190 0.337  0.185  0.910     1   104     0\n 8 #b3d…     8   179   223   188 0.367  0.197  0.875     1   105     0\n 9 #b2d…     9   178   220   189 0.377  0.191  0.863     1   106     0\n10 #b3d…    10   179   217   191 0.386  0.175  0.851     1   107     0\n# … with 983,990 more rows\n\nWe can write customised helpers to guide how information is used:\n\n\nmap_size <- function(x, y) {\n  12 * (1 - x) * (max(y)^2 - y^2) / y^2\n}\n\n\n\nAnd we can render the images with ggplot2:\n\n\npic <- jas %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(\n      colour = shade, \n      size = map_size(val, time)\n    ), \n    alpha = 1,\n    stroke = 0,\n    show.legend = FALSE\n  ) \n\npic\n\n\n\n\nThe colour bleeding over the edges here is to be expected. Some of the points created with geom_point() are quite large, and they extend some distance beyond the boundaries of the original jasmines photograph. The result doesn’t appeal to my artistic sensibilities, so I’ll adjust the scale limits in ggplot2 so that we don’t get that strange border:\n\n\npic +\n  scale_x_continuous(limits = c(11, 190), expand = c(0, 0)) +\n  scale_y_continuous(limits = c(7, 114), expand = c(0, 0))\n\n\n\n\nThe end result is something that has a qualitative similarity to the Water Colours pieces, but is also possessed of a style that is very much its own. This is as it should be. It may be true that “all art is theft” – as Picasso is often misquoted as saying – but a good artistic theft is no mere replication. It can also be growth, change, and reconstruction.\nA happy ending after all.\nEpilogue\n\nI find it so amazing when people tell me that electronic music has no soul. You can’t blame the computer. If there’s no soul in the music, it’s because nobody put it there (Björk, via Tim de Sousa)\n\n\n\n\n\n\n\n\n\nDeparture\n\n\n\n\n\n\n\n\nEcho\n\n\n\n\n\n\n\n\nPortal\n\n\n\n\n\n\n\n\nGods of Salt, Stone, and Storm\n\n\n\n\n\n\n\n\nEl Último Amanecer de Invierno\n\n\n\n\n\n\n\n\nPlume\n\n\n\n\n\n\n\n\nWoodland Spirits\n\n\n\n\n\n\n\n\nBelow the Horizon\n\n\n\n\n\n\n\n\nLast updated\n2021-09-17 16:55:04 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-09-07_water-colours/jasmine-recollected.png",
    "last_modified": "2021-09-30T15:08:53+10:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-08-08_git-credential-helpers/",
    "title": "Managing GitHub credentials from R, difficulty level linux",
    "description": "A sick sad story in which a humble R user was forced to learn something about\nhow linux stores passwords and, more importantly, got R to use her GitHub\ncredentials properly",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-08-08",
    "categories": [],
    "contents": "\n\nContents\nThe story is quite short…\nUsing GitHub credentials with R\nSetting up the credentials\n\n… unless you’re on linux\nWhere did I leave my config?\nDon’t forget to update git\n\nThree solutions\n1. Set a long timeout for the git cache\n2. Use libsecret credential manager\n3. Use GCM core\n\n\n\n\nThere are days when I regret switching to linux as an R user. It’s not that I’m particularly enamoured of Apple or Microsoft, and I do enjoy the freedom to tinker that linux systems provide, but without the same resourcing that underpins Windows or Mac OS, I do spent a disproportionate amount my time trying to make my long-suffering Ubuntu laptop do something that would “just work” if I’d gone with one of the more traditional options. But such is life, and besides, there’s a case to be made that the time I spend on these things is not wasted: usually, I end up learning something useful.\n La la la la la. (Figure from giphy.com)\nThis is one of those stories.\nThe story is quite short…\nUsing GitHub credentials with R\nFor some years now I have been using git repositories for version control, with some ambivalence to my feelings. I absolutely love version control, and I think GitHub is a fabulous tool, but git itself gives me headaches. It feels counterintuitive and untidy, and I am resistant to learning new git tricks because of that. However, now that GitHub is moving to end password authentication for git operations, I find myself needing to do precisely that. Sigh.\nLike many R users, whenever I encounter a git problem my first impulse is to see whether Happy Git and GitHub for the useR (Bryan 2018) can help me out, and true to form, it can. Having decided that I will revert to being an https girl, renouncing my flirtation with ssh, I’ve found the chapter on caching https credentials extremely useful. The usethis article on git credentials is also worth the read.\nThe problem can be broken into three parts:\nHow do I set up an authentication token on my GitHub account?\nHow do I configure my git installation to use the authentication token?\nHow do I ensure that R detects these credentials?\nThanks to the fabulous work of the tidyverse team, it’s possible for R users to solve the problem in a fairly painless way. The solution has been documented repeatedly, but for the sake of completeness I’ll repeat the advice here.\nSetting up the credentials\nThe first thing you’ll need to do is set up a GitHub token. You can do this on the GitHub website, but for an R user it’s probably easiest to use the usethis package (Wickham and Bryan 2021):\n\n\nusethis::create_github_token()\n\n\n\nThis will open GitHub in a browser window, take you to the “create a new token page,” and pre-populate all the fields with sensible default values. After accepting these values, the token is created and you’ll be given a PAT, a “personal authentication token.” It’ll look something like this…\nghp_dgdfasdklfjsdklfjsadfDKFJASDLKFJ3453\n…and you should immediately save this in a secure password manager, like 1password, lastpass, etc, because GitHub will only show it to you this one time. You did save it to your password manager, right? Right? I mean, you might need it again. You really might. Yes, you. All right then. I’ll trust you’ve taken sensible precautions now, so let’s keep going. The next step in the process is to configure your git installation to use your token. This is, once again, quite easy to do with gitcreds (Csárdi 2020):\n\n\ngitcreds::gitcreds_set()\n\n\n\nWhen you call this function interactively, R will ask for your PAT. Paste it into the console, hit enter, and you are done. Your git installation is now configured to use the token. Yay! Let’s move onto the third step, which is to ensure that R will recognise and use these credentials. As it turns out, step three doesn’t require you to do anything, because it happens automatically! Functions like usethis::pr_push() recognise your credentials as soon as gitcreds sets them up, and everything works perfectly…\n Quinn. (Figure from giphy.com)\n… unless you’re on linux\nIf you’re on linux, you might find yourself in the same boat I was. The credentials you just set up work flawlessly for about 15 minutes, at which time R complains that it cannot find any credentials and you spend the next 15 minutes crying melodramatically.\nWhen this happened to me I assumed the problem was my R environment. I tried updating gitcreds, usethis, and every other R package I could think of that might possibly be involved in communicating with git. Nothing worked. The reason nothing worked is that the problem wasn’t with R at all… it was git, and in hindsight I realise that the problem is specific to git on linux. All those beautiful people with their fancy Windows and Mac machines won’t run into the problem I encountered. They won’t spend an entire Saturday trying to teach themselves git credential management. They will never know my pain. Curse them and their superior purchasing decisions.\n Daria. (Figure from giphy.com)\nJust kidding. I love my quirky little Ubuntu box and I have a lot of fun learning how to fix her up every time she sets herself on fire.\nWhere did I leave my config?\nOkay, I’m going to need to make changes to my git configuration. Although git makes it possible to store configuration locally, at the repository level, I rarely need this flexibility. The relevant information is stored in the global configuration file: on my machine, this is located at /home/danielle/.gitconfig. I can use git config to list these configuration settings, like this\n\ngit config --global --list\n\nand at the start of this exercise the output would have looked like this:\nuser.name=Danielle Navarro\nuser.email=d.navarro@unsw.edu.au\nI’m not sure why this is, but I always feel slightly more reassured when I’m able to inspect the configuration file itself. Opening my .gitconfig file shows the same information, but the formatting is slightly different in the raw file:\n[user]\n    name = Danielle Navarro\n    email = d.navarro@unsw.edu.au\nTo solve the git credential problem, we’re going to need to edit this configuration information. Depending on which solution you go with, you might need to install new software too.\nDon’t forget to update git\nBefore starting, it’s a good idea to make sure you have the latest version of git: older versions may not have the tools you need. As it happens, I had already updated git to the most recent version (2.32.0 at the time of writing), but in case anyone ends up relying on this post, here’s how you do it:\nsudo add-apt-repository ppa:git-core/ppa\nsudo apt update\nsudo apt install git\nThree solutions\n1. Set a long timeout for the git cache\nRecent versions of git are released with a credential cache that retains your credentials in memory temporarily. The information is never written to disk, and it expires after a time. You can tell git to use this cache as your “credential helper” by typing the following command at the terminal:\n\ngit config --global credential.helper cache\n\nAfter doing this, my .gitconfig file now looks like this:\n[user]\n    name = Danielle Navarro\n    email = d.navarro@unsw.edu.au\n[credential]\n    helper = cache\nUnfortunately this isn’t an ideal solution, because the cache expires after 900 seconds (15 minutes). As soon as the cache expires, git loses track of your GitHub credentials and so does R. So you have to set the credentials again by calling gitcreds::gitcreds_set() and entering the PAT again. That’s annoying, but you did store the PAT in a password manager right? You were smart. You definitely aren’t going to be foolish like me, forget to store your PAT every time, and end up needing to create a new GitHub token every 15 minutes.\nA simple solution to this problem is to ask git to store information in the cache for just a teeny tiny little bit longer. Instead of having the cache expire after the default 900 seconds, maybe set it to expire after 10 million seconds. That way, you’ll only have to refresh the cache using gitcreds::gitcreds_set() once every four months instead of four times an hour. Implementing this solution requires only one line of code at the terminal:\n\ngit config --global credential.helper 'cache --timeout=10000000'\n\nAfter typing this, my .gitconfig file looks like this:\n[user]\n    name = Danielle Navarro\n    email = d.navarro@unsw.edu.au\n[credential]\n    helper = cache --timeout=10000000\nIn some ways this is a bit of a hack. If cache expiry normally happens every 15 minutes, there’s something a little odd about dragging it out and making it hang around for 16 weeks. That being said, I’ve done many stranger things than this in my life. It may not be the most elegant way to solve the problem, but it works.\n Trent. (Figure from giphy.com)\n2. Use libsecret credential manager\nIt puzzled me slightly that this problem only exists for linux computers, so I did a little more reading on how git manages credentials. It turns out you don’t have to rely on the in-memory cache: you can tell git to use some other program to supply the credentials. This is what all those swanky Mac and Windows people have been doing all along. On Macs, for example, git defaults to using the OS X keychain to store credentials safely on disk. It’s possible to do the same thing on linux using libsecret (source on gitlab) and thankfully it’s not much harder to set this up than to use the “long cache” trick described in the previous section.\nThe first step is ensuring libsecret is installed on your machine. It probably is (or at least, it was on my Ubuntu 20.04 box), but in case it isn’t here’s the command you need\n\nsudo apt install libsecret-1-0 libsecret-1-dev\n\nIt helps to realise that libsecret isn’t an application designed to work with git (i.e., it’s not the credential manager), nor is it the keyring where the passwords are stored. Rather, it’s a library that communicates with the keyring: I found this post useful for making sense of it. So if we want to use libsecret to access the keyring, we’re going to need a git credential manager that knows how to talk to libsecret. As it turns out, git comes with one already, you just have to build it using make:\n\ncd /usr/share/doc/git/contrib/credential/libsecret\nsudo make\n\nThis will build the git-credential-libsecret application for you and now all you have to do is tell git to use this as the “credential helper” application that supplies the GitHub credentials:\n\ngit config --global credential.helper \\\n  /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret\n\nAfter typing that, my .gitconfig file looks like this…\n[user]\n    name = Danielle Navarro\n    email = d.navarro@unsw.edu.au\n[credential]\n    helper = /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret\n… and I’m all set and ready to go.\nOne thing I found handy during this step is to check that R was reading the correct configuration information. It’s possible to do this with gitcreds:\n\n\ngitcreds::gitcreds_list_helpers()\n\n\n\n\n[1] \"/usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret\"\n\nIn any case, if all the applications are talking to each other properly, the next time you call gitcreds::gitcreds_set() they’ll all send the message along: R will pass your PAT to git, git will pass it to git-credential-libsecret, git-credential-libsecret will pass it to libsecret, and the PAT will end up in your linux keychain. Whenever you need to authenticate and push some commits up to GitHub from R, it should find the credentials using the same communication channel. Everything should work swimmingly.\n Quinn et al. (Figure from giphy.com)\n3. Use GCM core\nAs far as I can tell, the libsecret credential manager is a perfectly good solution to the problem, but in the end I made a different choice: I decided to go with “git credential manager core,” or GCM Core. It’s developed by Microsoft and, perhaps unsurprisingly, it is what GitHub currently recommends. It’s slightly more painful to set up, and the installation instructions are different depending on what flavour of linux you’re running. Because I’m on Ubuntu 20.04, I downloaded the .deb file associated with the most recent release of GCM core, and then installed the application using the dpkg command:\n\nsudo dpkg -i <path-to-deb-file>\n\nThis will build GCM core on your system, and once that’s done you can ask it to take care of the git configuration for you:\n\ngit-credential-manager-core configure\n\nThis will edit the .gitconfig file, so for me it now looks like this:\n[user]\n    name = Danielle Navarro\n    email = d.navarro@unsw.edu.au\n[credential]\n    helper = \n    helper = /usr/bin/git-credential-manager-core\n[credential \"https://dev.azure.com\"]\n    useHttpPath = true\nIn a happier world you would be done at this point, but we don’t live in a happy world. We live in a sick sad world that has global pandemics and pineapple on pizzas. So there’s still one job left to do.\nMuch like the libsecret credential manager I built in the previous section, GCM core is “just” a git credential manager: it communicates with git, but it isn’t a password manager or a keyring, and it doesn’t store the PAT itself. Instead, it offers you several different options for how the PAT is to be stored. If you click through and take a look at the list, the first suggested option is to connect to a secret service API. As far as I can tell “secret service” isn’t an application, it’s a specification, and in practice it’s just a fancy way of referring to a linux keychain. Just as the libsecret credential manager needs some way of communicating with the keychain (i.e., the libsecret library itself), GCM core needs an intermediary. In fact, it turns out GCM core also uses libsecret to talk to the keychain. So that’s the option I went with. The terminal command to set this up is this:\n\ngit config --global credential.credentialStore secretservice\n\nAfter running the command, my .gitconfig file looks like this:\n[user]\n    name = Danielle Navarro\n    email = d.navarro@unsw.edu.au\n[credential]\n    helper = \n    helper = /usr/bin/git-credential-manager-core\n    credentialStore = secretservice\n[credential \"https://dev.azure.com\"]\n    useHttpPath = true\n Jane. (Figure from giphy.com)\nAs before, I can check that R is reading the correct configuration information…\n\n\ngitcreds::gitcreds_list_helpers()\n\n\n[1] \"/usr/bin/git-credential-manager-core\"\n\n…and now I’m ready to go. My problems are solved. The sun is shining, the birds are singing, and git is working properly from R again. All is well in heaven and earth. Oh the sheer excitement of it all. I hope I can contain my boundless enthusiasm and joy.\n Daria. (Figure from giphy.com)\n\nLast updated\n2021-09-17 17:00:16 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\nBryan, Jennifer. 2018. Happy Git and GitHub for the useR. GitHub.\n\n\nCsárdi, Gábor. 2020. Gitcreds: Query ’Git’ Credentials from ’r’. https://CRAN.R-project.org/package=gitcreds.\n\n\nWickham, Hadley, and Jennifer Bryan. 2021. Usethis: Automate Package and Project Setup. https://CRAN.R-project.org/package=usethis.\n\n\n\n\n",
    "preview": "posts/2021-08-08_git-credential-helpers/credentials.jpg",
    "last_modified": "2021-09-30T15:08:53+10:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-07-08_generative-art-in-r/",
    "title": "Generative art in R",
    "description": "Comments on an exhibit I contributed to as part of useR!2021",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-07-08",
    "categories": [],
    "contents": "\n\n\nA little while ago I was invited by Sara Mortara to contribute art as part of an exhibit to be presented at the 2021 useR! conference, along with several artists who I admire greatly. I could hardly say no to that, now could I? So I sent some pieces that I’m fond of, most of which are posted somewhere on my art website. I realised later though that I was going to have to talk a little about my art too, and Sara suggested an informal Q&A during the timeslot allocated to the exhibit. Naturally, I agreed since that meant I didn’t have to prepare anything formal, and like all artists I am extremely lazy. Later though, it occurred to me that it actually wouldn’t be terrible if I wrote a blog post to accompany my contribution to the exhibit, loosely based on the questions Sara suggested. And so here we are…\nWhen did you start using R for art? Do you remember your first piece?\nI started making art in R some time in late 2019. I’d discovered some of the art that Thomas Lin Pedersen had been making – at the time he was posting pieces from his Genesis series – and at the same time I found the ambient package that he was using to create the pieces. Thomas famously does not post source code for his art, and being stubborn and curious I wanted to work out how he was doing it, so I started playing with ambient to see if I could reverse engineer his system. My very first piece was Constellations, shown below. It’s certainly not the prettiest thing I’ve created, and there are a lot of things I’d like to change about it now, but it’s nice to have your early work lying around to see how you’ve changed since then:\n\nConstellations\n\nIf you follow the link above and look at Thomas’ Genesis pieces you can tell that it’s not even remotely close to the mark, but I did eventually get the hang of it and managed to produce a few pieces like Rainbow Prisms which are closer to the kind of work he was producing:\n\nRainbow Prisms\n\nIt’s still not quite the same as Thomas’ in style, but by the time I’d worked out how to produce these I decided it was time to change my approach and branch out a bit. I love Thomas’ work of course, but I didn’t want my art to be just a low quality imitation of his! And besides, by that point I’d started discovering a whole lot of other people making generative art in R, such as Will Chase, Antonio Sánchez Chinchón, Marcus Volz, and (somewhat later) Ijeamaka Anyene. Each has their own style and – following the famous advice that art is theft – have shamelessly taken ideas and inspiration from each at different times.\nSome of those early pieces are still around, as part of the Rosemary gallery.\nWere you an artist before making generative art in R?\nNot really. I always wanted to do more artistic and creative things, but the only thing I’d ever done that required any kind of mix of aesthetic sensibility and craftwork was gardening. I used to have a lovely garden in Adelaide with a mix of Mediterranean and Australian native plants, and I had the same kind of enthusiasm for gardening then as I do for art now. Maybe one day I’ll garden again but there’s no space for that in my Sydney apartment!\nCan you talk about your creative process? Do you begin from code or from the outcome you are looking for? Do you start with the color palette in mind, or is it an iterative process?\nI’m honestly not sure I have a consistent process? I spend a lot of time browsing artwork by other people on twitter and instagram, and from time to time I read posts about the techniques that they use. Whenever I do this I end up thinking a bit about how I might use this technique or wondering what methods other artists use to create their work, but I don’t usually act on that information until I think of something I want to do with it. That kind of technical or stylistic information is like background knowledge that lies dormant until I need it.\nMost of the time the starting point for my art is an emotion. I might be angry or lonely or tired, or just in need of something to occupy my mind and distract me from something else. When I start implementing a new system it’s often (though not always) a modification of a previous one. In principle this modification process could go in any direction, but my aesthetic sensibilities depend a lot on my state of mind, and that imposes a bias. I tweak the code one way, and see what it produces. If I like it, I keep the change, if I don’t I reject it. It’s a lot like a Metropolis-Hastings sampler that way, but my mood strongly shapes the accept/reject decision, so the same starting point can lead to different outcomes. As a concrete example, the Pollen, Bursts and Embers series are all based on the same underlying engine, the fractal flame algorithm created by Scott Draves, but my emotional state was very different at the time I coded each version. For example, the Pollen Cloud piece I contributed to the useR exhibit is soft and gentle largely because I was feeling peaceful and relaxed at the time:\n\nPollen Cloud\n\nBy way of contrast, the Geometry in a Hurricane piece from Bursts is layered in jagged textures with a chaotic energy because I was angry at the time I was coding:\n\nGeometry in a Hurricane\n\nThe Soft Ember piece below (also included in the exhibit) has a different feel again. There’s more energy to it than the pollen pieces, but it’s not as chaotic as the bursts series. Again, that’s very much a reflection of my mood. I wasn’t angry when I coded this system, but I wasn’t relaxed either. At the time, something exciting had happened in my life that I wasn’t quite able to do anything about, but I was indulging in the anticipation of a new thing, and some of that emotion ended up showing through in the pieces that I made at the time:\n\nSoft Ember\n\nTo bring all this back to the question, it’s very much an iterative process. The driver behind the process is usually an emotion, and the colour choices, the shapes, and the code are all adapted on the fly to meet with how I’m feeling.\nWhat is your inspiration?\nTo the extent that my art is driven by emotion, the inspiration for it tends to be tied to sources of strong emotion in my life. Sometimes that emotion comes from the sources of love and joy: family, intimate partners, and so on. The Heartbleed series is one of those. The background texture to these images is generated by simulating a simple Turing machine known as a turmite and the swirly hearts in the foreground are generated using the toolkit provided by the ambient package. This system is very much motivated from emotional responses to the loved ones in my life. One of the pieces in the exhibit is from this series:\n\nTurmite 59 in Red\n\nOther times the emotional motivation comes from sources of pain - sometimes things that were physically painful, sometimes that were psychologically painful. The Orchid Thorn piece I included in the exhibit is one of those, linked to an intense physically painful experience.\n\nOrchid Thorn\n\nThe Bitterness piece below, which I haven’t done much with other than post to my instagram, is strongly tied to the psychological stresses associated with my gender transition. Yes, there’s a softness to the piece, but there’s also a sandpaper-like texture there that makes me think of abrasion. The colour shifts make me think about transitions, but the roughness at some of the boundaries reminds me that change is often painful.\n\nBitterness\n\nOne odd property of the art, at least from my point of view, is that looking at a given piece recalls to mind the events and emotions that inspired the work, and to some extent that recollection becomes a way of re-experiencing the events. Sometimes that’s a good thing. Not always though.\nWhat is your advice for people who wants to create art in R?\nI think I’d suggest three things. Find artists you like, read about their processes. Sometimes they’ll show source code or link to algorithms like I’ve done in a few places in this piece, and it can be really valuable to try to retrace their steps. There’s nothing wrong with learning technique by initially copying other artists and then developing your own style as you go.\nThe second thing I’d suggest, for R folks specifically, is to take advantage of the skills you already have. Most of us have skills in simulation, data wrangling, and data visualisation, and those skills can be repurposed for artistic work quite easily. A lot of my pieces are created using that specific combination. I’ll often define a stochastic process and sample data from it using tools in base R, use dplyr to transform and manipulate it, then use ggplot2 to map the data structure onto a visualisation. One of the nice things about dplyr and ggplot2 being compositional grammars is the fact that you can “reuse” their parts for different purposes. I get a lot of artistic mileage out of geom_point() and geom_polygon(), and quite frankly purrr is an absolute godsend when the generative process you’re working with is iterative in nature.\nThe other thing would be try not to put pressure on yourself to be good at it immediately. I wasn’t, and I don’t think anyone else was either. Earlier I showed the Constellations piece and referred to it as the first piece I created. In a way that’s true, because it was the first time I reached a level that I felt comfortable showing to other people. But I made a lot of junk before that, and I made a lot of junk after that. I make some good art now (or so people tell me) precisely because I made a lot of bad art before. Even now, though, I can’t tell which systems will end up good and which will end up bad. It’s a bit of a lottery, and I’m trying my best not to worry too much about how the lottery works. I like to have fun playing with visual tools, and sometimes the tinkering takes me interesting places.\nAnything to add about your pieces in the exhibit?\nNot a lot. Several of the pieces I’ve contributed are already linked above, but I might just say a little about the other pieces and how they were made. The Silhouette in Teal piece uses the flametree generative art package to create the tree shown in silhouette in the foreground, and a simple random walk to generate the texture in the background:\n\nSilhouette in Teal\n\nIt has also been surprisingly popular on my Society6 store, which you can visit if you want some of my art on random objects. I am not sure why, but I have sold a lot more shower curtains and yoga mats than I would have expected to sell in my lifetime.\nLeviathan emerged from my first attempt to create simulated watercolours in R using this guide written by Tyler Hobbs. I was in a dark mood at the time and the ominous mood to the piece seems quite fitting to me.\n\nLeviathan\n\nThe Floral Effect piece is an odd one. It’s part of the Viewports series that I created by applying Thomas Lin Pedersen’s ggfx package over the top of the output of the same system I used to create the Native Flora series, which in turn is an application of the flametree system I mentioned earlier. I quite like it when these systems build on top of one another.\n\nFloral Effect\n\nThe last piece I included, Fire and Ice, is a little different from the others in that it’s not a “pure” generative system. It works by reading an image file into R, using Chris Marcum’s halftoner package to convert it to a halftone image, and then manipulate that image using the tools provided in the ambient package. The end result is something that still resembles the original image but has more of a painted feel:\n\nFire and Ice\n\n\n\nLast updated\n2021-09-17 17:01:46 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-07-08_generative-art-in-r/turmite59-in-red.jpg",
    "last_modified": "2021-09-30T15:08:53+10:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-04-19_bs4cards-in-distill/",
    "title": "Bootstrap cards in distill",
    "description": "How to enable bootstrap 4 on a distill website, even though you probably \ndon't need to. I like it though because I get to add pretty bootstrap cards",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-04-19",
    "categories": [],
    "contents": "\n\nContents\nEnabling bootstrap 4\nVanilla R markdown\nPkgdown\nDistill\n\nTesting with pretty pictures\n\n\n\nWhen creating R markdown websites, I often find myself wanting to organise content into a nice-looking grid of links. For example, in a recent project I wanted to be able to create something like this:\n\n\n\n\n\n\n\n\nStarting R markdown\n\nAn introduction to R markdown. The target audience is a novice R user with no previous experience with markdown.\n\n\n\n\n\n\n\nStarting ggplot2\n\nAn introduction to ggplot2. The target audience is a novice user with no previous experience with R or ggplot2.\n\n\n\n\n\n\n\nStarting programming\n\nThis is primarily a tutorial on making generative art in R, but in doing so introduces core programming constructs and data structures. It is assumed the user has some previous experience with ggplot2.\n\n\n\n\n\nIt bothered me that this wasn’t as straightforward as I was expecting, so for one of my side projects I’ve been putting together a small package called bs4cards to make this a little easier inside an R markdown document or website. There are some introductory articles posted on the bs4cards package website showing how the package works, and there’s no need to duplicate that content here. However, because this website uses the distill package (Allaire et al. 2021) and the package website is built using pkgdown (Wickham, Hesselberth, and Salmon 2021), it seems like a good idea to have at least one post on both sites that uses bs4cards.\nEnabling bootstrap 4\nThe reason for doing this is that the first step in using the package is to make sure that your R markdown document uses version 4 of bootstrap: the bs4cards package takes its name from the cards system introduced in bootstrap version 4, and will not work properly if used in R markdown documents that rely on bootstrap version 3, or don’t use bootstrap at all. To ensure that you are using bootstrap 4, you need to edit the YAML header for your document to specify which version of bootstrap you want to use. The instructions are slightly different depending on what kind of document you’re creating:\nVanilla R markdown\nFor a plain R markdown document or website (i.e., one where the output format is html_document) here is the relevant section of YAML you might use:\noutput:\n  html_document:\n    theme:\n      version: 4\nThis overrides the R markdown defaults (Xie, Dervieux, and Riederer 2020) to ensure that the output is built using bootstrap 4.5.\nPkgdown\nTo enable bootstrap 4 in a pkgdown site, the process is similar but not identical. Edit the _pkgdown.yml file to include the following\ntemplate:\n  bootstrap: 4\nNote that this relies on a currently-in-development feature, so you may need to update to the development version of pkgdown to make this work.\nDistill\nDistill R markdown does not use bootstrap, which is a little inconvenient if you want to use bs4cards with distill. With a little effort it is possible to enable the entire bootstrap library in a distill site, but this can lead to undesirable side-effects because bootstrap has a lot of styling that doesn’t look visually appealing when mixed with the istill styling. The solution I’ve adopted for this is to use a custom bootstrap build that includes a minimal number of bootstrap components. If you want to try the same approach, you can download the strapless.css file to the same folder as the distill post you want to enable it for, and include the following YAML in the post header:\noutput:\n  distill::distill_article:\n    css: \"strapless.css\"\nIf you want to enable strapless for the entire site, this markup goes in the _site.yml file and the css file should go in the home folder for the project. Once that’s done you should be ready to go. That being said, you’d be wise to be careful when adopting this approach: the strapless build is a crude hack, and I haven’t tested it very thoroughly.\nTesting with pretty pictures\nJust to make certain, let’s check that it does what we want by generating cards using the galleries data that comes bundled with the bs4cards package:\n\n\nlibrary(bs4cards)\ngalleries %>% \n  cards(title = long_name, image = image_url)\n\n\n\n\n\n\nAsh Cloud and Blood\n\n\n\n\nGhosts on Marble Paper\n\n\n\n\nIce Floes\n\n\n\n\nNative Flora\n\n\n\n\nSilhouettes\n\n\n\n\nTrack Marks\n\n\n\n\nViewports\n\n\n\n\n\n\nLooks about right to me?\n\n\nLast updated\n2021-09-17 17:03:00 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\nAllaire, JJ, Rich Iannone, Alison Presmanes Hill, and Yihui Xie. 2021. Distill: ’R Markdown’ Format for Scientific and Technical Writing. https://CRAN.R-project.org/package=distill.\n\n\nWickham, Hadley, Jay Hesselberth, and Maëlle Salmon. 2021. Pkgdown: Make Static HTML Documentation for a Package.\n\n\nXie, Yihui, Christophe Dervieux, and Emily Riederer. 2020. R Markdown Cookbook. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/rmarkdown-cookbook.\n\n\n\n\n",
    "preview": "posts/2021-04-19_bs4cards-in-distill/bs4cards-logo.png",
    "last_modified": "2021-09-30T15:08:53+10:00",
    "input_file": {},
    "preview_width": 2820,
    "preview_height": 1620
  },
  {
    "path": "posts/2021-04-18_pretty-little-clis/",
    "title": "Pretty little CLIs",
    "description": "How to make a gorgeous command line interface in R using the cli package.\nSomewhere along the way I accidentally learned about ANSI control codes,\nwhich strikes me as unfortunate",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-04-18",
    "categories": [],
    "contents": "\n\nContents\nMeet the cli package\nUsing the status bar\nCreating spinners\nShowing cli messages in R markdown\nWriting longer messages\nCreating structured messages\nEpilogue\n\n\n\n\n\n\n\nLyrics to the title theme of the US TV show, Pretty Little Liars. The song is called Secrets, taken from the fabulous Thirteen Tales of Love and Revenge album by The Pierces\nAnytime you write R code whose output needs to be understood by a human being, it is an act of kindness to spend a little time making sure that the output shown to the human being properly communicates with that human. As a consequence of this, you often find yourself needing to write information to the R console, just to cater to those precious human sensibilities. Perhaps the simplest way to do this is to use the cat() function. It’s a simple tool and it gets the job done in most cases.\nFor example, consider the use case for the antagonist character “A” from Pretty Little Liars, whose stalking and threats were delivered mostly via text message. Had she used R to craft her threatening text messages, she could have written code like this:\n\n\nwait <- function(seconds = 2) {\n  Sys.sleep(seconds)\n}\n\nsend_cat_threat <- function() {\n  cat(\"Dead girls walking.\\n\"); wait()\n  cat(\"--A.\\n\")\n}\n\n\n\nEquipped with a function that specifies her threat, complete with a dramatic pause for effect, she’s ready to go. When her unwitting victim does something to trigger the send_cat_threat() function, a two part message is displayed on the console. The first part shows up immediately\n\nDead girls walking.\n\nand after a two second delay, her call sign is revealed\n\nDead girls walking.\n--A.\n\nIt’s not too difficult to imagine what this message might look like at the R console, but where’s the fun in that? Thanks to the asciicast package (Csárdi et al. 2019), there’s no need to leave anything to the imagination, and we can see the malevolent message in screencast form:\n\n\n\n\nThe ominous text messages used in this post are taken from Pretty Little Liars. This one is from episode two in season one. It’s important that one documents ones sources, right?\nUsing cat() to craft messages works perfectly well for simple text communication, but sometimes you want something that looks a little fancier. After all, if the big picture plan here is to impersonate a dead teenager and terrorise her friends - and for some reason you’ve chosen R to do so - you might as well put a little effort into the details, right?\nMeet the cli package\nOne thing I love about the R community is that if you search long enough you’ll find that someone else has already written a package that solves the problem you’re facing. If your problem is “how to craft nicely formatted messages” then you’ll be delighted to learn that many wonderful things become possible if you have the cli package (Csárdi 2021a) as your talented assistant. To craft a beautiful command line interface (CLI) of her very own, the first thing A will need to do is load the package:\n\n\nlibrary(cli)\n\n\n\nOnce this is done, it is a very trivial task for A to write the same threatening text message using cli_text()…\n\n\nsend_cli_threat <- function() {\n  cli_text(\"Dead girls walking.\"); wait()\n  cli_text(\"--A.\")\n}\nsend_cli_threat()\n\n\n\n\n\n\n…which is nice and all, but it doesn’t make much of a case for using cli. Stalking and threatening is busy work, and I’d imagine that A would want a more compelling justification before deciding to switch her evil workflow. However - much like A herself - the R console has many dark secrets, and fancier tricks than this are possible once you know how to expose them using cli.\nUsing the status bar\nOne piece of magic that I have wondered about for a long time is how fancy progress bars work: often when you’re doing something that takes a long time, you’ll see an ASCII progress bar rendered in text on the screen, which suddenly vanishes once the process is complete. How exactly does this work? Normally you can’t “unprint” a message from the console, so how is it possible for the progress bar to update without leaving an ugly trail of earlier messages behind it?\nWhile teaching myself cli, I found the answer. The most recent line of text generated at the terminal is speciall. It’s called the status bar: the state of the status bar can be manipulated, and the cli package provides a neat toolkit for doing so. So let’s say I were trying to convince A to switch to the cli tools. Right now, she’s writing a function that will send a four-part message, using cli_text() because I’ve at least convinced her to try the new tools:\n\n\nmessage_scroll <- function() {\n  cli_text(\"You found my bracelet.\"); wait()\n  cli_text(\"Now come find me.\"); wait()\n  cli_text(\"Good luck bitches.\"); wait()\n  cli_text(\"-A\"); wait()\n}\nmessage_scroll()\n\n\n\nWhen her victim triggers this message the lines will appear on screen, one after the other with an appropriate dramatic pause separating them. The victim might see something that looks like this:\n\n\n\nThe problem – when viewed from an evil point of view – is that this message stays on screen after delivery.1 The victim has time to think about it, take a screenshot to show her friends, that kind of thing. Wouldn’t the gaslighting be so much more effective if she were to send the message piece by piece, each part disappearing as the next one appears, only to have the whole thing vanish without a trace and leaving the victim wondering if she imagined the whole thing? This is where the status bar comes in handy. Here’s how it would work:\n\n\nmessage_inline <- function() {\n  id <- cli_status(\"\")\n  cli_status_update(id, \"You found my bracelet.\"); wait()\n  cli_status_update(id, \"Now come find me.\"); wait()\n  cli_status_update(id, \"Good luck bitches.\"); wait()\n  cli_status_update(id, \"-A\"); wait()\n  cli_status_clear(id)\n}\n\n\n\nThe first line in this function uses cli_status() to create a blank message on the status bar, and returns an identifier that refers to the status bar. The next four lines all use cli_status_update() to overwrite the current state of the status bar, and then pause dramatically for two seconds. In a final act of malice, the last line in the function clears the status bar using cli_status_clear(), leaving nothing except a blank space behind. So what the victim sees is something more like this:\n\n\nmessage_inline()\n\n\n\n\n\n\n\nThis message was sent to Aria in episode 10 of season one. I’m sure it is deeply important to everyone that I mention this.\nCreating spinners\nThe ability to control the status bar opens up a world of new possibilities. Progress bars are one such possibility, but the progress package (Csárdi and FitzJohn 2019) already does this nicely, and in any case I suspect that A might be more intrigued by the possibility of spinners, since they just spin and spin and give the victim no clue about when the process is going to end. Much more appealing when the developer doesn’t know (or doesn’t want to reveal) when the wait will end. The cli package has a nice makes_spinner function that serves this purpose. Here’s an example:\n\n\nspinny <- make_spinner(\n  which = \"dots2\",\n  template = \"{spin} It's not over until I say it is.\"\n)\n\n\n\nThe which argument is used to choose how the spinner would look, and the template argument is used to define how the “spinny bit” is placed relative to the rest of the text. The spinny object includes functions to update the state of the spinner (in this case spinny$spin() would be that function), and a function to clear the spinner from the status bar. So here’s how A might define a function that uses a spinner to keep the victim in suspense…\n\n\ntheatrics <- function(which) {\n  \n  # define the spinner\n  spinny <- make_spinner(\n    which = which,\n    template = \"{spin} It's not over until I say it is.\"\n  )\n  \n  # update the spinner 100 times\n  for(i in 1:100) {\n    spinny$spin()\n    wait(.05)\n  }\n  \n  # clear the spinner from the status bar\n  spinny$finish()\n  \n  # send the final part of the message\n  cli_alert_success(\"Sleep tight while you still can, bitches. -A\")\n}\n\n\n\nHere’s what happens:\n\n\ntheatrics(\"dots2\")\n\n\n\n\n\n\n\nThis message was sent to all four of the liars in the final episode of season one. I don’t think A used a spinner though, which feels like a missed opportunity to me\nSetting which = \"dots2\" is only one possibility. There are quite a lot of different spinner types that come bundled with the cli package, and I’d imagine A would want to look around to see which one suits her needs. Personally, I’m a fan of hearts:\n\n\ntheatrics(\"hearts\")\n\n\n\n\n\n\nTo see the full list use the list_spinners() function:\n\n\nlist_spinners()\n\n\n [1] \"dots\"                \"dots2\"               \"dots3\"              \n [4] \"dots4\"               \"dots5\"               \"dots6\"              \n [7] \"dots7\"               \"dots8\"               \"dots9\"              \n[10] \"dots10\"              \"dots11\"              \"dots12\"             \n[13] \"line\"                \"line2\"               \"pipe\"               \n[16] \"simpleDots\"          \"simpleDotsScrolling\" \"star\"               \n[19] \"star2\"               \"flip\"                \"hamburger\"          \n[22] \"growVertical\"        \"growHorizontal\"      \"balloon\"            \n[25] \"balloon2\"            \"noise\"               \"bounce\"             \n[28] \"boxBounce\"           \"boxBounce2\"          \"triangle\"           \n[31] \"arc\"                 \"circle\"              \"squareCorners\"      \n[34] \"circleQuarters\"      \"circleHalves\"        \"squish\"             \n[37] \"toggle\"              \"toggle2\"             \"toggle3\"            \n[40] \"toggle4\"             \"toggle5\"             \"toggle6\"            \n[43] \"toggle7\"             \"toggle8\"             \"toggle9\"            \n[46] \"toggle10\"            \"toggle11\"            \"toggle12\"           \n[49] \"toggle13\"            \"arrow\"               \"arrow2\"             \n[52] \"arrow3\"              \"bouncingBar\"         \"bouncingBall\"       \n[55] \"smiley\"              \"monkey\"              \"hearts\"             \n[58] \"clock\"               \"earth\"               \"moon\"               \n[61] \"runner\"              \"pong\"                \"shark\"              \n[64] \"dqpb\"               \n\nShowing cli messages in R markdown\nThroughout this post I’ve relied on asciicast to display screencasts of the R console as animated SVG files, rather than what I might normally do and rely on regular R markdown code chunks to do the work. There’s a reason for this: the R console is a terminal, and its behaviour doesn’t always translate nicely to HTML. Part of the magic of the rmarkdown package (Xie, Allaire, and Grolemund 2018) is that most of the time it is able to capture terminal output and translate it seamlessly into HTML, and we mere mortal users never notice how clever this is. However, when dealing with cli output, we run into cases where this breaks down and the law of leaky abstractions comes into play: text generated at the R console does not follow the same rules as text inserted into an HTML document, and R Markdown sometimes needs a little help when transforming one to the other.\nAn important thing to remember about cli is that the text it produces is a message, so its visibility in R Markdown depends on the chunk option for messages. As long as the message option is set to TRUE, R Markdown will include them as part of the output.2 In the simplest case, R Markdown works nicely, so as long as all A wants to do is send an unformatted threat within an R Markdown document, then this works:\n\n\ncli_text(\"I'm still here bitches, and I know everything. -A\")\n\n\nI'm still here bitches, and I know everything. -A\n\nHowever, the moment A tries to use any fancy formatting, things will go haywire for her. For example, suppose she wanted to send the message above as a simple “alert” message using cli_alert(), which uses fancy symbols and colours in the output. It is at this point that the cracks in the R Markdown pipeline start to leak. In this case, the leak would result in the document failing to knit and an error message complaining about\nPCDATA invalid Char value\nIntuitively she might guess that somewhere in the R Markdown pipeline, an invalid or malformed character has been created.3 The reason this happens is that the colours and symbols used by cli, and supported in the R console, rely on ANSI escape codes, but those escape codes aren’t recognised in HTML and – apparently – they can wreak havoc when R markdown writes those characters into the HTML document. ANSI colours in R are usually generated with the help of the crayon package (Csárdi 2021b), and per the issue #24 thread that I encounter on a semi-regular basis, it can be tricky to manage the process of translating these to HTML via R Markdown.\nSolving this issue requires A to jump through a few hoops. It’s annoying I know, but no-one ever said that running an unhinged stalking campaign via text messages was easy, right? Her first task is to make sure that the R Markdown document turns on crayon support:\n\n\noptions(crayon.enabled = TRUE)\n\n\n\nThis isn’t the whole solution, however, because while that tells R Markdown to stop ignoring all the ANSI stuff, it doesn’t necessarily allow it to render ANSI sequences properly. To fix this she needs to specify the knit hooks that explicitly tell R Markdown what to do. She can do this with the help of the fansi package (Gaslam 2021), which contains an obscurely-named function sgr_to_html() that translates a subset of the ANSI control sequences to HTML, and strips out all the others. Using this, she can write an ansi_aware_handler() function that will take an input string x and return HTML output appropriate for the R Markdown context:\n\n\nansi_aware_handler <- function(x, options) {\n  paste0(\n    \"<pre class=\\\"r-output\\\"><code>\",\n    fansi::sgr_to_html(x = x, warn = FALSE, term.cap = \"256\"),\n    \"<\/code><\/pre>\"\n  )\n}\n\n\n\nFrom there, it’s relatively easy. All she needs to do is tell knitr (Xie 2021) to use this function whenever it needs to handle output. Just for good measure she might do the same for messages, errors, and warnings:\n\n\nknitr::knit_hooks$set(\n  output = ansi_aware_handler, \n  message = ansi_aware_handler, \n  warning = ansi_aware_handler,\n  error = ansi_aware_handler\n)\n\n\n\nAt long last she is done.4 Her campaign of bullying and cruelty can continue:\n\n\ncli_alert(\"I'm still here bitches, and I know everything. -A\")\n\n\n→ I'm still here bitches, and I know everything. -A\n\n\n\nThis message was sent in the pilot episode. Yes, the quotes I’ve used are all from season one: I’ve just started a rewatch of the show, so the early episodes are quite fresh in my memory!\nWriting longer messages\nUp to this point the threatening messages that A has been sending have been short, only one line long. In several cases the messages have been cleverly constructed so that the same line (the status bar) is used to display multiple pieces of text, but ultimately it’s still one line messaging. A needs to take a little care when she wants to branch out. Conceptually, a message should correspond to “one semantically meaningful bundle of information” that might be split over several lines. However, as far as R is concerned, each call to cli_text() creates a distinct message. To see how this might cause A some grief, here’s the letter that she sent to Aria’s mother announcing the infidelity of Aria’s father:\n\n\nsend_cruel_letter_piecewise <- function() {\n  cli_text('Your husband, Byron, is involved with another woman')\n  cli_text('and when I say involved I mean in a \"romantic\" way.')\n  cli_text('This is not something recent. It started before your')\n  cli_text('family went away to Iceland and from the look of')\n  cli_text('things, it may be starting up again now that you\\'re')\n  cli_text('back. I know this is hard to hear, but it is the')\n  cli_text('truth. If you don\\'t believe this about your husband,')\n  cli_text('ask your daughter. She knows all about it.')\n  cli_text('Sincerely,')\n  cli_text('A')\n}\n\nsend_cruel_letter_piecewise()\n\n\nYour husband, Byron, is involved with another woman\n\nand when I say involved I mean in a \"romantic\" way.\n\nThis is not something recent. It started before your\n\nfamily went away to Iceland and from the look of\n\nthings, it may be starting up again now that you're\n\nback. I know this is hard to hear, but it is the\n\ntruth. If you don't believe this about your husband,\n\nask your daughter. She knows all about it.\n\nSincerely,\n\nA\n\n\nThis is not an ideal implementation. What A wants to send is one message spanning 10 lines not 10 separate one-line messages, but it’s the latter that she has actually implemented here. This is where the cli() function is handy: to takes an expression as input and collects all the constituent parts into a single message. This version of the function now sends a single message:\n\n\nsend_cruel_letter_singly <- function() {\n  cli({\n    cli_text('Your husband, Byron, is involved with another woman')\n    cli_text('and when I say involved I mean in a \"romantic\" way.')\n    cli_text('This is not something recent. It started before your')\n    cli_text('family went away to Iceland and from the look of')\n    cli_text('things, it may be starting up again now that you\\'re')\n    cli_text('back. I know this is hard to hear, but it is the')\n    cli_text('truth. If you don\\'t believe this about your husband,')\n    cli_text('ask your daughter. She knows all about it.')\n    cli_text('Sincerely,')\n    cli_text('A')\n  })\n}\n\nsend_cruel_letter_singly()\n\n\nYour husband, Byron, is involved with another woman\nand when I say involved I mean in a \"romantic\" way.\nThis is not something recent. It started before your\nfamily went away to Iceland and from the look of\nthings, it may be starting up again now that you're\nback. I know this is hard to hear, but it is the\ntruth. If you don't believe this about your husband,\nask your daughter. She knows all about it.\nSincerely,\nA\n\n\n\nThe letter was sent to Ella in episode four season one. Even on a rewatch I’m finding it impossible to imagine Holly Marie Combs as anyone other than Piper from Charmed and I keep expecting “Ella” to stop time and, idk, shave off her husbands eyebrows or something?\nMuch nicer. As every would-be tormenter knows, it’s important to pay attention to the details.\nCreating structured messages\nWriting long messages when sending a threatening letter is a simple enough thing, but at some point A will likely find herself wanting to add some structure to these missives. Lists are nice. Stalkers like keeping lists, I hear. With that in mind, a nice property of cli is that it allows you to separate style from structure using an HTML-like syntax. Top level headings are specified using cli_h1(), and second level headings are produced by cli_h2(). Unordered lists are produced using cli_ul() and ordered lists by cli_ol(). This make it easy to write structured messages to the R console:\n\n\ncli({\n  cli_h1(\"Characters\")\n  cli_h2(\"The Liars\")\n  cli_ul(c(\n    \"Alison DiLaurentis\",\n    \"Spencer Hastings\",\n    \"Aria Montgomery\",\n    \"Hanna Marin\",\n    \"Emily Fields\"\n  ))\n  cli_h2(\"The A-Team\")\n  cli_ul(c(\n    \"Mona Vanderwaal\",\n    \"Lucas Gottesman\",\n    \"Melissa Hastings\"\n  ))\n})\n\n\n\n── Characters ────────────────────────────────────────────────────────\n\n── The Liars ──\n\n• Alison DiLaurentis\n• Spencer Hastings\n• Aria Montgomery\n• Hanna Marin\n• Emily Fields\n\n── The A-Team ──\n\n• Mona Vanderwaal\n• Lucas Gottesman\n• Melissa Hastings\n\n\nBetter yet, the cli package has a whole swathe of other utilities that follow this same HTML-like naming scheme, making it possible to send elaborate and disturbing messages in so many different ways.\nEpilogue\nThere is a lot more to the cli package that I haven’t talked about in this post. I’ve not talked about how to modify the themes, how to create custom cli “apps” that use different themes or send output to different connections. I’ve not talked about how to use conditional logic within a cli call, displaying different messages depending on whether a process succeeds or fails. Those will have to remain secret for now, because this post is quite long enough already and quite frankly I’m still learning myself. Besides, these powers would no doubt would be put to terrible purposes in an R-themed Pretty Little Liars spinoff show, and I’m not entirely sure that all secrets need sharing…\n\n\ncli(\n  cli_blockquote(\n    quote = \"Friends share secrets, that's what keeps us close\",\n    citation = \"Alison\"\n  )\n)\n\n\n\n    “Friends share secrets, that's what keeps us close”\n    — Alison\n\n\n\n\nLast updated\n2021-09-17 17:03:57 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\nCsárdi, Gábor. 2021a. Cli: Helpers for Developing Command Line Interfaces. https://CRAN.R-project.org/package=cli.\n\n\n———. 2021b. Crayon: Colored Terminal Output. https://CRAN.R-project.org/package=crayon.\n\n\nCsárdi, Gábor, and Rich FitzJohn. 2019. Progress: Terminal Progress Bars. https://CRAN.R-project.org/package=progress.\n\n\nCsárdi, Gábor, Romain Francois, Mario Nebl, and Marcin Kulik. 2019. Asciicast: Create ’Ascii’ Screen Casts from r Scripts. https://CRAN.R-project.org/package=asciicast.\n\n\nGaslam, Brodie. 2021. Fansi: ANSI Control Sequence Aware String Functions. https://CRAN.R-project.org/package=fansi.\n\n\nXie, Yihui. 2021. Knitr: A General-Purpose Package for Dynamic Report Generation in r. https://yihui.org/knitr/.\n\n\nXie, Yihui, J. J. Allaire, and Garrett Grolemund. 2018. R Markdown: The Definitive Guide. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/rmarkdown.\n\n\nYes, it does disappear in this screencast, but that’s just the screencast. If it were the R console it would stay on screen the whole time.↩︎\nSomewhat counterintuitively, although cli emits messages that can be suppressed by suppressMessages(), they don’t behave precisely the same as the messages produced by message(). The default handler for base R messages sends the output to the stderr() connection and so they are often shown as the dreaded “red text” that users learn to fear. To avoid this, the default behaviour in cli sends messages to the stdout() connection, thereby avoiding this issue. However, cli does allow you to control this behaviour: see the start_app() and stop_app() functions for more information.↩︎\nAs an aside, if you’re running a site with an RSS feed it may also write malformed characters into the index.xml file as well as any generated .html file. When I encountered this problem I found that even when I “fixed” my .Rmd file the document wouldn’t re-knit, because of the problems with the xml file. Eventually I realised that I could solve the problem by deleting the index.xml file for the RSS feed and then knitting again. Sigh↩︎\nNote that there is also the fansi::set_knit_hooks() function which will set the hooks in a more user-friendly way. I don’t think there’s any reason not to use it: the only reason I didn’t is that I found it convenient to write things from scratch here so that I understood what was happening.↩︎\n",
    "preview": "posts/2021-04-18_pretty-little-clis/pretty-little-clis.jpg",
    "last_modified": "2021-09-30T15:08:53+10:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-04-05_welcome/",
    "title": "Welcome to the jungle",
    "description": "I have reluctantly decided to create a new blog. Some thoughts on \nwhat I hope to achieve, having tried my hand at blogging so very many times \nbefore",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-04-05",
    "categories": [],
    "contents": "\n\n\nI’ve decided the time has come to restart my blog. I’ve tried blogging many times before with mixed success, and this time around I’d like to avoid the mistakes of the past. I’ve set up this blog with a few principles in mind:\nSimplicity. One mistake I’ve often made is to create blogs using the fanciest tools I could find. For example, I’ve previously used Hugo based packages like blogdown and hugodown, and much as I love those tools (and use them on other sites) I want this blog to be as low-maintenance as possible. To that end I’m using distill for R markdown, and I’m keeping the default settings in most respects.\nEncapsulation. There was a time when I really liked the idea of having my blog integrated nicely with my homepage (djnavarro.net). I’ve become less keen on this because the aesthetic and technical demands of a blog aren’t always aligned with the needs of my homepage. This time I’ve set it up so that the blog.djnavarro.net subdomain corresponds to a different repository from my homepage. I’m hoping this will make blogging simpler from a technical standpoint.\nFocus. Another mistake I have made in the past is letting blogs “sprawl”, mixing personal essays with technical posts. My intention with this blog is to write technical posts only, mostly on R and data science. I’ve moved my personal writing to essays.djnavarro.net and my artwork to art.djnavarro.net. My hope is that this will make blogging easier from an emotional standpoint.\nReproducibility. A frustration I’ve had with my previous blogs is that my posts were not particularly reproducible. Source code was often missing, information about the R session was not provided, and so on. This time, I’ve set up the blog so that there is a “details” section at the bottom of each post containing links to the source code, the R session information, and a lockfile generated using renv::snapshot(). (Edit: from 2021-08-23 I’ve extended this approach so that every post actually uses the previously stored R environment)\nAt this stage I’m not entirely certain how I’ll use the blog. There are a lot of possibilities, and I have some thoughts on which ones I’d like to explore. A self-contained blog such as this seems nicely suited to teaching materials. An obvious example would be to write blog posts to accompany the data science slides and youtube videos I’ve been making. The lack of written material to go with those talks has bothered me for some time. Another possibility might be to write tutorials on generative art. I use my art website to post the art itself, but the site functions as a gallery rather than a classroom. I get a lot of people asking questions about how I make my art, and this blog might be a good place to provide answers. Those aren’t the only possibilities, of course, but they are appealing ones.\nNot sure how this will go, but fingers crossed!\n\n\nLast updated\n2021-09-17 17:05:09 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-04-05_welcome/welcome.jpg",
    "last_modified": "2021-09-30T15:08:53+10:00",
    "input_file": {}
  }
]
