[
  {
    "path": "posts/pretty-little-clis/",
    "title": "Pretty little CLIs",
    "description": "How to make a gorgeous command line interface in R using the cli package.",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-04-16",
    "categories": [],
    "contents": "\nIf you’ve been working in R for any length of time, you’ve probably realised that you sometimes need to write code that prints information to the R console, and if you’re like me you’ve learned that the simplest way to do this is to use the cat() function. Perhaps you find yourself writing code like this:\n\n\nwait <- function(seconds = 2) {Sys.sleep(seconds)}\nsend_cat_threat <- function() {\n  cat(\"Dead girls walking.\\n\"); wait()\n  cat(\" --A.\\n\")\n}\nsend_cat_threat()\n\n\n\n\nThe ominous text messages used in this post are taken from the TV show Pretty Little Liars\nIn a realistic example, the wait() function would likely be something that takes some time to complete, and the lines above and below are a polite way to let your user (even if that’s just you!) know when the waiting process starts and when it finishes. In any case, when you source a script containing this code, the first part of the message will appear on the console immediately:\n\nDead girls walking.\n\nThen after a two second delay, the console updates to reveal that the author of the threatening message is the mysterious “A.” character:\n\nDead girls walking.\n --A.\n\nIt’s not too difficult to imagine what this looks like in the console, but courtesy of the asciicast package (Csárdi et al. 2019), there’s no need to leave anything to the imagination:\n\n\n\nThis approach works perfectly well for simple text communication, but sometimes you want something that looks a little nicer. After all, if you’re planning to impersonate a dead teenager and terrorise her friends using R, you might as well put a little effort into the details, right?\nMeet the cli package\nIf you’ve worked in the tidyverse (Wickham et al. 2019) for any length of time you will have noticed that messages produced by tidyverse packages seem to have a more polished look to them. Perhaps, like me, you’ve wondered how the magic works and if you too can create pretty messages at the console. As it happens, many wonderful things become possible if you happen to have the cli package (Csárdi 2021a) as your talented assistant, and in this post I’ll talk about some of them.\nTo craft a beautiful command line interface (CLI) of our very own, the first thing we’ll need to do is load the package:\n\n\nlibrary(cli)\n\n\n\nWe can create the same threatening text message using the cli_text() function:\n\n\nsend_cli_threat <- function() {\n  cli_text(\"Dead girls walking.\"); wait()\n  cli_text(\"--A.\")\n}\nsend_cli_threat()\n\n\n\n\n\n\nSometimes you may prefer send the user short alert messages. You can create generic alerts with cli_alert() or you could be more specific by using cli_alert_info(), cli_alert_warning(), cli_alert_danger(), cli_alert_success(). Most of the text messages sent by A. in Pretty Little Liars were quite threatening, so in this case it might be more appropriate to mark it as one:\n\n\nsend_cli_warning <- function() {\n  cli_alert_warning(\"Dead girls walking.\"); wait()\n  cli_alert_warning(\"--A.\")\n}\nsend_cli_warning()\n\n\n\n\n\n\nSeparating style from structure\nThe design of cli separates style from structure: your messaging code specifies the structure associated with the message, not the superficial style. The cli_h1() command generates a “top-level” heading, the cli_h2() command generates a second level heading, cli_text()inserts basic, and so on. If we wanted the title theme to Pretty Little Liars to reveal itself gradually, we could combine a heading with text\n\n\ntitle_theme_scroll <- function() {\n  cli_h1(\"Secret, by The Pierces\"); wait()\n  cli_text(\"Got a secret, can you keep it?\"); wait()\n  cli_text(\"Swear this one you'll save\"); wait()\n  cli_text(\"Better lock it in your pocket\"); wait()\n  cli_text(\"Taking this one to the grave\"); wait()\n  cli_text(\"If I show you then I know you won't tell what I said\"); wait()\n  cli_text(\"Cause two can keep a secret if one of them is dead\"); wait()\n}\ntitle_theme_scroll()\n\n\n\n\n\n\n\nThe theme song is Secrets, the first track from the 2007 album Thirteen Tales of Love and Revenge by The Pierces\nUsing the status bar\nIn this instance, the output happens to be identical to our first example: all it does is print the lyrics to the music in the title credits from Pretty Little Liars, with a brief pause between each line. However the R console has many dark secrets, and fancier tricks than this are possible once you know a few…\n\n\nmessage_scroll <- function() {\n  cli_text(\"You found my bracelet.\"); wait()\n  cli_text(\"Now come find me.\"); wait()\n  cli_text(\"Good luck bitches.\"); wait()\n  cli_text(\"-A\"); wait()\n}\nmessage_scroll()\n\n\n\n\n\n\n\n\nmessage_inline <- function() {\n  id <- cli_status(\"\")\n  cli_status_update(id, \"You found my bracelet.\"); wait()\n  cli_status_update(id, \"Now come find me.\"); wait()\n  cli_status_update(id, \"Good luck bitches.\"); wait()\n  cli_status_update(id, \"-A\"); wait()\n  cli_status_clear(id)\n}\nmessage_inline()\n\n\n\n\n\n\nCreating spinners\n\n\ntheatrics <- function(which) {\n  spinny <- make_spinner(\n    which = which,\n    template = \"{spin} It's not over until I say it is.\"\n  )\n  for(i in 1:100) {\n    spinny$spin()\n    wait(.05)\n  }\n  spinny$finish()\n  cli_alert_success(\"Sleep tight while you still can, bitches. -A\")\n}\n\ntheatrics(\"dots2\")\n\n\n\n\n\n\nThere are quite a few possible spinners\n\n\nlist_spinners()\n\n\n [1] \"dots\"                \"dots2\"               \"dots3\"              \n [4] \"dots4\"               \"dots5\"               \"dots6\"              \n [7] \"dots7\"               \"dots8\"               \"dots9\"              \n[10] \"dots10\"              \"dots11\"              \"dots12\"             \n[13] \"line\"                \"line2\"               \"pipe\"               \n[16] \"simpleDots\"          \"simpleDotsScrolling\" \"star\"               \n[19] \"star2\"               \"flip\"                \"hamburger\"          \n[22] \"growVertical\"        \"growHorizontal\"      \"balloon\"            \n[25] \"balloon2\"            \"noise\"               \"bounce\"             \n[28] \"boxBounce\"           \"boxBounce2\"          \"triangle\"           \n[31] \"arc\"                 \"circle\"              \"squareCorners\"      \n[34] \"circleQuarters\"      \"circleHalves\"        \"squish\"             \n[37] \"toggle\"              \"toggle2\"             \"toggle3\"            \n[40] \"toggle4\"             \"toggle5\"             \"toggle6\"            \n[43] \"toggle7\"             \"toggle8\"             \"toggle9\"            \n[46] \"toggle10\"            \"toggle11\"            \"toggle12\"           \n[49] \"toggle13\"            \"arrow\"               \"arrow2\"             \n[52] \"arrow3\"              \"bouncingBar\"         \"bouncingBall\"       \n[55] \"smiley\"              \"monkey\"              \"hearts\"             \n[58] \"clock\"               \"earth\"               \"moon\"               \n[61] \"runner\"              \"pong\"                \"shark\"              \n[64] \"dqpb\"               \n\n\n\ntheatrics(\"hearts\")\n\n\n\n\n\n\nShowing cli messages in R markdown\nThroughout this post I’ve relied on asciicast to display screencasts of the R console as animated SVG files, rather than what I might normally do and rely on regular R markdown code chunks to do the work. There’s a reason for this: the R console is a terminal, and its behaviour doesn’t always translate nicely to HTML. Part of the magic of the rmarkdown package (Xie, Allaire, and Grolemund 2018) is that most of the time it is able to capture terminal output and translate it seamlessly into HTML, and we mere mortal users never notice how clever this is. However, when dealing with cli output, we run into cases where this breaks down and the law of leaky abstractions comes into play.\nAn important thing to remember about cli is that the text it produces is a message,1 so its visibility in R Markdown depends on the chunk option for messages. For this document I set my knitr defaults so that messages and warnings would be shown, but that isn’t necessarily the case for every R Markdown template. For this document I included this line in the very first chunk:2\n\n\nknitr::opts_chunk$set(message = TRUE, warning = TRUE)\n\n\n\nThis ensures that R markdown will not suppress the cli output, and as a consequence this works:\n\n\ncli_text(\"I'm still here bitches, and I know everything. -A\")\n\n\nI'm still here bitches, and I know everything. -A\n\nHowever, things are not this simple. Suppose I had used cli_alert() in the previous chunk rather than cli_text(). Unlike the basic cli_text() function, cli_alert() uses fancy symbols and colours in the output, and it is at this point that the cracks become exposed. If I had attempted to use cli_alert() in the previous chunk, the document would have failed to knit and what I would have gotten is an error message complaining about\nPCDATA invalid Char value\nIntuitively you might guess that somewhere in the R Markdown pipeline, an invalid or malformed character has been created.3 The reason this happens is that the colours and symbols used by cli, and supported in the R console, rely on ANSI escape codes, but those escape codes aren’t recognised in HTML and – apparently – they can wreak havoc when R markdown writes those characters into the HTML document. ANSI colours in R are usually generated with the help of the crayon package (Csárdi 2021b), and per the issue #24 thread that I encounter on a semi-regular basis, it can be tricky to manage. Solving it requires multiple steps. First, we need to make sure that the R Markdown document turns on crayon support:\n\n\noptions(crayon.enabled = TRUE)\n\n\n\nThis isn’t the whole solution, however, because all it does is (as I understand it) tell R Markdown to stop ignoring all the ANSI stuff. To get it to handle the ANSI code correctly we need to specify the knit hooks that explicitly tell R Markdown what to do. We can do this with the help of the fansi package (Gaslam 2021), which contains an obscurely-named function sgr_to_html() which translates a subset of the ANSI control sequences to HTML, and ignores all the others. Using this, we can write an ansi_aware_handler() function that will take an input string x and return HTML output appropriate for the R Markdown context:\n\n\nansi_aware_handler <- function(x, options) {\n  paste0(\n    \"<pre class=\\\"r-output\\\"><code>\",\n    fansi::sgr_to_html(x = x, warn = FALSE, term.cap = \"256\"),\n    \"<\/code><\/pre>\"\n  )\n}\n\n\n\nNext, we tell the knitr package (Xie 2021) to use this function whenever it needs to handle regular output, and just for good measure we’ll do the same for messages, errors, and warnings:\n\n\nknitr::knit_hooks$set(\n  output = ansi_aware_handler, \n  message = ansi_aware_handler, \n  warning = ansi_aware_handler,\n  error = ansi_aware_handler\n)\n\n\n\nNow that we have done all this obnoxious setup, my R Markdown document renders cli_alert() and friends correctly:\n\n\ncli({\n  cli_alert(\"I'm still here bitches, and I know everything. -A\")\n  cli_alert_info(\"I'm still here bitches, and I know everything. -A\")\n  cli_alert_warning(\"I'm still here bitches, and I know everything. -A\")\n  cli_alert_danger(\"I'm still here bitches, and I know everything. -A\")\n  cli_alert_success(\"I'm still here bitches, and I know everything. -A\")\n})\n\n\n→ I'm still here bitches, and I know everything. -A\nℹ I'm still here bitches, and I know everything. -A\n! I'm still here bitches, and I know everything. -A\nx I'm still here bitches, and I know everything. -A\n✓ I'm still here bitches, and I know everything. -A\n\n\nThe formatting for blockquotes is preserved:\n\n\ncli({\n  cli_blockquote(\n    quote = \"Friends share secrets, that's what keeps us close\",\n    citation = \"Alison\"\n  )\n  cli_blockquote(\n    quote = \"Popular in life and death\",\n    citation = \"Spencer\"\n  )\n})\n\n\n\n    “Friends share secrets, that's what keeps us close”\n    — Alison\n\n    “Popular in life and death”\n    — Spencer\n\n\n\n\n\nCsárdi, Gábor. 2021a. Cli: Helpers for Developing Command Line Interfaces. https://CRAN.R-project.org/package=cli.\n\n\n———. 2021b. Crayon: Colored Terminal Output. https://CRAN.R-project.org/package=crayon.\n\n\nCsárdi, Gábor, Romain Francois, Mario Nebl, and Marcin Kulik. 2019. Asciicast: Create ’Ascii’ Screen Casts from R Scripts. https://CRAN.R-project.org/package=asciicast.\n\n\nGaslam, Brodie. 2021. Fansi: ANSI Control Sequence Aware String Functions. https://CRAN.R-project.org/package=fansi.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nXie, Yihui. 2021. Knitr: A General-Purpose Package for Dynamic Report Generation in R. https://yihui.org/knitr/.\n\n\nXie, Yihui, J. J. Allaire, and Garrett Grolemund. 2018. R Markdown: The Definitive Guide. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/rmarkdown.\n\n\nSomewhat counterintuitively, although cli emits messages that can be suppressed by suppressMessages(), they don’t behave precisely the same as the messages produced by message(). The default handler for base R messages sends the output to the stderr() connection and so they are often shown as the dreaded “red text” that users learn to fear. To avoid this, the default behaviour in cli sends messages to the stdout() connection, thereby avoiding this issue. However, cli does allow you to control this behaviour: see the start_app() and stop_app() functions for more information.↩︎\nThat chunk is not visible in the output because I set include=FALSE in the options for that chunk↩︎\nAs an aside, if you’re running a site with an RSS feed it may also write malformed characters into the index.xml file as well as any generated .html file. When I encountered this problem I found that even when I “fixed” my .Rmd file the document wouldn’t re-knit, because of the problems with the xml file. Eventually I realised that I could solve the problem by deleting the index.xml file for the RSS feed and then knitting again. Sigh↩︎\n",
    "preview": {},
    "last_modified": "2021-04-18T15:23:49+10:00",
    "input_file": "pretty-little-clis.utf8.md"
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to the jungle",
    "description": "I have reluctantly decided to create a new blog. Some thoughts on \nwhat I hope to achieve, having tried my hand at blogging so very many times \nbefore",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-04-05",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\n\nI’ve decided the time has come to restart my blog. I’ve tried blogging many times before with mixed success, and this time around I’d like to avoid the mistakes of the past. I’ve set up this blog with a few principles in mind:\nSimplicity. One mistake I’ve often made is to create blogs using the fanciest tools I could find. For example, I’ve previously used Hugo based packages like blogdown and hugodown, and much as I love those tools (and use them on other sites) I want this blog to be as low-maintenance as possible. To that end I’m using distill for R markdown, and I’m keeping the default settings in most respects.\nEncapsulation. There was a time when I really liked the idea of having my blog integrated nicely with my homepage (djnavarro.net). I’ve become less keen on this because the aesthetic and technical demands of a blog aren’t always aligned with the needs of my homepage. This time I’ve set it up so that the blog.djnavarro.net subdomain corresponds to a different repository from my homepage. I’m hoping this will make blogging simpler from a technical standpoint.\nFocus. Another mistake I have made in the past is letting blogs “sprawl”, mixing personal essays with technical posts. My intention with this blog is to write technical posts only, mostly on R and data science. I’ve moved my personal writing to essays.djnavarro.net and my artwork to art.djnavarro.net. My hope is that this will make blogging easier from an emotional standpoint.\nReproducibility. A frustration I’ve had with my previous blogs is that my posts were not particularly reproducible. Source code was often missing, information about the R session was not provided, and so on. This time, I’ve set up the blog so that there is a “details” section at the bottom of each post containing links to the source code, the R session information, and a lockfile generated using renv::snapshot().\nAt this stage I’m not entirely certain how I’ll use the blog. There are a lot of possibilities, and I have some thoughts on which ones I’d like to explore. A self-contained blog such as this seems nicely suited to teaching materials. An obvious example would be to write blog posts to accompany the data science slides and youtube videos I’ve been making. The lack of written material to go with those talks has bothered me for some time. Another possibility might be to write tutorials on generative art. I use my art website to post the art itself, but the site functions as a gallery rather than a classroom. I get a lot of people asking questions about how I make my art, and this blog might be a good place to provide answers. Those aren’t the only possibilities, of course, but they are appealing ones.\nNot sure how this will go, but fingers crossed! 🤞\n\nLast updated\n2021-04-06 13:19:30 AEST\nDetails\nsource code, session info, lockfile\n\n\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-06T13:19:36+10:00",
    "input_file": {}
  }
]
