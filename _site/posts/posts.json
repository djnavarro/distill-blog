[
  {
    "path": "posts/2022-03-04_data-types-in-arrow-and-r/",
    "title": "Data types in Arrow and R",
    "description": "A post describing fundamental data types in R and Apache Arrow, and how data is exchanged between the two systems. It covers conversion of logicals, integers, floats, decimals, strings, date, and times, among other things. It talks about higher level structures like tables, data frames, and so on. For reasons that now escape me, esoteric authors are quoted, and I try to bribe the audience into reading the whole thing by adding artwork. This post is, um... long",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2022-03-04",
    "categories": [],
    "contents": "\n\nContents\nRegarding magic\nDefining Schemas\nWhy mapping languages is hard\nA little bit of big picture\nObject oriented programming in arrow\nTable, ChunkedArray, and Scalar\n\nLogical types\nInteger types\n[Arrow] Eight types of integer\n[R] One integer class\nWhen integer translation is easy\nWhen integer translation is hard\n\nNumeric types\nFloating point numbers and the desert of the reals\n[R] The numeric class\n[Arrow] The float64 type\n[Arrow] The float32 and float16 types\nDecimal floating point numbers?\n[Arrow] The decimal fixed-point types\n\nCharacter types\n[R] The character class\n[Arrow] The utf8 type\n[Arrow] The large_utf8 type\n\nDate/time types\n[R] The Date class\n[R] The POSIXct class\n[R] The POSIXlt class\n[Arrow] The date32 type\n[Arrow] The date64 type\n[Arrow] The timestamp type\nUm, but what about POSIXlt?\n\nDuration types\n[R] The difftime class\n[Arrow] The duration type\n[R] The hms::hms class\n[Arrow] The time32 and time64 types\n\nOther types\nThe magic goes away\n\n\n\n\n\nManuals for translating one language into another can be set up in divergent ways, all compatible with the totality of speech dispositions, yet incompatible with one another      – William Van Orman Quine, 1960, Word and Object\n\n\nAt the 2018 useR! conference in Brisbane, Roger Peng gave a fabulous keynote talk on teaching R to new users in which he provided an overview of the history of the language and how it is used in the broader community. One thing that stood out to me in his talk – and I’ve seen reflected in other data – is that R is unusual as a language because it’s not designed primarily for programmers. Software engineering practices have now become widespread in the R community, and that’s a good thing. Nevertheless, a very large proportion of the R community don’t have a traditional computer science background – and that’s okay! In fact, given the goals of the language that’s a good thing too.\nR is a language designed with a practical goal in mind: it is a tool for statistical programming and data analysis. Because of this design focus, R users tend to care most deeply about the tasks that make up their day to day jobs. Few of us care about the IEEE 754 standard for encoding floating point numbers. R users are not typically interested in the big-endian/little-endian distinction. The purpose of R as a high level statistical programming environment is to abstract away from these things, and to allow users to focus on data cleaning, wrangling, and visualisation. R tries to help you get to your data as easily as possible, build models for your data, report those models reliably, and so on. Because that’s the job.\nBut.\nThere’s always a “but”, isn’t there?\n\n\n\n\nFigure 1: Art\n\n\n\nAll images in this post are my own, including the artwork, and though I haven’t formally released the art as part of series (and hence not specified a licence for the series as a whole), these specific pieces are covered by the same CC-BY licence that applies to the rest of the post\n\nOne of the huge changes in the data science ecosystem in recent years is the change in scale of our data sets. Data sets can now easily encompass billions of rows, and surpass the ability of your machine (and R) to hold in memory. Another huge change in the ecosystem is the proliferation of tools. Data sets have to be passed from one system to another, and when those data sets are large, problems follow. Apache Arrow solves these problems by providing a multi-language toolbox for data exchange and data analysis. It’s a toolbox designed for a big data environment, and a many-language environment. From the perspective of an R user, it supplies the arrow package that provides an interface to Apache Arrow, and through that package allows you to have access to all the other magic that Arrow exposes. It’s an extremely powerful toolbox… but to use it effectively you do need to learn more of those low-level concepts that we as R users like to skim over.\n\nIn this post I use boldfaced text to denote the names of R packages such as arrow and dplyr, as well as C++ library such as libarrow\nThis post is an attempt to fill that gap for you! It’s a long form post, closer to a full length article than a typical blog. My goals in this post are to:\nWalk you through (some of!) the low level implementation details for basic data types: how R represents an integer or a numeric, or a date/time object, etc\nDiscuss how and why Arrow and R sometimes make different choices in these details\nShow you how the arrow package translates between R and Arrow\nInclude lots of pretty art, because lets face it, this isn’t an exciting topic!\nThis post isn’t intended to be read in isolation. It’s the third part of a series I have been writing on Apache Arrow and R, and it probably works best if you’ve read the previous two. I’ve made every effort to make this post self-contained and self-explanatory, but it does assume you’re comfortable in R and have a little bit of knowledge about what the arrow package does. If you’re not at all familiar with arrow, you may find it valuable to read the first post in the series, which is a getting started post, and possibly the second one that talks about the arrow dplyr backend.\nStill keen to read? I haven’t scared you off?\nNo?\nFabulous! Then read on, my loves!\n\n\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(arrow)\n\n\n\n\n\n\n\nRegarding magic\nConsider this piece of magic. I have a csv file storing a data set. I import the data set into R using whatever my favourite csv reader function happens to be:\n\n\nmagicians <- read_csv_arrow(\"magicians.csv\")\nmagicians\n\n\n# A tibble: 65 × 6\n   season episode title                      air_date   rating viewers\n    <int>   <int> <chr>                      <date>      <dbl>   <dbl>\n 1      1       1 Unauthorized Magic         2015-12-16    0.2    0.92\n 2      1       2 The Source of Magic        2016-01-25    0.4    1.11\n 3      1       3 Consequences of Advanced … 2016-02-01    0.4    0.9 \n 4      1       4 The World in the Walls     2016-02-08    0.3    0.75\n 5      1       5 Mendings, Major and Minor  2016-02-15    0.3    0.75\n 6      1       6 Impractical Applications   2016-02-22    0.3    0.65\n 7      1       7 The Mayakovsky Circumstan… 2016-02-29    0.3    0.7 \n 8      1       8 The Strangled Heart        2016-03-07    0.3    0.67\n 9      1       9 The Writing Room           2016-03-14    0.3    0.71\n10      1      10 Homecoming                 2016-03-21    0.3    0.78\n# … with 55 more rows\n\nThen I decide to “copy the data into Arrow”.1 I do that in a very predictable way using the arrow_table() function supplied by the arrow package:\n\n\narrowmagicks <- arrow_table(magicians)\narrowmagicks\n\n\nTable\n65 rows x 6 columns\n$season <int32>\n$episode <int32>\n$title <string>\n$air_date <date32[day]>\n$rating <double>\n$viewers <double>\n\nThis is exactly the output I should expect, but the longer I think about it the more it seems to me that something quite remarkable is going on. Some magic is in play here, and I want to know how it works.\nTo understand why I’m so curious, consider the two objects I now have. The magicians data set is a data frame (a tibble, technically) stored in R. The arrowmagicks data set, however, is a pointer to a data structure stored in Arrow. That data structure is a Table object. Table objects in Arrow are roughly analogous to data frames – both represent tabular data with columns that may be of different types – but they are not the same. The columns of a Table are built from objects called ChunkedArrays that are in turn constructed from Arrays, and those Arrays can contain Scalar objects. In other words, to move data from one language to another an act of translation is required, illustrated below:\n\nIt’s not standard, but since this is a post about data types, I’ll italicise the names of data types in both R and Arrow (e.g., data.frame, Table). It gets a bit tiresome, but I think it’s helpful\n\n\n\nFigure 2: A miniature translation guide. On the left a data frame in R is shown: it is comprised of three columns. Each columns is an R vector. We use the term ‘element’ to refer to any length-1 constituent of a vector, even though it isn’t really a distinct object in its own right. On the right is a Table in Arrow: it too is comprised of three columns, encoded as ChunkedArrays. Each ChunkedArray is comprised of one or more Arrays, and each Array contains one or more Scalars, which (unlike elements of R vectors) are distinct objects. The data structure that translates one into the other is called a Schema.\n\n\n\nIn this post I’m not going to talk much about the difference between Arrays and ChunkedArrays, or why Arrow organises Tables this way (that will be the topic of a later post). For now it’s enough to recognise that Arrow does have this additional structure: the Table data type in Arrow is not equivalent to the data frame class in R, so a little work is required to map one to the other.\nA similar story applies when we look at the contents of the data set. The translation process doesn’t just apply to the “container” object (i.e., the data frame in R and the Table in Arrow), it also applies to the values that the object contains. If we look at the how the columns of magicians and arrowmagicks are labelled, we see evidence of this translation. The integer columns in R have been mapped to int32 columns in Arrow, Date columns in R become date32 columns in Arrow, and so on.\n\nVariable names like arrowmagicks and function calls like arrow_table() are shown in monospace typewriter font\nThere’s quite a lot of complexity to the translation process, yet it all seems to work seamlessly, and it works both ways. I can pull the arrowmagicks data back into R and recover the original data:\n\n\ncollect(arrowmagicks)\n\n\n# A tibble: 65 × 6\n   season episode title                      air_date   rating viewers\n    <int>   <int> <chr>                      <date>      <dbl>   <dbl>\n 1      1       1 Unauthorized Magic         2015-12-16    0.2    0.92\n 2      1       2 The Source of Magic        2016-01-25    0.4    1.11\n 3      1       3 Consequences of Advanced … 2016-02-01    0.4    0.9 \n 4      1       4 The World in the Walls     2016-02-08    0.3    0.75\n 5      1       5 Mendings, Major and Minor  2016-02-15    0.3    0.75\n 6      1       6 Impractical Applications   2016-02-22    0.3    0.65\n 7      1       7 The Mayakovsky Circumstan… 2016-02-29    0.3    0.7 \n 8      1       8 The Strangled Heart        2016-03-07    0.3    0.67\n 9      1       9 The Writing Room           2016-03-14    0.3    0.71\n10      1      10 Homecoming                 2016-03-21    0.3    0.78\n# … with 55 more rows\n\nIn this example the translation back and forth “just works”. You really don’t have to think too much about the subtle differences in how Arrow and R “think about the world” and how their data structures are organised. And in general that’s what we want in a multi-language toolbox: we want the data analyst to be thinking about the data, not the cross-linguistic subtleties of the data structures!\nThat being said, it’s also valuable to give the data analyst flexibility. And that means we’re going to need to talk about Schemas. As shown in the “translation diagram” above, Schemas are the data structure arrow uses to govern the translation between R and Arrow, and since I’m going to be talking about data “on the R side” and data “on the Arrow” side a lot, it will be helpful to have some visual conventions to make it a little clearer. Throughout the post you’ll see diagrams showing the default mappings that the arrow package uses when converting data columns from R to Arrow and vice versa. In each case I’ll show R data types on the left hand side (against a blue background) and Arrow data types on the right hand side (against an orange background), like this:\n\n\n\nFigure 3: Illustration of the graphical convention used in the later diagrams, showing R on the left side (against a blue background) and Arrow on the right side (against an orange background).\n\n\n\n\nDefining Schemas\nThe arrow package makes very sensible default choices about how to translate an R data structure into an Arrow data structure, but those choices can never be more than defaults because of the fundamental fact that the languages are inherently different. The quote about the indeterminacy of translation at the top of this post was originally written about natural languages, but I think it applies in programming too. There’s no single rulebook that tells you how to translate between R and Arrow: there can’t be.2\nSuppose that I knew that there would in fact be a “Season 5.1648” coming, consisting of a single episode that would air not only on a specific date, but at a specific time that would – for some bizarre reason3 – be important to encode in the data. Knowing that this new data point is coming, I’d perhaps want my Arrow data to encode season as a numeric variable, and I’d need to encode the air_date field using a date type that implicitly encodes time of day. I can do this with the schema() function:\n\n\ntranslation <- schema(\n  season = float64(), # not the default\n  episode = int32(),\n  title = utf8(), \n  air_date = date64(), # not the default\n  rating = float64(),\n  viewers = float64()\n)\n\n\n\nNow I can use my schema to govern the translation:\n\n\narrowmagicks2 <- arrow_table(magicians, schema = translation)\narrowmagicks2\n\n\nTable\n65 rows x 6 columns\n$season <double>\n$episode <int32>\n$title <string>\n$air_date <date64[ms]>\n$rating <double>\n$viewers <double>\n\nThe output may not make complete sense at this point, but hopefull the gist of what I’ve done should be clear. The season is no longer stored as an integer (it’s now a numeric type), and the air_date no longer uses “day” as the unit of encoding, it uses “ms” (i.e., millisecond). I’ve accomplished my goals. Yay!\nThis is of course a toy example, as are all the other examples you’ll encounter in this post. But the underlying issues are important ones!\n\n\n\n\nFigure 4: Art\n\n\n\n\nWhy mapping languages is hard\n\nOrganising the world into concepts (or data structures) is hard.4 We define ontologies that impose order on a chaotic world, but those structures are rarely adequate to describe the world as it is. While doing background research for this post I spent a little time reading various sections from An Essay Towards a Real Character, and a Philosophical Language, a monograph written by John Wilkins in 1668 that makes a valiant (but doomed… oh so doomed) attempt to organise all the categories of things and propose a mechanism by which we could describe them within a single universal language. The classification systems he came up with were… not great. For example, he divided BEASTS into two categories: VIVIPAROUS beasts are those that bear live young, whereas OVIPAROUS beasts are those that lay eggs. The viviparous ones could be subdivided into WHOLE-FOOTED ones and CLOVEN-FOOTED ones. The cloven-footed beasts could be subdivided into those that were RAPACIOUS and those that were not. RAPACIOUS types could be of the CAT-KIND or the DOG-KIND.\nSuffice it to say the poor man had never encountered a kangaroo.\nThe problem with trying to construct universal ontologies is that these things are made by humans, and humans have a perspective that is tied to their own experience and history. As a 17th century English gentleman, Wilkins saw the world in a particular way, and the structure of the language he tried to construct reflected that fact.\nI am of course hardly the first person to notice this. In 1952 the Argentinian author Jorge Luis Borges published a wonderful essay called The Analytical Language of John Wilkins that both praises Wilkins’ ambition and then carefully illustrates why it is necessarily doomed to fail. Borges’ essay describes a classification system from an fictitious “Celestial Emporium of Benevolent Knowledge” which carves up the beasts as follows:\n\nIn its remote pages it is written that the animals are divided into: (a) belonging to the emperor, (b) embalmed, (c) tame, (d) sucking pigs, (e) sirens, (f) fabulous, (g) stray dogs, (h) included in the present classification, (i) frenzied, (j) innumerable, (k) drawn with a very fine camelhair brush, (l) et cetera, (m) having just broken the water pitcher, (n) that from a long way off look like flies\n\nNow, it’s pretty unlikely that any human language would produce a classification system quite as chaotic as Borges’ fictional example, but the point is well made. Actual classification systems used in different languages and cultures are very different to one another and often feel very alien when translated. It’s a pretty fundamental point, and I think it applies to programming languages too.5 Every language carries with it a set of assumptions and structures that it considers “natural”, and translation across the boundaries between languages is necessarily a tricky business.6\n\nA little bit of big picture\nBefore we get to “moving data around” part it’s helpful to step back a little and recognise that R and Arrow are designed quite differently. For starters, the libarrow library to which the arrow package provides bindings is written in C++, and C++ is itself a different kind of language than R. And in a sense, that’s actually the natural place to start because it influences a lot of things in the design of arrow.\n\nObject oriented programming in arrow\nOne of ways in which C++ and R differ is in how each language approaches object oriented programming (OOP). The approach taken in C++ is an encapsulated OOP model that is common to many programming languages: methods belong to objects. Anyone coming from outside R is probably most familiar with this style of OOP.\nThe approach taken in R is… chaotic. R has several different OOP systems that have different philosophies, and each system has its own strengths and weaknesses.7 The most commonly used system is S3, which is a functional OOP model: methods belong to generic functions like print(). Most R users will be comfortable with S3 because it’s what we see most often. That being said, there are several other systems out there, some of which adopt the more conventional encapsulated OOP paradigm. One of the most popular ones is R6, and it works more like the OOP systems seen in other languages.\nThe arrow package uses both S3 and R6, but it uses them for quite different things. Whenever arrow does something in an “R-native” way, S3 methods get used a lot. For example, in my earlier post on dplyr bindings for Arrow I talked about how arrow supplies a dplyr engine: this works in part by supplying S3 methods for various dplyr functions that are called whenever a suitable Arrow object gets passed to dplyr. The interface between arrow and dplyr uses S3 because this context is “R like”. However, this isn’t a post about that aspect of arrow, so we won’t need to talk about S3 again in this post.\nHowever, arrow has a second task, which is to interact with libarrow, the Arrow C++ library. Because the data structures there all use encapsulated OOP as is conventional in C++, it is convenient to adhere to those conventions within the arrow package. Whenever arrow has to interact with libarrow, it’s useful to be as “C++ like” as possible, and this in turn means that the interface between arrow and libarrow is accomplished using R6. So we will be seeing R6 objects appear quite often in this post.8\n\nTable, ChunkedArray, and Scalar\nYou may be wondering what I mean when I say that R6 objects are used to supply the interface between R and Arrow. I’ll try to give some concrete examples. Let’s think about the arrow_table() function. At the start of the post I used this function to translate an R data frame into an Arrow Table, like this:\n\n\narrow_table(magicians)\n\n\n\nThis is a natural way of thinking about things in R, but the arrow_table() function doesn’t actually do the work. It’s actually just a wrapper function. Within the arrow package is an R6 class generator object called Table,9 and its job is to create tables, modify tables, and so on. You can create a table by using the create() method for Table. In other words, instead of calling arrow_table() I could have done this:\n\n\nTable$create(magicians)\n\n\n\nand I would have ended up with the same result.\nThe same pattern appears throughout the arrow package. When I used the schema() function earlier, the same pattern was in play. There is an R6 class generator called Schema, and it too has a create() method. I could have accomplished the same thing by calling Schema$create().\nI could go on like this for some time. Though I won’t talk about all of them in this post, there are R6 objects for Dataset, RecordBatch, Array, ChunkedArray, Scalar, and more. Each of these provides an interface to a data structure in Arrow, and while you can often solve all your problems without ever interacting with these objects, it’s very handy to know about them and feel comfortable using them. As the post goes on, you’ll see me doing that from time to time.\nBut enough of that! It’s time to start moving data around…\n\n\n\n\nFigure 5: Art\n\n\n\n\nLogical types\nAt long last we arrive at the point where I’m talking about the data values themselves, and the simplest kind of data to talk about are those used to represent truth values. In R, these are called logical data and can take on three possible values: TRUE and FALSE are the two truth values, and NA is used to denote missing data.10 In a moment I’ll show you how to directly pass individual values from R to Arrow, but for the moment let’s stick to what we know and pass the data across as part of a tabular data structure. Here’s a tiny tibble, with one column of logical values:\n\n\ndat <- tibble(values = c(TRUE, FALSE, NA))\ndat\n\n\n# A tibble: 3 × 1\n  values\n  <lgl> \n1 TRUE  \n2 FALSE \n3 NA    \n\nWe’re going to pass this across to Arrow using arrow_table() but before we do let’s talk about what we expect to happen when the data arrive at the other side.\nIn this case, it’s quite straightforward. Arrow has a boolean type that has truth values true and false that behave the same way as their cousins in R. Just like R, Arrow allows missing values, though they’re called null values in Arrow. Unlike basically every other example we’re going to see in this post, this one is straightforward because the mapping is perfect. Unless you do something to override it, the arrow package will map an R logical to an Arrow boolean and vice versa. Here’s the diagram I use to describe it:\n\n\n\nFigure 6: Default mappings for logical types\n\n\n\nSeems to make sense, right? So let’s stop talking about it and create the corresponding Table in Arrow:\n\n\ntbl <- arrow_table(dat)\ntbl\n\n\nTable\n3 rows x 1 columns\n$values <bool>\n\nHm. Okay that’s a little underwhelming as output goes? I’d like to see the actual values please. Happily the arrow package supplies a $ operator for Table objects so we can extract an individual column from tbl the same way we can from the original R object dat. Let’s try that:\n\n\ntbl$values\n\n\nChunkedArray\n[\n  [\n    true,\n    false,\n    null\n  ]\n]\n\nThe output looks a little different to what we’d get when printing out a single column of a tibble (or data frame), but it’s pretty clear that we’ve extracted the right thing. A single column inside an Arrow Table is stored as a ChunkedArray, so this looks right.\nYay us!\nAt this point, it’s handy to remember that the arrow_table() function that I used to move the data into Arrow is really just a wrapper that allows you to access some of the Table functionality without having to think about R6 too much. I also mentioned there’s a class generator called ChunkedArray object and a chunked_array() wrapper function. In hindsight, I probably didn’t need to bother creating the tibble and porting that over as a Table. I could have created a logical vector in R and port that over as a ChunkedArray directly:\n\n\nvalues <- c(TRUE, FALSE, NA)\nchunked_array(values)\n\n\nChunkedArray\n[\n  [\n    true,\n    false,\n    null\n  ]\n]\n\nThat’s a cleaner way of doing things. If you want a Table, use Table and its wrappers. If you want a ChunkedArray, use ChunkedArray and its wrappers. There’s no need to over-complicate things.\nSpeaking of which… later in the post, I’ll often want to send single values to Arrow. In those cases I don’t want to create a ChunkedArray, or even the simpler unchunked Array type. What I want to pass is a Scalar.\nIt’s worth unpacking this a little. Unlike some languages, R doesn’t really make a strong distinction between “vectors” and “scalars”: an R “scalar” is just a vector of length one. Arrow is stricter, however. A ChunkedArray is a container object with one or more Arrays, and an Array is also a container object with one or more Scalars. If it helps, you can think of it a little bit like working with lists in R: if I have a list lst, then lst[1] is still a list. It doesn’t return the contents of the list. If I want to extract the contents I have to use lst[[1]] to pull them out. Arrow Arrays contain Scalars in a fashion that we would call “list-like” in R.\nIn any case, the important thing to recognise is that arrow contains a class generator object called Scalar, and it works the same way as the other ones. The one difference is that there aren’t any wrapper functions for Scalar, so I’ll have to use Scalar$create() directly:\n\n\nScalar$create(TRUE, type = boolean())\n\n\nScalar\ntrue\n\nIn this example I didn’t really need to explicitly specify that I wanted to import the data as type = boolean(). The value TRUE is an R logical, and the arrow default is to map logicals onto booleans. I only included it here because I wanted to call attention to the type argument. Any time that you want to import data as a non-default type, you need to specify the type argument. If you look at the list of Apache Arrow data types on the arrow documentation page, you’ll see quite a lot of options. For now, the key thing to note is that the type argument expects you to call one of these functions.\nAnyway, that’s everything I had to say about logicals. Before moving on though, I’m going to write my own wrapper function, and define scalar() as an alias for Scalar$create():\n\n\nscalar <- function(x, type = NULL) {\n  Scalar$create(x, type)\n}\n\n\n\nThe main reason I’m doing that is for convenience, because in this post I’m actually going to need this wrapper function a lot. So I should probably check… does it work?\n\n\nscalar(TRUE)\n\n\nScalar\ntrue\n\nAwesome!\n\n\n\n\nFigure 7: Art\n\n\n\n\nInteger types\nWhen translating R logicals to Arrow booleans, there aren’t a lot of conceptual difficulties. R has one data structure and Arrow has one data structure, and they’re basically identical. This is easy. Integers, however, are a little trickier because there’s no longer an exact mapping between the two languages. Base R provides one integer type, but Arrow provides eight distinct integer types that it inherits from C++. As a consequence it will no longer be possible to provide one-to-one mappings between R and Arrow, and some choices have to be made. As we’ll see in this section, the arrow package tries very hard to set sensible default choices, and in most cases these will work seamlessly. It’s not something you actually have to think about much. But, as my dear friend Dan Simpson11 reminds me over and over with all things technical, “God is present in the sweeping gestures but the Devil is in the details”.\nIt is wise to look carefully at the details, so let’s do that.\n\n[Arrow] Eight types of integer\nTo make sense of the different types, it helps to take a moment to think about how integers are represented in a binary format. Let’s suppose we allocate 8 bits to specify an integer. If we do that, then there are \\(2^8 = 256\\) unique binary patterns we can create with these bits. Because of this, there is a fundamental constraint: no matter how we choose to set it up, 8-bit integers can only represent 256 distinct numbers. Technically, we could choose any 256 numbers we like, but in practice there are only two schemes used for 8-bit integers: “unsigned” 8-bit integers (uint8) use those bits to represent integers from 0 to 255, whereas “signed” 8-bit integers (int8) can represent integers from -128 to 127.\nMore generally, an unsigned n-bit integer can represent integers from 0 to \\(2^n - 1\\), whereas a signed n-bit integer can represent integers from \\(-2^{n-1}\\) to \\(2^{n-1} - 1\\). Here’s what that looks like for all the integer types supported by Arrow:\nDescription\nName\nSmallest Value\nLargest Value\n8 bit unsigned\nuint8\n0\n255\n16 bit unsigned\nuint16\n0\n65535\n32 bit unsigned\nuint32\n0\n4294967295\n64 bit unsigned\nuint64\n0\n18446744073709551615\n8 bit signed\nint8\n-128\n127\n16 bit signed\nint16\n-32768\n32767\n32 bit signed\nint32\n-2147483648\n2147483647\n64 bit signed\nint64\n-9223372036854775808\n9223372036854775807\n\n[R] One integer class\nOn the R side, the integer type supplied by base R is a 32 bit signed integer, and has a natural one-to-one mapping to the Arrow int32 type. Because of this, the arrow default is to convert an R integer to an Arrow int32 and vice versa. Here’s an example. I’ve been watching Snowpiercer lately, and the train is currently 1029 cars long so let’s pass the integer 1029L from R over to Arrow\n\n\nsnowpiercer <- scalar(1029L)\nsnowpiercer\n\n\nScalar\n1029\n\nLet’s inspect the type field of the snowpiercer object in order to determine what type of object has arrived in Arrow:\n\n\nsnowpiercer$type\n\n\nInt32\nint32\n\nWe can apply the S3 generic function as.vector() to snowpiercer to pull the data back into R,12 and hopefully it comes as no surprise to see that we get the same number back:\n\n\nas.vector(snowpiercer)\n\n\n[1] 1029\n\nWe can take this one step further to check that the returned object is actually an R integer by checking its class(), and again there are no surprises:\n\n\nsnowpiercer %>% \n  as.vector() %>% \n  class()\n\n\n[1] \"integer\"\n\nAs you can see, the default behaviour in arrow is to translate an R integer into an Arrow int32, and vice versa. That part, at least, is not too complicated.\nThat being said, it’s worth unpacking some of the mechanics of what I’m doing with the code here. Everything I’ve shown above is R code, so it’s important to keep it firmly in mind that when I create the snowpiercer object there are two different things happening: a data object is created inside Arrow, and a pointer to that object is created inside R. The snowpiercer object is that pointer (it’s actually an R6 object). When I called snowpiercer$type in R, the output is telling me that the data object in Arrow has type int32. There’s a division of responsibility between R and Arrow that always needs to be kept in mind.\nNow, in this particular example there’s an element of silliness because my data object is so tiny. There was never a good reason to put the data in Arrow, and the only reason I’m doing it here is for explanatory purposes. But in real life (like in the TV shoe), snowpiercer might in fact be a gargantuan monstrosity over which you have perilously little control due to it’s staggering size. In that case it makes a big difference where the data object is stored. Placing the data object in Arrow is a little bit like powering your 1029-car long train using the fictitious perpetual motion engine from the show: it is a really, really good idea when you have gargantuan data.13\n\nWhen integer translation is easy\nWhat about the other seven C++ integer types? This is where it gets a little trickier. The table above illustrates that some integer types are fully contained within others: unsurprisingly, every number representable by int16 can also be represented by int32, so we can say that the int16 numbers are fully “contained” by (i.e. are a proper subset of) the int32 numbers. Similarly, uint16 is contained by uint32. There are many cases where an unsigned type is contained by a signed type: for instance, int32 contains all the uint16 numbers. However, because the unsigned integers cannot represent negative numbers, the reverse is never true. So we can map out the relationships between the different types like this:\n\n\n\nFigure 8: Containment relationships between the integer types.\n\n\n\nWhenever type A contains type B, it’s possible to transform an object of type B into an object of type A without losing information or requiring any special handling. R integers are 32 bit signed integers, which means it’s possible to convert Arrow data of types int32, int16, int8, uint16, and uint8 to R integers completely painlessly. So for these data types the arrow defaults give us this relationship:\n\n\n\nFigure 9: Default mappings for some integer types\n\n\n\nThese are the cases where it is easy.\n\nWhen integer translation is hard\nOther integer types are messier. To keep things nice and simple, what we’d like to do is to map the Arrow uint32, uint64, and int64 types onto the R integer type. Sometimes that’s possible: if all the stored values fall within the range of values representable by R integers (i.e., are between -2147483648 and 2147483647) then we can do this, and that’s what arrow does by default. However, if there are values that “overflow” this range, then arrow will import the data as a different type. That leads to a rather messy diagram, I’m afraid:\n\n\n\nFigure 10: Default mappings for other integer types. The asterisk notation here is intended to indicate that the path arrow follows can depend on the data values and other settings.\n\n\n\nTranslations become messy when the boxes in one language don’t quite match up to the content expressed in another. Sometimes it’s just easier to see the system in action, so let’s write a little helper function:\n\n\ntranslate_integer <- function(value, type) {\n  fn <- function(value, type) {\n    tibble(\n      value = value,\n      arrow_type = scalar(value, type)$type$name,\n      r_class = scalar(value, type) %>% as.vector() %>% class()\n    )\n  }\n  purrr::map2_dfr(value, type, fn)\n}\n\n\n\nThe translate_integer() function takes a value vector and a type list as input, and it returns a tibble that tells you what Arrow type was created from each input, and what R class gets returned when we import that Arrow object back into R. I’ll pass the inputs in as doubles originally, but as you’ll see they always get imported to Arrow as integer types because that’s what I’m telling arrow to do. So let’s start with an easy case. The number 10 is unproblematic because it’s very small, and arrow never encounters any problem trying to pull it back as an R integer:\n\n\ntranslate_integer(\n  value = c(10, 10, 10, 10), \n  type = list(uint8(), uint32(), uint64(), int64())\n)\n\n\n# A tibble: 4 × 3\n  value arrow_type r_class\n  <dbl> <chr>      <chr>  \n1    10 uint8      integer\n2    10 uint32     integer\n3    10 uint64     integer\n4    10 int64      integer\n\nOkay, that makes sense. If the numbers can be represented using the R integer class then that’s what arrow will do. Why make life unnecessarily difficult for the user?\nNow let’s increase the number to a value that is too big to store as a signed 32-bit integer. This is a value that R cannot represent as an integer, but Arrow can store as a uint32, uint64 or int64. What happens when we try to pull that object back into R?\n\n\ntranslate_integer(\n  value = c(3000000000, 3000000000, 3000000000), \n  type = list(uint32(), uint64(), int64())\n)\n\n\n# A tibble: 3 × 3\n       value arrow_type r_class  \n       <dbl> <chr>      <chr>    \n1 3000000000 uint32     numeric  \n2 3000000000 uint64     numeric  \n3 3000000000 int64      integer64\n\nThe first two rows seem intuitive. In base R, whenever an integer overflows and becomes too large to store, R will coerce it to a double. This is exactly the same behaviour we’d observe if the data had never left R at all. The third row, however, might come as a bit of a surprise. It certainly surprised me the first time I encountered it. Until very recently I did not know that R even had an integer64 class. This class is supplied by the bit64 package, and although I’m not going to talk about it in any detail here, it provides a mechanism to represent signed 64-bit integers in R. However, the one thing I will mention is the fact that the existence of the integer64 class opens up the possibility of forcing arrow to always map the integer64 class to the int64 type and vice versa. If you set\n\n\noptions(arrow.int64_downcast = FALSE)\n\n\n\nit will change the arrow default so that int64 types are always returned as integer64 classes, even when the values are small enough that the data could have been mapped to a regular R integer. This can be helpful in situations where you need to guarantee type stability when working with int64 data. Now that I’ve altered the global options, I can repeat my earlier command with the number 10.\n\n\ntranslate_integer(\n  value = c(10, 10, 10, 10), \n  type = list(uint8(), uint32(), uint64(), int64())\n)\n\n\n# A tibble: 4 × 3\n  value arrow_type r_class  \n  <dbl> <chr>      <chr>    \n1    10 uint8      integer  \n2    10 uint32     integer  \n3    10 uint64     integer  \n4    10 int64      integer64\n\nNotice that the results change for the int64 type only. The “int64_downcast” option pertains only to the int64 type, and does not affect the other integer types.\nAnd that’s it for integers. Next up we’ll talk about numeric types, but first I’ll be a good girl and restore my options to their previous state:\n\n\noptions(arrow.int64_downcast = NULL)\n\n\n\n\n\n\n\nFigure 11: Art\n\n\n\n\nNumeric types\nIn the last section I talked about the rather extensive range of data types that Arrow has to represent integers. Sure, there’s a practical benefit to having all these different data types, but at the same time its wild that we even need so many different data structures to represent something so simple. Integers aren’t complicated things. We learn them as kids even before we go to school, and we get taught the arithmetic rules to operate on them very early in childhood.\nThe problem, though, is that there are A LOT of integers. It’s a tad inconvenient sometimes, but the set of integers is infinite in size,14 so it doesn’t matter how many bits you allocate to your “int” type, there will always be integers that your machine cannot represent. But this is obvious, so why am I saying it? Mostly to foreshadow that things get worse when we encounter…\n\nFloating point numbers and the desert of the reals\n\nTo dissimulate is to pretend not to have what one has. To simulate is to feign to have what one doesn’t have. One implies a presence, the other an absence. But it is more complicated than that because simulating is not pretending: “Whoever fakes an illness can simply stay in bed and make everyone believe he is ill. Whoever simulates an illness produces in himself some of the symptoms” (Littré). Therefore, pretending, or dissimulating, leaves the principle of reality intact: the difference is always clear, it is simply masked, whereas simulation threatens the difference between the “true” and the “false,” the “real” and the “imaginary.”      – Jean Baudrillard, 1981, Simulacra and Simulation15\n\nThe real numbers correspond to our intuitive concept of the continuous number line. Just like the integers, the real line extends infinitely far in both directions, but unlike the integers the reals are continuous: for any two real numbers – no matter how close they are to each other – there is always another real number in between. This, quite frankly, sucks. Because the moment you accept that this is true, something ugly happens. If I accept that there must exist a number between 1.01 and 1.02, which I’ll call 1.015, then I have to accept that there is a number between 1.01 and 1.015, which I’ll call 1.0075, and then I have to accept that… oh shit this is going to go on forever. In other words, the reals have the obnoxious property that there between any two real numbers there are an infinity of other real numbers.16\nTry shoving all that into your finite-precision machine.\nStepping away from the mathematics for a moment, most of us already know how programming languages attempt to solve the problem. They use floating point numbers as a crude tool to approximate the real numbers using a finite-precision machine, and it… sort of works, as long as you never forget that floating point numbers don’t always obey the normal rules of arithmetic. I imagine most people reading this post already know this but for those that don’t, I’ll show you the most famous example:\n\n\n0.1 + 0.2 == 0.3\n\n\n[1] FALSE\n\nThis is not a bug in R. It happens because 0.1, 0.2, and 0.3 are not real numbers in the mathematical sense. Rather, they are encoded in R as objects of type double, and a double is a 64-bit floating point number that adheres to the IEEE 754 standard. It’s a bit beyond the scope of this post to dig all the way into the IEEE standard, but it does help a lot to have a general sense of how a floating point number (approximately) encodes a real number, so in the next section I’m going to take a look under the hood of R doubles. I’ll show you how they’re represented as binary objects, and why they misbehave sometimes. I’m doing this for two reasons: firstly it’s just a handy thing to know, but secondly, understanding the misbehaviour of the “standard” binary floating point number representation used in R helps motivate why Arrow and some other platforms expose other options to the user.\n\n[R] The numeric class\nTo give you a better feel for what a double looks like when represented as a set of bits, I’ve written a little extractor function called unpack_double() that decomposes the object into its constituent bits and prints it out in a visually helpful way (source code here). In truth, it’s just a wrapper around the numTobits() function provided by base R, but one that gives slightly prettier output. Armed with this, let’s take a look at the format. To start out, I’ll do the most boring thing possible and show you the binary representation of 0 as a floating point number. You will, I imagine, be entirely unshocked to discover that it is in fact a sequence of 64 zeros:\n\n\nunpack_double(0)\n\n\n0 00000000000 0000000000000000000000000000000000000000000000000000 \n\nTruly amazing.\nReally, the only thing that matters here is to notice the spacing. The sequence of 64 bits are divided into three meaningful chunks. The “first” bit17 represents the “sign”: is this a positive number (first bit equals 0) or a negative number (first bit equals 1), where zero is treated as if it were a positive number. The next 11 bits are used to specify an “exponent”: you can think of these bits as if they describe a signed “int11” type, and can be used to store any number between -1022 and 1023.18 The remaining 53 bits are used to represent the “mantissa”.19\nThese three components carve up a real number by using this this decomposition:\n\\[\n(\\mbox{real number}) = (\\mbox{sign}) \\times (\\mbox{mantissa}) \\times 2 ^ {\\mbox{(exponent)}}\n\\] Any real number can be decomposed in this way, so long as you have enough digits to express your mantissa and your exponent. Of course, on a finite precision machine we won’t always have enough digits, and this representation doesn’t allow us to fit “more” numbers into the machine: there’s a fundamental limit on what you can accomplish with 64 bits. What it can do for you, however, is let you use your limited resources wisely. The neat thing about adopting the decomposed format that floating-point relies on is that we can describe very large magnitudes and very small magnitudes with a fixed-length mantissa.\nTo give a concrete example of how floating point works, let’s take a look at the internal representation of -9.832, which I am told is the approximate rate of acceleration experienced by a falling object in the Earth’s polar regions:\n\n\npolar_g <- unpack_double(-9.832)\npolar_g\n\n\n1 10000000010 0011101010011111101111100111011011001000101101000100 \n\nI wrote some extractor functions that convert those binary components to the sign, exponent, and mantissa values that they represent, so let’s take a look at those:\n\n\nextract_sign(polar_g)\nextract_exponent(polar_g)\nextract_mantissa(polar_g)\n\n\n[1] -1\n[1] 3\n[1] 1.229\n\nNotice that the sign is always represented exactly: it can only be -1 or 1. The exponent is also represented exactly, as long as it’s not too large or too small: the number is always an integer value between -1022 and 1023. The mantissa, however, is a fractional value. When you encounter floating point errors it’s generally going to be because the stored mantissa doesn’t represent the true mantissa with sufficient precision.20 In any case, let’s check that the formula works:\n\n\nsign <- extract_sign(polar_g)\nexponent <- extract_exponent(polar_g)\nmantissa <- extract_mantissa(polar_g)\n\nsign * mantissa * 2 ^ exponent\n\n\n[1] -9.832\n\nYay!\nJust to prove to you that this isn’t a fluke, I also included a repack_double() function that automates this calculation. It takes the deconstructed representation of an R double and packs it up again, so repack_double(unpack_double(x)) should return x. Here are a few examples:\n\n\nsanity_check <- function(x) {\n  x == repack_double(unpack_double(x))\n}\nsanity_check(12)\nsanity_check(1345234623462342)\nsanity_check(0.000000002345345234523)\n\n\n[1] TRUE\n[1] TRUE\n[1] TRUE\n\nNow that we have some deeper knowledge of how R doubles are represented internally, let’s return to the numbers in the famous example of floating point numbers misbehaving:\n\n\nunpack_double(.1)\nunpack_double(.2)\nunpack_double(.3)\n\n\n0 01111111011 1001100110011001100110011001100110011001100110011010 \n0 01111111100 1001100110011001100110011001100110011001100110011010 \n0 01111111101 0011001100110011001100110011001100110011001100110011 \n\nAlthough these are clean numbers with a very simple decimal expansion, they are not at all simple when written in a binary floating point representation. In particular, notice that 0.1 and 0.2 share the same mantissa but 0.3 has a different mantissa, and that’s where the truncation errors occur. Let’s take a peek at 0.6 and 0.9:\n\n\nunpack_double(.6)\nunpack_double(.8)\nunpack_double(.9)\n\n\n0 01111111110 0011001100110011001100110011001100110011001100110011 \n0 01111111110 1001100110011001100110011001100110011001100110011010 \n0 01111111110 1100110011001100110011001100110011001100110011001101 \n\nSo it turns out that 0.6 has the same mantissa as 0.3, and 0.8 has the same mantissa as 0.1 and 0.2, but 0.9 has a different mantissa from all of them. So what we might expect is that floating point errors can happen for these cases:21\n\n\n0.1 + 0.2 == 0.3\n0.3 + 0.6 == 0.9\n\n\n[1] FALSE\n[1] FALSE\n\nbut not these ones:\n\n\n0.1 + 0.1 == 0.2\n0.3 + 0.3 == 0.6\n0.2 + 0.6 == 0.8\n\n\n[1] TRUE\n[1] TRUE\n[1] TRUE\n\nOkay that checks out! Now, it’s important to recognise that these errors are very small. So when I say that floating point arithmetic doesn’t actually “work”, a little care is needed. It does am impressively good job of approximating something very complicated using a quite limited tool:\n\n\n0.1 + 0.2 - 0.3\n\n\n[1] 5.551115e-17\n\nUltimately, floating point numbers are a simulation in the sense described by Baudrillard at the start of this section. They are a pretense, an attempt to act as if we can encode a thing (the reals) that we cannot encode. Floating point numbers are a fiction, but they are an extraordinarily useful one because they allow us to “cover” a very wide span of numbers across the real line, at a pretty high level of precision, without using too much memory.\nWe pretend that machines can do arithmetic on the reals. They can’t, but it’s a very powerful lie.\n\n[Arrow] The float64 type\nOkay. That was terribly long-winded, and I do apologise. Nevertheless, I promise there is a point to this story and it’s time we switched back over to the Arrow side of things to think about what happens there.\nBy now you’re probably getting used to the fact that Arrow tends to have more primitive types than R in most situations. Floating point numbers are no exception. R has only a single class, usually referred to as numeric but sometimes called double. In contrast, Arrow has three: float64, float32 and float16.22 It also has another numeric type called decimal that I’ll discuss later.\nThe easiest of these to discuss is float64, because it adopts the same conventions as the R double class. Just like R, it uses 64 bits to represent a floating point number.23 Because the data structures are so similar, the default behaviour in arrow is to translate an R double into an Arrow float64 and vice versa.\nAs always, I’ve got a little diagram summarising all the default mappings:\n\n\n\nFigure 12: Default mappings for numeric types\n\n\n\nLet’s have a look at the Arrow float64 type. It’s a little anticlimactic in a sense, because it’s the same data structure as the R double type, so all we’re going to “learn” is that it behaves the same way! First, let’s create one:\n\n\nfloat_01 <- scalar(0.1)\nfloat_01\n\n\nScalar\n0.1\n\nAs always, we’ll verify that the created object has the type we’re expecting…\n\n\nfloat_01$type\n\n\nFloat64\ndouble\n\n… and it does, but you might be slightly puzzled by the output this time. What’s going on with the top line and the bottom line? Why does one say “Float64” and the other say “double”?\nWe’ve seen the “two lines of output” pattern earlier in the post when printing out an int32, but last time the two lines both said the same thing so I didn’t bother to comment on it. This time, however, there’s something to unpack. The distinction here refers to the name of the object type at the R level and and the C++ level. The first line of the output reads “Float64” because that’s what this data structure is called at the R level (i.e., according to arrow). The second line reads “double” because that’s what this data structure is called at the C++ level (i.e., in libarrow). There are a few cases where the arrow package adopts a slightly different naming scheme to libarrow, and so you’ll see this happen from time to time later in the post. There are some good reasons for this difference in nomenclature, and it’s nothing to be concerned about!\nAnyway, getting back to the main thread… since we’ve created the value 0.1 as a float64 in Arrow, let’s go through the same exercise we did in R and show that Arrow floats produce the same floating point errors. We’ll create new variables for 0.2 and 0.3:\n\n\nfloat_02 <- scalar(0.2)\nfloat_03 <- scalar(0.3)\n\n\n\nJust like we saw in R, the logical test of equality gives a counterintuitive answer:\n\n\nfloat_01 + float_02 == float_03\n\n\nScalar\nfalse\n\n… and just like we saw in R, the reason for it is that there’s a very small rounding error:\n\n\nfloat_01 + float_02 - float_03\n\n\nScalar\n5.551115123125783e-17\n\nJust so you don’t have to scroll up to check, yes, the rounding error is the same as the one that R produces:\n\n\n0.1 + 0.2 - 0.3\n\n\n[1] 5.551115e-17\n\nR and Arrow implement the same standard for floating point arithmetic, and so they “fail” in the same way because the failure occurs at the level of the standard. But we don’t blame IEEE 754 for that, because it’s literally impossible to define any standard that will encode the real numbers in an error-free way on a finite-precision machine.\n\n[Arrow] The float32 and float16 types\nThe float64 type provides an excellent, high precision floating point representation of numeric data. As data types go it is a good type. However, it is a 64-bit type, and sometimes you don’t need to store your data at a high degree of precision. With that in mind, because Arrow places a strong emphasis on both scalability and efficiency, it also provides the float32 type and the float16 type (though float16 hasn’t really been implemented yet, as far as I know). Encoding numeric data in these formats will save space, but will come at a cost of precision. As always, the decision of what encoding works best for your application will depend on what your needs are.\nAs far as the arrow package is concerned, there are no difficulties in passing data back and forth between R doubles and Arrow float32 types, but at present it’s not really possible to do this with float16 because this isn’t implemented. Still, we can briefly take a look at how it works for float32. Here’s an example of me passing an R double to Arrow:\n\n\nfloat32_01 <- scalar(.1, type = float32())\nfloat32_01\n\n\nScalar\n0.1\n\nLet’s quickly verify that it is in fact a 32-bit float:\n\n\nfloat32_01$type\n\n\nFloat32\nfloat\n\nAnd now let’s pull it back into R where it will be, once again, encoded as a double:\n\n\nas.vector(float32_01)\n\n\n[1] 0.1\n\nYay! It works!\n\nDecimal floating point numbers?\nIt’s time to talk about decimals. This is a fun topic, but I need to start with a warning: I mentioned that Arrow has a decimal type, and your first instinct as an R programmer might be to assume that this is another variation of floating point numbers. Fight this instinct: it’s not quite right.\nOkay, ready?\nEarlier in this section I promised that the Baudrillard quote from Simulacra and Simulation was going to be relevant? Well, that time has arrived. It’s also the moment at which the quote from Word and Object by Quine that opened this blog post becomes painfully relevant. Stripped of their fancy language, here’s what the two authors are telling us in these passages:\nThe Baudrillard quote emphasises that floating point numbers are a simulation. They are the mechanism by which we pretend to encode real numbers on computers. It’s a lie, but it’s a powerful lie that almost works.\nThe Quine quote emphasises that translation (and, I would argue, simulation also) is underdetermined. For any complicated thing there are many ways to simulate, or translate, or approximate it. These approximations can be extremely accurate and still be inconsistent with each other.\nQuine’s truism applies to floating point numbers, and it is the reason why “decimal floating point” numbers exist in addition “binary floating point” numbers. All floating point systems are simulations in the Baudrillard sense of the term: lies, strictly speaking, but close enough to true that the distinction between lies and truth gets a little blurry.\nLet’s see how that plays out with floating point numbers. When discussing doubles in R, I mentioned that they represent the real numbers using a decomposition that looks like this:\n\\[\n(\\mbox{real number}) = (\\mbox{sign}) \\times (\\mbox{mantissa}) \\times 2 ^ {\\mbox{(exponent)}}\n\\]\nThe number “2” pops out here, doesn’t it? Is there any reason to think that “2” is a pre-ordained necessity when approximating the real numbers on a finite-precision machine? Programmers have a tendency to like using “2” as the base unit for everything because it lines up nicely with binary representations, and that’s often a good instinct when dealing with machines.\nUnfortunately, life consists of more than machines.\nIn particular, binary representations create problems for floating point arithmetic because the world contains entities known as “humans”, who have a habit of writing numbers in decimal notation24. Numbers that look simple in decimal notation often look complicated in binary notation and vice versa. As we saw earlier, a “simple” decimal number like 0.1 doesn’t have a short binary expansion and so cannot be represented cleanly in a finite-precision binary floating point number system. Rounding errors are introduced every time a machine uses (base 2) floating point to encode data that were originally stored as a (base 10) number in human text.\nA natural solution to this is to design floating point data types that use other bases. It is entirely possible to adopt decimal floating point types that are essentially equivalent to the more familiar binary floating point numbers, but they rely on a base 10 decomposition:\n\\[\n(\\mbox{real number}) = (\\mbox{sign}) \\times (\\mbox{mantissa}) \\times 10 ^ {\\mbox{(exponent)}}\n\\]\nThe virtues of decimal floating point seem enticing, and it’s tempting to think that this must be what Arrow implements. However, as we’ll see in the next section, that’s not true.\nInstead of using floating-point decimals, it supplies “fixed-point” decimal types. In a floating-point representation, the exponent is chosen automatically, and it is a property of the value itself. The number -9.832 will always have an exponent of 3 when encoded as a binary floating-point number (as we saw in the polar_g example earlier), and that exponent will never be influenced by the values of other numbers stored in the same data set.\nA fixed-point representation is different. The exponent – and in a decimal representation, remember that the exponent is just “the location of the decimal point” – is chosen by the user. You have to specify where the decimal point is located manually, and this location will be applied to each value stored in the object. In other words, the exponent – which is now called the “scale”, and is parameterised slightly differently – becomes a property of the type, not the value.\nSigh. Nothing in life is simple, is it? It’ll become a little clearer in the next section, I promise!\n\n[Arrow] The decimal fixed-point types\nArrow has two decimal types, a decimal128 type that (shockingly) uses 128 bits to store a floating point decimal number, and a decimal256 type that uses 256 bits. As usual arrow package supplies type functions decimal128() and decimal256() that allow you to specify decimal types. Both functions have two arguments that you must supply:\nprecision specifies the number of significant digits to store, similar to setting the length of the mantissa in a floating-point representation.\nscale specifies the number of digits that should be stored after the decimal point. If you set scale = 2, exactly two digits will be stored after the decimal point. If you set scale = 0, values will be rounded to the nearest whole number. Negative scales are also permitted (handy when dealing with extremely large numbers), so scale = -2 stores the value to the nearest 100.\nOne convenience that exists both in the arrow R package and within libarrow itself is that it can automatically decide whether you need a decimal128 or a decimal256 simply by looking at the value of the precision argument. If the precision is 38 or less, you can encode the data with a decimal128 type. Larger values require a decimal256. If you would like to take advantage of this – as I will do in this post – you can use the decimal() type function which will automatically create the appropriate type based on the specified precision.\nOne inconvenience that I have in this post, however, is that R doesn’t have any analog of a fixed-point decimal, and consequently I don’t have any way to create an “R decimal” that I can then import into Arrow. What I’ll do instead is create a floating point array in Arrow, and then explicitly cast it to a decimal type. Step one, create the floating point numbers in Arrow:\n\n\nfloats <- chunked_array(c(.01, .1, 1, 10, 100), type = float32())\nfloats\n\n\nChunkedArray\n[\n  [\n    0.01,\n    0.1,\n    1,\n    10,\n    100\n  ]\n]\n\nStep two, cast the float32 numbers to decimals:\n\n\ndecimals <- floats$cast(decimal(precision = 5, scale = 2))\ndecimals\n\n\nChunkedArray\n[\n  [\n    0.01,\n    0.10,\n    1.00,\n    10.00,\n    100.00\n  ]\n]\n\nThese two arrays look almost the same (especially because I chose the scale judiciously!), but the underlying encoding is different. The original floats array is a familiar float32 type, but if we have a look at the decimals object we see that it adopts a quite different encoding:\n\n\ndecimals$type\n\n\nDecimal128Type\ndecimal128(5, 2)\n\nTo illustrate that these do behave differently, let’s have fun making floating point numbers misbehave again:\n\n\nsad_floats <- chunked_array(c(.1, .2, .3))\nsum(sad_floats)\n\n\nScalar\n0.6000000000000001\n\nOh noes. Okay, let’s take a sad float32 and turn it into a happy decimal. I’ll store it as a high precision decimal to make it a little easier to compare the results:\n\n\nhappy_decimals <- sad_floats$cast(decimal(20, 16))\n\n\n\nNow let’s look at the two sums side by side:\n\n\nsum(sad_floats)\nsum(happy_decimals)\n\n\nScalar\n0.6000000000000001\nScalar\n0.6000000000000000\n\nYay!\nAs a final note before moving on, it is (of course!!!) the case that fixed-point decimals aren’t a universal solution to the problems of binary floating-point numbers. They have limitations of their own and there are good reasons why floats remain the default numeric type in most languages. But they have their uses: binary and decimal systems provide different ways to simulate the reals, as do fixed and floating point systems. Each such system is a lie, of course: the reals are too big to be captured in any finite system we create. They are, however, useful.\n\n\n\n\nFigure 13: Art\n\n\n\n\nCharacter types\nOur journey continues. We now leave behind the world of number and enter the domain of text. Such times we shall have! What sights we shall see! (And what terrors lie within?)\nStrings are an interesting case. R uses a single data type to represent strings (character vectors) but Arrow has two types, known as strings and large_strings. When using the arrow package, Arrow strings are specified using the utf8() function, and large strings correspond to the large_utf8() type. The default mapping is to assume that an R character vector maps onto the Arrow utf8() type, as shown below:\n\n\n\nFigure 14: Default mappings for character types\n\n\n\nThere’s a little more than meets the eye here though, and you might be wondering about the difference between strings and large_strings in Arrow, and when you might prefer one to the other. As you might expect, the large string type is suitable when you’re storing large amounts of text, but to understand it properly I need to talk in more depth about how R and Arrow store strings, and I’ll use this partial list of people that – according to the lyrics of Jung Talent Time by TISM – were perhaps granted slightly more fame than they had earned on merit:\nBert Newton\nBilly Ray Cyrus\nWarwick Capper\nUri Geller\nSamantha Fox\n\n[R] The character class\nSuppose I want to store this as a character vector in R, storing only the family names for the sake of brevity and visual clarity.\n\n\njung_talent <- c(\"Newton\", \"Cyrus\", \"Capper\", \"Geller\", \"Fox\")\n\n\n\nEach element of the jung_talent vector is a variable-length string, and is stored internally by R as an array of individual characters25 So, to a first approximation, your mental model of how R stores the jung_talent variable might look something like this:\n\n\n\nFigure 15: Simplified representation of how character vectors are represented in R\n\n\n\nHere, the jung_talent variable is an object26 that contains five elements shown as the orange boxes. Internally, each of those orange boxes is itself an array of individual characters shown as the purple boxes. As a description of what R actually does this is a bit of an oversimplification because it ignores the global string pool, but it will be sufficient for the current purposes.\nThe key thing to understand conceptually is that R treats the elements of a character vector as the fundamental unit. The jung_talent vector is constructed from five distinct strings, \"Newton\", \"Cyrus\", etc. The \"Newton\" string is assigned to position 1, the \"Cyrus\" string is assigned to position 2, and so on.\n\n[Arrow] The utf8 type\nThe approach taken in Arrow is rather different. Instead of carving up the character vector into strings (and internally treating the strings as character arrays), it concatenates everything into one long buffer. The text itself is dumped into one long string, like this:\nNewtonCyrusCapperGellerFox\nThe first element of this buffer – the letter \"N\" – is stored at “offset 0” (indexing in Arrow starts at 0), the second element is stored at offset 1, and so on. This long array of text is referred to as the “data buffer”, and it does not specify where the boundaries between array elements are. Those are stored separately. If I were to create an Arrow string array called jung_talent_arrow, it would be comprised of a data buffer, and an “offset buffer” that specifies the positions at which each element of the string array begins. In other words, we’d have a mental model that looks a bit like this:\n\n\n\nFigure 16: Simplified representation of how character vectors are represented in Arrow\n\n\n\nHow are each of these buffers encoded?\nThe contents of the data buffer are stored as UTF-8 text, which is itself a variable length encoding: some characters are encoded using only 8 bits while others require 32 bits. This blog post on unicode is a nice explainer.\nThe contents of the offset buffer are stored as unsigned integers, either 32 bit or 64 bit, depending on which of the two Arrow string array types you’re using. I’ll unpack this in the next section.\nSheesh. That was long. Let’s give ourselves a small round of applause for surviving, and now actually DO something. We’ll port the jung_talent vector over to Arrow.\n\n\njung_talent_arrow <- chunked_array(jung_talent)\njung_talent_arrow\n\n\nChunkedArray\n[\n  [\n    \"Newton\",\n    \"Cyrus\",\n    \"Capper\",\n    \"Geller\",\n    \"Fox\"\n  ]\n]\n\nThat certainly looks like text to me! Let’s take a look at the data type:\n\n\njung_talent_arrow$type\n\n\nUtf8\nstring\n\nYep. Definitely text!\n\n[Arrow] The large_utf8 type\nOkay, so as I mentioned, Arrow has two different string types: it has strings (also called utf8) and large_strings (also called large_utf8).27 The default in arrow is to translate character data in R to the utf8 data type in Arrow, but we can override this if we want to. In order to help you make an informed choice, I’ll dig a little deeper into the difference between the two types.\nThe first thing to recognise is that the nature of the data buffer is the same for utf8 and large_utf8: the difference between the two lies in how the offset buffers are encoded. When character data are encoded as utf8 type, every offset value is stored as an unsigned 32-bit integer. That means that – as shown in the table of integer types earlier in the post – you cannot store an offset value larger than 4294967295. This constrain places a practical cap on the total length of the data buffer: if total amount of text stored in the data buffer is greater than about 2GiB, the offset buffer can’t encode the locations within it! Switching to large_utf8 means that the offset buffer will store every offset value as an unsigned 64-bit integer. This means that the offset buffer now takes up twice as much space, but it allows you to encode offset values up to… um… 18446744073709551615. And if you’ve got so much text that your data buffer is going to exceed that limit, well, frankly you have bigger problems.\nIn short, if you’re not going to exceed 2GiB of text in your array, you don’t need large_utf8. Once you start getting near that limit, you might want to think about switching:\n\n\njung_talent_arrow_big <- chunked_array(jung_talent, type = large_utf8())\njung_talent_arrow_big$type\n\n\nLargeUtf8\nlarge_string\n\nBefore moving on, I’ll mention one additional complexity. This is a situation where the distinction between Arrays and ChunkedArrays begins to matter. Strictly speaking, I lied earlier when I said there’s only one data buffer. A more precise statement would be to say that there is one data buffer per chunk (where each chunk in a ChunkedArray is an Array). ChunkedArrays are designed to allow a block (or “chunk”) of contiguous rows in a table to be stored together in a single location (or file). There are good reasons for doing that28, but they aren’t immediately relevant. What matters is to recognise that in a ChunkedArray, the 2GiB limit on utf8 type data applies on a per-chunk basis. The net result of this is that you probably don’t need large_utf8 except in very specific cases.\n\n\n\n\nFigure 17: Art\n\n\n\n\nDate/time types\nNext up on our tour of data types are dates and times. Internally, R and Arrow both adopt the convention of measuring time in terms of the time elapsed since a specific moment in time known as the unix epoch. The unix epoch is the time 00:00:00 UTC on 1 January 1970. It was a Thursday.\nDespite agreeing on fundamentals, there are some oddities in the particulars. Base R has three date/time classes (Date, POSIXct, and POSIXlt), and while Arrow also has three date/time classes (date32, date64, and timestamp), the default mappings between them are a little puzzling unless you are deeply familiar with what all these data types are and what they represent. I’ll do the deep dive in a moment, but to give you the big picture here’s how the mapping works:\n\n\n\nFigure 18: Default mappings for date/time types\n\n\n\n\n[R] The Date class\nOn the R side of things, a Date object is represented internally as a numeric value, counting the number of days since the unix epoch. Here is today as a Date:\n\n\ntoday <- Sys.Date()\ntoday\n\n\n[1] \"2022-03-08\"\n\nIf I use unclass() to see what it looks like under the hood:\n\n\nunclass(today)\n\n\n[1] 19059\n\nFundamentally, a Date object is a number:29 it counts the number of days that have elapsed since a fixed date. It does not care what the year is, what the month is, or what day of the month it is. It does not care how the date is displayed to the user. All those things are supplied by the print() method, and are not part of the Date itself.\n\n[R] The POSIXct class\nA date is a comparatively simple thing. When we want to represent dates and time together, we need to know the time of day, and we might need to store information about the timezone as well (more on that later). Base R has two different classes for representing this, POSIXct and POSIXlt. These names used to confuse me a lot. POSIX stands for “portable operating system interface”, and it’s a set of standards used to help operating systems remain compatible with each other. In this context though, it’s not very meaningful: all it says “yup we use unix time.”\nThe more important part of the name is actually the “ct” versus “lt” part. Let’s start with POSIXct. The “ct” in POSIXct stands for “calendar time”: internally, R stores the number of seconds30 that have elapsed since 1970-01-01 00:00 UTC.\n\n\nnow <- Sys.time()\nnow\n\n\n[1] \"2022-03-08 14:07:51 AEDT\"\n\nIf I peek under the hood using unclass() here’s what I see:\n\n\nunclass(now)\n\n\n[1] 1646708871\n\nThere are no attributes attached to this object, it is simply a count of the number of seconds since that particular moment in time. However, it doesn’t necessarily have to be this way: a POSIXct object is permitted to have a “tzone” attribute, a character string that specifies the timezone that is used when printing the object will be preserved when it is converted to a POSIXlt.\nNevertheless, when I created the now object by calling Sys.time(), no timezone information was stored in the object. The fact that it appears when I print out now occurs because the print() method for POSIXct objects prints the time with respect to a particular timezone. The default is to use the system timezone, which you can check by calling Sys.timezone(), but you can override this behaviour by specifying the timezone explicitly (for a list of timezone names, see OlsonNames()). So if I wanted to print the time in Berlin, I could do this:\n\n\nprint(now, tz = \"Europe/Berlin\")\n\n\n[1] \"2022-03-08 04:07:51 CET\"\n\nIf you want to record the timezone as part of your POSIXct object rather than relying on the print method to do the work, you can do so by setting the tzone attribute. To illustrate this, let’s pretend I’m in Tokyo:\n\n\nattr(now, \"tzone\") <- \"Asia/Tokyo\"\nnow\n\n\n[1] \"2022-03-08 12:07:51 JST\"\n\nThe important thing here is that the timezone is metadata used to change the how the time is displayed. Changing the timezone does not alter the number of seconds stored in the now object:\n\n\nunclass(now)\n\n\n[1] 1646708871\nattr(,\"tzone\")\n[1] \"Asia/Tokyo\"\n\n\n[R] The POSIXlt class\nWhat about POSIXlt? It turns out that this is a quite different kind of data structure, and it “thinks” about time in a very different way. The “lt” in POSIXlt stands for “local time”, and internally a POSIXlt object is a list that stores information about the time in a way that more closely mirrors how humans think about it. Here’s what now looks like when I coerce it to a POSIXlt object:\n\n\nnow_lt <- as.POSIXlt(now)\nnow_lt\n\n\n[1] \"2022-03-08 12:07:51 JST\"\n\nIt looks exactly the same, but this is an illusion produced by the print() method. Internally, the now_lt object is a very different kind of thing. To see this, let’s see what happens if we print it as if it were a regular list:\n\n\nunclass(now_lt)\n\n\n$sec\n[1] 51.22052\n\n$min\n[1] 7\n\n$hour\n[1] 12\n\n$mday\n[1] 8\n\n$mon\n[1] 2\n\n$year\n[1] 122\n\n$wday\n[1] 2\n\n$yday\n[1] 66\n\n$isdst\n[1] 0\n\n$zone\n[1] \"JST\"\n\n$gmtoff\n[1] 32400\n\nattr(,\"tzone\")\n[1] \"Asia/Tokyo\" \"JST\"        \"JDT\"       \n\nAs you can see, this object separately stores the year (counted from 1900), the month (where January is month 0 and December is month 11), the day of the month (starting at day 1), etc.31 The timezone is stored, as is the day of the week (Sunday is day 0), it specifies whether daylight savings time is in effect, and so on. Time, as represented in the POSIXlt class, uses a collection of categories that are approximately the same as those that humans use when we talk about time.\nIt is not a compact representation, and it’s useful for quite different things than POSIXct. What matters for the current purposes is that POSIXlt is, fundamentally, a list structure, and is not in any sense a “timestamp”.\n\n[Arrow] The date32 type\nOkay, now let’s pivot over to the Arrow side and see what we have to work with. The date32 type is similar – but not identical – to the R Date class. Just like the R Date class, it counts the number of days since 1970-01-01. To see this, let’s create an analog of the today Date object inside Arrow, and represent it as a date32 type:\n\n\ntoday_date32 <- scalar(today, type = date32())\ntoday_date32\n\n\nScalar\n2022-03-08\n\nWe can expose the internal structure of this object by casting it to an int32:\n\n\ntoday_date32$cast(int32())\n\n\nScalar\n19059\n\nThis is the same answer we got earlier when I used unclass() to take a peek at the internals of the today object. That being said, there is a subtle difference: in Arrow, the date32 type is explicitly a 32-bit integer. If you read through the help documentation for date/time classes in R you’ll see that R has something a little more complicated going on. The details don’t matter for this post, but you should be aware that Dates (and POSIXct objects) are stored as doubles. They aren’t stored as integers:\n\n\ntypeof(today)\ntypeof(now)\n\n\n[1] \"double\"\n[1] \"double\"\n\nIn any case, given that the Arrow date32 type and the R Date class are so similar to each other in structure and intended usage, it is natural to map R Dates to Arrow date32 types and vice versa, and that’s what the arrow package does by default.\n\n[Arrow] The date64 type\nThe date64 type is similar to the date32 type, but instead of storing the number of days since 1970-01-01 as a 32-bit integer, it stores the number of milliseconds since 1970-01-01 00:00:00 UTC as a 64-bit integer. It’s similar to the POSIXct class in R, except that (1) it uses milliseconds instead of seconds; (2) the internal storage is an int64, not a double; and (3) it does not have metadata and cannot represent timezones.\nAs you might have guessed, the date64 type in Arrow isn’t very similar to the Date class in R. Because it represents time at the millisecond level, the intended use of the date64 class is in situations where you want to keep track of units of time smaller than one day. Sure, I CAN create date64 objects from R Date objects if I want to…\n\n\nscalar(today, date64())\n\n\nScalar\n2022-03-08\n\n…but this is quite wasteful. Why use a 64-bit representation that tracks time at the millisecond level when all I’m doing is storing the date? Although POSIXct and date64 aren’t exact matches, they’re more closely related to each other than Date and date64. So let’s create an Arrow analog of now as a date64 object:\n\n\nnow_date64 <- scalar(now, date64())\nnow_date64\n\n\nScalar\n2022-03-08\n\nThe output is printed as a date, but this is a little bit misleading because it doesn’t give you a good sense of the level of precision in the data. Again we can peek under the hood by explicitly casting this to a 64-bit integer:\n\n\nnow_date64$cast(int64())\n\n\nScalar\n1646708871220\n\nThis isn’t a count of the number of days since the unix epoch, it’s a count of the number of milliseconds. It is essentially the same number, divided by 1000, as the one we obtained when I typed unclass(now).\nHowever, there’s a puzzle here that we need to solve. Let’s take another look at unclass(now):\n\n\nunclass(now)\n\n\n[1] 1646708871\nattr(,\"tzone\")\n[1] \"Asia/Tokyo\"\n\nThis might strike you as very weird. On the face of it, what has happened is that I have taken now (which ostensibly represents time at “second-level” precision), ported it over to Arrow, and created an object now_date64 that apparently knows what millisecond it is???? How is that possible? Does Arrow have magic powers?\nNot really. R is playing tricks here. Remember how I said that POSIXct objects are secretly doubles and not integers? Well, this is where that becomes relevant. It’s quite hard to get R to confess that a POSIXct object actually knows the time at a more precise level than “to the nearest second” but you can get it do to so by coercing it to a POSIXlt object and then taking a peek at the sec variable:\n\n\nas.POSIXlt(now)$sec\n\n\n[1] 51.22052\n\nAha! The first few digits of the decimal expansion are the same ones stored as the least significant digits in now_date64. The data was there all along. Even though unclass(now) produces an output that has been rounded to the nearest second, the original now variable is indeed a double, and it does store the time a higher precision! Ultimately, the accuracy of the time depends on the system clock itself, but the key thing to know here is that even though POSIXct times are almost always displayed to the nearest second, they do have the ability to represent more precise times.\nBecause of this, the default behaviour in arrow is to convert date64 types (64-bit integers interpreted as counts of milliseconds) to POSIXct classes (which are secretly 64-bit doubles interpreted as counts of seconds).\nRight. Moving on.\n\n[Arrow] The timestamp type\nThe last of the Arrow date/time types is the timestamp. The core data structure is a 64-bit integer used to count the number of time units that have passed since the unix epoch, and this is associated with two additional pieces of metadata: the time unit used (e.g., “seconds”, “milliseconds,”microseconds”, “nanoseconds”), and the timezone. As with the POSIXct class in R, the timezone metadata is optional, but the time unit is necessary. The default is to use microseconds (i.e., unit = \"us\"):\n\n\nscalar(now)\nscalar(now, timestamp(unit = \"us\"))\n\n\nScalar\n2022-03-08 03:07:51.220516\nScalar\n2022-03-08 03:07:51.220516\n\nAlternatively, we could use seconds:\n\n\nscalar(now, timestamp(unit = \"s\"))\n\n\nScalar\n2022-03-08 03:07:51\n\nIt’s important to recognise that changing the unit does more than change the precision at which the timestamp is printed. It changes “the thing that is counted”, so the numbers that get stored in the timestamp are quite different depending on the unit. Compare the numbers that are stored when the units are seconds versus when the units are nanoseconds:\n\n\nscalar(now, timestamp(unit = \"s\"))$cast(int64())\nscalar(now, timestamp(unit = \"ns\"))$cast(int64())\n\n\nScalar\n1646708871\nScalar\n1646708871220516096\n\nOkay, what about timezone?\nRecall that now has a timezone attached to it, because I explicitly recorded the tzone attribute earlier. Admittedly I lied and I said I was in Tokyo and not in Sydney, but still, that information is in the now object:\n\n\nnow\n\n\n[1] \"2022-03-08 12:07:51 JST\"\n\nWhen I print the R object it displays the time in the relevant time zone. The output for the Arrow object doesn’t do that: the time as displayed is shown in UTC. However, that doesn’t mean that the metadata isn’t there:\n\n\nnow_timestamp <- scalar(now)\nnow_timestamp$type\n\n\nTimestamp\ntimestamp[us, tz=Asia/Tokyo]\n\nI mention this because this caused me a considerable amount of panic at one point when I thought my timezone information had been lost when importing data from POSIXct into Arrow. Nothing was lost, it is simply that the arrow R package prints all timestamps in the corresponding UTC time regardless of what timezone is specified in the metadata.\nThere is, however, a catch. This worked last time because I was diligent and ensured that my now variable encoded the timezone. By default, a POSIXct object created by Sys.time() will not include the timezone. It’s easy to forget this because the print() method for POSIXct objects will inspect the system timezone if the POSIXct object doesn’t contain any timezone information, so it can often look like you have a timezone stored in your POSIXct object when actually you don’t. When that happens, Arrow can’t help you. Because the POSIXct object does not have a timezone (all appearances to the contrary), the object that arrives in Arrow won’t have a timezone either. Here’s what I mean:\n\n\n# a POSIXct object with no timezone\nnew_now <- Sys.time() # has no time zone...\nnew_now               # ... but appears to!\n\n\n[1] \"2022-03-08 14:07:51 AEDT\"\n\n# an Arrow timestamp with no timezone\nnew_now_timestamp <- scalar(new_now)\nnew_now_timestamp$type\n\n\nTimestamp\ntimestamp[us]\n\nThe take-home message in all this is that if you’re going to be working in both Arrow and R, and using the arrow package for data interchange, you’d be well advised to be careful with your POSIXct objects and timezones. They are trickier than they look, and can lead to subtle translation errors if you are not careful!\n\nUm, but what about POSIXlt?\nAt long last we come to POSIXlt, which has no clear analog in Arrow. The key idea behind POSIXlt is to represent temporal information in terms of multiple different units: days, weeks, years, seconds, timezones, and so on. It’s a very different kind of thing to a POSIXct object in R or a timestamp in Arrow. In R terms, it’s essentially a list, and as a consequence the default behaviour in arrow is to import it as a struct (which serves essentially the same purpose). Here’s how that looks:\n\n\nscalar(now_lt)\n\n\nStructScalar\n{sec:double = 51.220516204833984, min:int32 = 7, hour:int32 = 12, mday:int32 = 8, mon:int32 = 2, year:int32 = 122, wday:int32 = 2, yday:int32 = 66, isdst:int32 = 0, zone:string = JST, gmtoff:int32 = 32400}\n\nThe struct object contains named fields that are identical to their POSIXlt equivalents, and whose types have been translated according to the default mappings: sec is a double, min is an int32, hour is an int32, zone is a string, and so on.\nThis arrangement, where POSIXct maps to timestamp and POSIXlt maps to struct, makes perfect sense when you think about the underlying data structures that POSIXct and POSIXlt encode. Where things can be tricky for the R user is in the “mental account keeping”. In order to be helpful, R displays POSIXct and POSIXlt objects in exactly the same way:\n\n\nnow\nnow_lt\n\n\n[1] \"2022-03-08 12:07:51 JST\"\n[1] \"2022-03-08 12:07:51 JST\"\n\nNot only that, because POSIXct and POSIXlt are both subclasses of the POSIXt class, R allows you to perform temporal arithmetic on objects of different types:\n\n\nnow - now_lt\n\n\nTime difference of 0 secs\n\nThis is very convenient from a data analysis perspective, since calculations performed with date/time classes “just work” even though POSIXct objects are secretly doubles and POSIXlt objects are secretly lists. However, all this happens invisibly. In much the same way that it’s easy to forget that POSIXct objects may not encode a timezone even though they look like they do, it can be easy to forget that POSIXct and POSIXlt are fundamentally different objects, and they map onto quite different data structures in Arrow.\n\n\n\n\nFigure 19: Art\n\n\n\n\nDuration types\nAny discussion of temporal data is incomplete without a discussion of duration types, which are used to describe a length of time without reference to any fixed origin. The figure below shows the default mappings used by arrow:\n\n\n\nFigure 20: Default mappings for duration types\n\n\n\n\n[R] The difftime class\nIn base R, the difference between two date/time objects is stored as a difftime object. To give a better illustration of a difftime object, let’s create diff, a variable that stores the amount of time elapsed between executing the R markdown chunk that first computed the now variable, and executing the R markdown chunk below:\n\n\nnew_now <- Sys.time()\nrmd_time <- new_now - now\nrmd_time\n\n\nTime difference of 0.3039544 secs\n\nNow let’s take a look at how it’s actually stored:\n\n\nunclass(rmd_time)\n\n\n[1] 0.3039544\nattr(,\"units\")\n[1] \"secs\"\n\nThe duration is represented as a double variable, and the \"units\" attribute is used to specify the time unit that it represents: “secs”, “mins”, “hours”, “days” or “weeks”. Unless the user specifies exactly which unit is to be used, R will attempt to make a sensible choice. For instance, if I were to do this,\n\n\nhedy_lamarr <- as.POSIXct(\"1914-11-09 19:30:00\", tz = \"Europe/Vienna\")\nhedy_age <- now - hedy_lamarr\nhedy_age\n\n\nTime difference of 39200.36 days\n\nI would learn that it has been 39200 days since Hedy Lamarr was born.32 More to the point, R has guessed that the length of time is sufficiently long that “seconds” aren’t the appropriate encoding unit:\n\n\nunclass(hedy_age)\n\n\n[1] 39200.36\nattr(,\"units\")\n[1] \"days\"\n\n\n[Arrow] The duration type\nThe difftime class in R has a natural analog in Arrow, the duration type. As usual though, they are not exactly equivalent to one another. An R difftime object stores the value as a double, so it has no problems storing 0.3 as the value and setting the units to be seconds. This doesn’t work very well in Arrow because the value is stored as a signed 64 bit integer (int64), and a value of 0.3 seconds will simply round down to a duration of zero seconds. When importing my duration data into Arrow, then, I should be careful to ensure I choose a higher precision unit. If I don’t, things can go a little awry:\n\n\nrmd_time_arrow <- scalar(rmd_time)\nrmd_time_arrow\n\n\nScalar\n0\n\nHm. Zero seconds was not exactly the answer I was looking for. It helps a little to take a peek at the data type and see what precisely it is that I have just created:\n\n\nrmd_time_arrow$type\n\n\nDurationType\nduration[s]\n\nThis reveals my mistake. I’ve encoded the time rounded to the nearest second, which is not very useful in this instance. What I really should have done is specify a higher level of precision. To import a duration into Arrow rounded to the nearest microsecond, I can do this:\n\n\nrmd_time_arrow <- scalar(rmd_time, duration(unit = \"us\"))\nrmd_time_arrow\n\n\nScalar\n303954\n\nThat’s a little better! Again, I can inspect the data type and see that the unit of encoding is now set to microseconds:\n\n\nrmd_time_arrow$type\n\n\nDurationType\nduration[us]\n\n\n[R] The hms::hms class\nSo where are we up to in our voyage through the world of dates, times, and durations in the R world? We’ve talked about situations where you can specify a fixed date (with the Date class) and situations where you can specify a fixed moment in time (with POSIXct and POSIXlt classes). We’ve also talked about situations where you can specify an amount of time without fixing it to a specific date or time (with the difftime class). What we haven’t talked about is how to store the time of day. In base R you can talk about a date without needing to specify a time, or you can talk about times and dates together, but what you can’t do is specify a time on its own without a date.\nThe hms package fixes this by supplying the hms class. Internally, it’s just a difftime object that counts the number of seconds elapsed since midnight. As I type these words the current time is 14:05:25, and I could create an hms object representing this like so:\n\n\nhms_time <- hms::hms(seconds = 25, minutes = 5, hours = 14)\nhms_time\n\n\n14:05:25\n\nThe nice thing about hms times is that they inherit from difftime, which we can see by checking the class vector for our hms_time object\n\n\nclass(hms_time)\n\n\n[1] \"hms\"      \"difftime\"\n\nJust to show that there really isn’t anything fancy going on, let’s strip the class attribute away and let R print out the raw object. As the output here shows, an hms object has the same underlying structure as a regular difftime object:\n\n\nunclass(hms_time)\n\n\n[1] 50725\nattr(,\"units\")\n[1] \"secs\"\n\n\n[Arrow] The time32 and time64 types\nWhat about Arrow?\nAt a technical level, it would be perfectly possible to translate an hms object in R into an Arrow duration object, but that feels slightly unnatural. The entire reason why the hms class exists in R is that we – the human users – attach special meaning to the “duration of time that has elapsed since midnight on an arbitrary day”. We call it the time of day, and while technically it is possible to represent the time of day as a duration (or an hms as a difftime), human beings like to treat special things as special for a reason.\nBecause of this, Arrow supplies two data types that are roughly analogous to the hms class in R, called time32 and time64. The time32 type stores the time of day as a signed 32-bit integer, which represents the number of seconds (or alternatively, milliseconds) since midnight. By default, the arrow package will translate an hms object to a time32 type, using seconds as the unit:\n\n\nhms_time32_s <- scalar(hms_time)\nhms_time32_s\n\n\nScalar\n14:05:25\n\nAs usual, let’s just verify that the encoding unit is as expected:\n\n\nhms_time32_s$type\n\n\nTime32\ntime32[s]\n\nYep, we’re all good! To switch to milliseconds, I would use a command like this:\n\n\nhms_time32_ms <- scalar(hms_time, time32(unit = \"ms\"))\nhms_time32_ms\n\n\nScalar\n14:05:25.000\n\nNotice that the output shows the time in a little more resolution. I find this a helpful touch, since it provides a visual cue letting me know what the unit is. But just to confirm, let’s inspect the type explicitly:\n\n\nhms_time32_ms$type\n\n\nTime32\ntime32[ms]\n\nIf you need to represent the time of day at a higher degree of precision, you’ll want to use the time64 type, which (shockingly!) represents the time of day as a signed 64-bit integer. When using the time64 class you can choose microseconds (unit = \"us\") or nanoseconds (the default, unit = \"ns\") as the unit:\n\n\nhms_time64_us <- scalar(hms_time, time64())\nhms_time64_us\n\n\nScalar\n14:05:25.000000000\n\nThe display is showing more trailing zeros, so you can already be sure that the encoding unit has changed. So the only real question you might have pertains to the author. Will she be tediously predictable and check the data type yet again to verify that the encoding unit is nanoseconds, just like she has done every time before? Yes. Yes she will:\n\n\nhms_time64_us$type\n\n\nTime64\ntime64[ns]\n\nShe is quite tiresome at times.\nIn essence, the arrow defaults are set up such that if you choose time32() when going from R to Arrow without specifying a unit, you will end up with the lowest precision representation of time (rounded to the nearest second), whereas if you do the same with time64() you end up with the highest precision (nanosecond level) representation. When going the other way, arrow will map time32 types and time64 types to hms objects, and the end result is that the time of day will be stored as a double.\n\n\n\n\nFigure 21: Art\n\n\n\n\nOther types\nAs with any story told by humans, this one is incomplete. When I started writing this post I had the ambition to cover every single line in the Table of R/Arrow mappings shown in the arrow documentation. I didn’t quite get there in the end, and there are a few missing cases. I’ll briefly mention them here:\nArrow possesses a “null” value used to represent missing data, and behaves similarly to NA in R. In base R there are several different NA values, corresponding to the different atomic types: NA_logical, NA_character. The way this is handled in arrow is to rely on the vctrs package. Specifically, in vctrs there is a vctrs_unspecified class that works very well here, so Arrow nulls map to vctrs_unspecified and vice versa. In practice, this is where NA values enter into the picture.\nIn R there is the concept of the raw type used to represent bytes. Arrow doesn’t have a natural equivalent of this, but the closest is an unsigned 8-bit integer, so the default is to map raw to uint8.\nI haven’t talked about factors at all, and frankly I probably should have. My only excuse is exhaustion. The post was getting very long and I ran out of energy. The analog of factors in Arrow is the dictionary type. They’re not exact mirrors of each other so it’s worth reading the documentation, but it’s close enough that factors are mapped to dictionaries and vice versa.\nR and Arrow both allow more complicated data structures to be included as columns within a data frame (or Table). For example, in R each element of a column can itself be a data frame. In such cases, the default in arrow is to map each R data frame onto an Arrow struct. Again, this is one where it’s worth reading the documentation, because there are some subtleties with how things like list columns are handled.\n\n\n\n\nFigure 22: Art\n\n\n\n\nThe magic goes away\n\n“Being in love ruins my judgement. It takes my mind off what I’m doing, and I ruin spells”     – Mirandee, from The Magic Goes Away by Larry Niven\n\nWhen I first started using arrow, it was the magic I loved most. Everything just worked. I could move data between R and Arrow without having to think, I could manipulate enormous data sets using dplyr syntax that I’d never even be able to load into R, and I never had to look under the hood. Magic is always compelling. It is delightful. It makes the user feel joy, and it’s the experience the developer wants to provide.\nBut as any teacher will tell you, the magic always goes away. There comes a time when you have to sit down and read the manuals. You have to understand how the magic works, and when you do understand you realise there is no magic. At best, there is design. A system can work using all the default settings because it has been thoughtfully designed, but you will eventually encounter situations when the defaults don’t apply to you. It’s taken me some time to piece all this together, and at the end of the process I feel a lot more confident in my judgment. Having a deeper understanding of data types in Arrow and R is useful to me, even if I’m only using the default schemas.\nI hope the post is helpful for anyone else following a similar path.33 \n\n\n\n\n\nLast updated\n2022-03-08 14:07:51 AEDT\nDetails\nsource code, R environment\n\n\n\n\n\n\nTo be honest, if my goal had been to read the data into Arrow, there was never a need to read it into R in the first place. The code read_csv_arrow(\"magicians.csv\", as_data_frame = FALSE) would create the Table object directly with no need for an intermediary in R. However, for the purposes of this post I’m pretending that I have data in R that I want to transfer to Arrow in order to talk about the translation process, so I’m doing things in a rather inefficient way. On top of that, there’s a whole extra layer of complexity I’m hiding here that relates to ALTREP vectors backed by Arrow. However, that’s a topic for a future post. We can only unravel the magical cloak one thread at a time!↩︎\nEarly in the writing process for this post I talked to the very lovely Jon Keane about this, and they pointed out that there’s a big difference in the “read” functions in arrow and the “translate” functions. The code in the read_*() functions is complicated: it handles everything for you because “reading the data” is a constrained task and the developers can optimise almost everything for you, including the strange edge cases. Translation is harder, and there’s less the developers can do to support it. As a consequence, the code underpinning schema() is much simpler. It takes care of choices for you when those choices are “obvious”, but it leaves all the edge cases for you to deal with. There are a lot of weird edge cases because “translating between languages” is under-determined. Edge cases are left to the user because only the user knows the context.↩︎\nIf you have never watched The Magicians I really need to emphasise that it was a really, really weird show and this is nowhere near as implausible as it might sound. I have literally scared off men who had previously been quite keen on me by making them watch this show. Not kidding.↩︎\nBack my former life as an mathematical psychologist I studied this stuff for a living, and wrote an absurd number of academic papers on how people learn and represent categories. What I wanted to understand was the relationship between human and machine learning, between natural and artificial intelligence, and so on. What I actually learned is that humans and machines are both super weird.↩︎\nAt this point I feel compelled to point out that while I may appear to be a bright young thing with little experience of the world, I am in fact a 44 year old woman and former academic who has read quite a few papers on algorithmic information theory and related fields. So, if you happen to be thinking thoughts along the lines of “aha, she doesn’t know about Turing equivalence!” and are considering explaining it to me… please don’t. This is one of those situations where that pesky little “finite length” prefix code required to allow machine P to simulate machine Q actually matters, and sometimes “finite” includes values like “staggeringly, painfully large”. As I used to wearily tell my students, in real life you can’t ignore the \\(O(1)\\) terms.↩︎\nAs an aside, Michel Foucault actually refers to this Borges passage in the preface to his famous work The Order of Things: An Archaeology of the Human Sciences on how different cultures and historical periods viewed the world from fundamentally different perspectives. According to Foucault, Borges essay “shattered … all the familiar landmarks of thought — our thought, the thought that bears the stamp of our age and our geography — breaking up all the ordered surfaces and all the planes with which we are accustomed to tame the wild profusion of existing things”. Seems fair to say that Borges’ essay was not without its admirers.↩︎\nMuch like the Honourable Member for Kennedy, this “let a thousand OOP systems bloom” philosophy has made me cry many times: sometimes from joy, often from frustration.↩︎\nThe typographical notation for R6 varies because the term can be used to refer to the OOP system itself (which I denote as R6), but could also refer to the R6 package or the R6 object type.↩︎\nNote that the Table object is not a Table: it is the class prototype for Table objects, and is therefore classed R6ClassGenerator. The same is true for Scalar, Schema, ChunkedArray, etc.↩︎\nShould I take this opportunity to discuss the fact that this means that what R actually implements is a three valued logic? No. No I should not. I am going to think it very loudly though.↩︎\nLest anyone think I am too wanton in my use of footnotes in tech blogging, I will simply mention that Dan has a 77-footnote blog post on Gaussian Processes. I am the nice queer in the room.↩︎\nThere is also an R6 method you could use here. snowpiercer$as_vector() would produce exactly the same answer.↩︎\nOkay that was a tortured metaphor and one that I probably don’t want to push too far given that Snowpiercer is a terrifyingly dark show filled with horrible, horrible people. But I’m nice though. Honest! Would I lie to you?↩︎\nRest assured, dear reader, while I am entirely aware of the distinction between countably and uncountably infinite sets, and have been forced to learn more about the cardinality of transfinite numbers than any human deserves to endure, I will not be discussing any of that in this post. The word “infinite” is perfectly serviceable for our purposes, and if anyone even TRIES to discuss this with me further on twitter I will be forced to engage the services of a very unpleasant lawyer…↩︎\nThe “desert of the real” phrase in the title of the section refers to the real numbers, but it’s also a quote from Simulacra and Simulation and The Matrix. Obviously I encountered it in The Matrix first because, all appearances to the contrary, I am uncultured swine.↩︎\nAt this point it is traditional to make a joke about Zeno’s paradox of Achilles and the Tortoise and honestly I did try, but to come up with a good joke I first had to get half an idea, and then I had to refine it half way to being a better idea, and then I had to refine that half way and… I guess I never quite got there in the end. Sorry.↩︎\nSigh. Technically, this is the last bit. R uses a little-endian representation here which I have flipped to a big-endian format so that it can be read from left to right, but for the love of all that is good and precious in this world please let me simplify a few things okay?↩︎\nOkay, if you were reading closely earlier you might be thinking this is wrong and the range should be -1023 to 1024. The reason it’s not is that those to values are reserved for “special” numbers.↩︎\nI still think “Man Tissa” would make a good drag king name, though I’ve been unreliably informed that it may sound odd to Norwegians.↩︎\nIn fact, one of the obnoxious things about the reals (which are uncountably infinite) is that almost all reals have infinitely long mantissas. Even if you had a infinite number of digits to work with (a countably infinite set) you’re still in trouble. Everything sucks, real numbers are almost surely uncomputable (yes that’s an actual result), and I don’t want to think about it any more and I need a lie down.↩︎\nOkay, so contrary to my stated intentions we’ve actually ended up quite a long way down into the IEEE 754 standard, so I might as well make an extra observation while we’re down here. Tests of floating point equality aren’t tests of mathematical equality. They’re really just checks that the absolute difference between two numbers is smaller than the machine precision. The value of the machine precision is stored in R as .Machine$double.eps.↩︎\nSome precision is needed here: in this post I am using the names that appear in the documentation to the arrow R package. I’m doing this because the intended audience is an R user who wants to use the arrow package to interact with Arrow. However, you should be aware that these types are given slightly different names in the C++ documentation to libarrow to which arrow provides bindings. In that documentation the terminology is as follows: float64 is called double, float32 is called float, and float16 is called half-float.↩︎\nThey are both little-endian too.↩︎\nThat’s assuming we’re writing numbers in Arabic number system. I suppose it would be different if our orthographic representations adopted the Sumerian sexagesimal notation. Admittedly, neither R nor Arrow existed at the time, so it’s a moot point. All I’m really saying is that decimal systems are no less arbitrary than binary ones. The problem arises because of the mismatch, not because one encoding is inherently better than the other.↩︎\nAs noted in the R internals manual, the specific data structure is referred to as a CHARSXP. For the purposes of the current post I’m pretending that character strings are always encoded as UTF-8 because there’s no need to complicate matters by talking about things like Latin-1, but be aware that R does support those things. If you’re looking for a good overview of what UTF-8 encoding is all about, this blog post on how unicode works is helpful.↩︎\nMore strictly, it is a symbol that points to an object. R makes a distinction between the symbol and the object to which it links, and allows multiple labels to point at the same object. There’s an excellent discussion of this in Chapter 3 of Advanced R↩︎\nOnce again, there’s a little terminology to explain because there’s some inconsistency in how the types are referred to in the Arrow C++ documentation and the arrow R package documentation. In the list of data types for libarrow you’ll find references to string types and large_string types. However, in list of data types documentation for the arrow R package you’ll see the same data types referred to as utf8 and large_utf8.↩︎\nNo I am not going to talk about them in this post. Masochist though I may be, nobody loves that much pain. If you are curious you will simply have to wait for a later post!↩︎\nPerhaps surprisingly, this number is encoded as a double and not an integer.↩︎\nAgain, this is stored as a double and not an integer. You can verify this with the command typeof(Sys.time())↩︎\nA little counterintuitively, the value of sec ranges from 0 to 61, presumably because leap seconds are a thing. I am NOT going to torture myself with that one today. My life has quite enough torture in it already.↩︎\nYes, I looked up her time and location of birth on an astrology website. I am, after all, a queer. I feel that I have been quite clear on this, and being weird about astrology it is one of the fine traditions of our people.↩︎\nA thank you to Jon Keane, Steph Hazlitt, and Neal Richardson for helpful conversations, encouragement, and feedback that have greatly improved the post.↩︎\n",
    "preview": "posts/2022-03-04_data-types-in-arrow-and-r/img/cover.jpg",
    "last_modified": "2022-03-08T14:07:52+11:00",
    "input_file": "index.knit.md"
  },
  {
    "path": "posts/2022-02-11_r-scripts-for-twitter-blocks/",
    "title": "R scripts for twitter mutes and blocks",
    "description": "Social media safety tools like muting and blocking are often misused, but for people who are targeted for harassment they are powerful and important. This is a brief tutorial illustrating how to partially automate twitter mutes and blocks from R. The intended use is defensive, to help people minimise the impact if they are targeted by large scale harassment.",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2022-02-11",
    "categories": [],
    "contents": "\n\nContents\nWarning: off-label usage\nSetting up\nWrite a block/mute function\nPreparing to scale\nPractice safe cancellation\nCheck your quotas my loves\nBe chatty babes\n\nScaling up\nEpilogue\n\n\n\n\nTwitter is a complicated place. I’ve met some of my closest friends through twitter, it’s the place where I keep in touch with my professional community, and it’s an important part of my work as a developer advocate at Voltron Data. But it’s also a general purpose social media site, and there is a lot of content out there I prefer not to see. In particular, because I’m transgender and have absolutely no desire to participate in or even view the public debate that surrounds trans lives, I want to keep that kind of content off my twitter feed. This is particularly salient to me today as a member of the Australian LGBT community. Most people who follow me on twitter probably wouldn’t be aware of it, but it’s been a rough week for LGBT folks in Australia courtesy of a rather intense political fight over LGBT rights and the ostensible (and in my personal opinion, largely fictitious) conflict with religious freedom. The details of Australian politics don’t matter for this post, however. What matters is that these kinds of political disputes necessarily spill over into my twitter feed, and it is often distressing. Events like this one are quite commonplace in my online life, and as a consequence I’ve found it helpful to partially automate my use of twitter safety features such as muting and blocking. Because my experience is not unique, I thought it might be useful to write a short post talking about the the scripts I use to manage twitter safety features from R using the rtweet package.\nWarning: off-label usage\nLet’s make one thing very clear at the outset. A lot of what I’m going to be doing in this blog post is “off label” use of the rtweet package. You’ll see me use it in ways that the writers of the package didn’t really intend it to be used (I think), and you’ll see me dig into the internals of the package and rely on unexported functions.\nThis is almost always a bad idea.\nIf you haven’t seen it, Hadley Wickham gave a very good talk about maintaining R packages as part the rstudio::global 2021 conference. At about the 19 minute mark he talks about the “off label” metaphor. In the context of medication, “off label” refers to any use of a medication that it’s not officially approved for. It might work, but there could be unknown consequences because maybe it hasn’t been fully explored in this context. When applied to software, “off label” use means you’re doing something with a function or package that the designer doesn’t really intend. Your code might work now, but if you’re relying on “incidental” properties of the function to achieve your desired ends, you’re taking a risk. Package maintainers will usually go to considerable lengths to make sure that updates to their packages don’t break your code when you’re using it for its intended purpose… but if you’re doing something “off label” there’s a good chance that the maintainers won’t have thought about your particular use case and they might unintentionally break your code.\nIn short: you go off-label at your own risk. In this particular instance it is a risk I’ve chosen to take and I’m perfectly happy to fix my scripts if (or, let’s be realistic, when) future updates to rtweet cause them to break. Or possibly abandon my scripts. I knew the risks when I went off-label.\nBut if you follow me along this path you need to be aware of the risk too… don’t go off-label lightly! In my case I didn’t do this on a whim: I chose this path about a year ago out of personal desperation, and I’ve had to rewrite the scripts a lot in that time. So, please be careful.\nSetting up\nThe first step is to make sure you have the developer version of rtweet: the scripts I’ve been using rely on the dev version of the package and won’t work with the current CRAN version. To be precise, I’m currently using rtweet version 0.7.0.9011. If you don’t have it, this is the command to install:\n\n\nremotes::install_github(\"ropensci/rtweet\")\n\n\n\nThe second step is to authenticate so that rtweet can access private information about your twitter account. The good news here is that the authentication mechanism in the dev version of rtweet is a little more streamlined than it used to be. You only need to authenticate once on your machine, and the command is as simple as this:\n\n\nauth_setup_default()\n\n\n\nWith that, you should be ready to start!\nWrite a block/mute function\nOur first task will be to write a function that can be used either to block or to mute a twitter account. A little whimsically I decided to call it cancel_user(). Quite obviously the name is a personal joke, since it does not “cancel” anyone: the only thing blocking or muting accomplishes is to give you a little distance from the account you’re muting or blocking.\nThe reason for wanting one function that can switch between muting and blocking is that I typically run every process twice, once on my primary account (where, with one exception, I don’t block anyone but mute extensively) and once on my private account (where I block quite aggressively). I’d like to be able to reuse my code in both contexts, so I’ll design the core function to handle both blocks and mutes. Here’s the code:\n\n\ncancel_user <- function(user, type) {\n  api <- c(\n    \"block\" = \"/1.1/blocks/create\",\n    \"mute\" = \"/1.1/mutes/users/create\"\n  )\n  rtweet:::TWIT_post(\n    token = NULL,\n    api = api[type],\n    params = list(user_id = user)\n  )\n}\n\n\n\nThere’s quite a bit to unpack here.\nFirst notice that I have called the internal function rtweet:::TWIT_post(). This is the clearest indication that I’m working off-label. If I were interested only in muting users and never blocking, I’d be able to do this without going off-label because rtweet has an exported function called post_mute() that you can use to mute an account. However, there is no corresponding post_block() function (possibly for good reasons) so I’ve written cancel_user() as my personal workaround.\nSecond, let’s look at the interface to the function. Unlike the more sophisticated functions provided by rtweet this is a bare-bones interface. The user argument must be the numerical identifier corresponding to the account you want to block/mute, and type should be either be \"mute\" or \"block\" depending on which action you wish to take.\nFinding the numeric user id code for any given user is straightforward with rtweet. It provides a handy lookup_users() function that you can employ for this. The actual output of the function is a data frame containing a lot of public information about the user, but the relevant information is the user_id variable. So, if you hate me enough to want to mute or block me on twitter, I’ll make it easy on you. Here’s my numeric user id:\n\n\nlookup_users(\"djnavarro\")$user_id\n\n\n\n\n[1] \"108899342\"\n\nAs it turns out, for the particular scripts I use, I rarely need to rely on lookup_users() but it is a very handy thing to know about.\nPreparing to scale\nAs written there’s nothing particularly wrong with the cancel_user() function, but it’s also not very useful. I can use it to block or mute an individual account, sure, but if that were the problem I wanted to solve it would be a lot easier to do that using the block/mute buttons on twitter. I don’t need to write an R function to do that.\nThe only real reason to implement this as an R function is if you intend to automate it in some fashion and repeat the operation on a scale that would be impossible to do manually. To give a sense of the scale at which I’ve had to implement this I currently have about 220000 accounts blocked from my private account, and a similar number muted from my main account. There’s no way I could possibly do that manually, so I’m going to need to be a little more thoughtful about my cancel_user() function.\nPractice safe cancellation\nThe first step in making sure the function works well “at scale”1 is error handling. If I have a list of 50000 account I want to block but for one reason or another cancel_user() throws an error on the 5th account, I don’t want to prevent R from attempting to block the remaining 49995 accounts. Better to catch the error and move on. My preferred way to do this is to use purrr::safely():\n\n\ncancel_safely <- purrr::safely(cancel_user)\n\n\n\nThe cancel_safely() function operates the same way as cancel_user() with one exception. It never throws an error: it always returns a list with two elements, result and error. One of these is always NULL. If cancel_user() throws an error then result is NULL and error contains the error object; if it doesn’t then error is null and result contains the output from cancel_user().\nNot surprisingly, the cancel_safely() function is much more useful when we’re trying to block or mute large numbers of accounts on twitter.\nCheck your quotas my loves\nOne thing that has always puzzled me about the twitter API is that it places rate limits on how many mutes you can post in any 15 minute period, but doesn’t seem to impose any limits on the number of blocks you can post. I’m sure they have their reasons for doing it, but it’s inconvenient. One consequence of this is that there are lots of tools that exist already for blocking large numbers of accounts. You don’t actually need to write a custom R script for that! But if you want to mute large numbers of accounts, it’s a lot harder: you have to write a script that keeps posting mutes until the rate limits are exceeded, then pauses until they reset, and then starts posting mutes again. Speaking from experience, this takes a very long time. As a purely practical matter, you don’t want to be in the business of muting large numbers of accounts unless you are patient and have a very good reason. In my case, I did.\nIn any case, one thing we’ll need to write a rate_exceeded() function that returns TRUE if we’ve hit the rate limit and FALSE if we haven’t. That’s actually pretty easy to do, as it turns out, because any time our attempt to mute (or block) fails, the cancel_safely() function will catch the error and capture the error message. So all we have to do to write a rate_exceeded() function is to check to see if there’s an error message, and if there is a message, see if that message informs us that the rate limite has been exceeded. This function accomplishes that goal:\n\n\nrate_exceeded <- function(out) {\n  if(is.null(out$error)) return(FALSE)\n  if(grepl(\"limit exceeded\", out$error$message)) return(TRUE)\n  return(FALSE)\n}\n\n\n\nBecause blocks are not rate limited, in practice this function only applies when you’re trying to mute accounts.\nBe chatty babes\nThe last step in preparing the cancellation function to work well at scale is to make it chatty. In practice, a mass block/mute operation is something you leave running in its own R session, so you want it to leave behind an audit trail that describes its actions. A moderately verbose function is good here. You could make this as sophisticated as you like, but I find this works nicely for me:\n\n\ncancel_verbosely <- function(user, type) {\n\n  # notify user attempt has started\n  msg <- c(\n    \"block\" = \"blocking user id\",\n    \"mute\" = \"muting user id\"\n  )\n  withr::local_options(scipen = 14)\n  cli::cli_process_start(paste(msg[type], user))\n\n  # make the attempt; wait 5 mins if rate limits \n  # exceeded and try again\n  repeat {\n    out <- cancel_safely(user, type)\n    if(rate_exceeded(out)) {\n      Sys.sleep(300)\n    } else {\n      break\n    }\n  }\n\n  # notify user of the outcome\n  if(is.null(out$result)) {\n    cli::cli_process_failed()\n  } else{\n    cli::cli_process_done()\n  }\n}\n\n\n\nHere’s what the output looks like when it successfully blocks a user. Not fancy, but it shows one line per account, specifies whether the action was a block or a mute, and makes clear whether the attempt succeeded or failed:\n✓ blocking user id 15xxxx66 ... done\n(where, in the real output the user id for the blocked account is of course not censored). In this function I’ve used the lovely cli package to create pretty messages at the R command line, but there’s nothing stopping you from using simpler tools if you’d prefer.\nScaling up\nNow that we have a version of our block/mute function that is suitable for use on a larger scale, it’s time to put it into practice. Let’s say I have a list of 50000 users represented as numeric ids and I want to block (or mute) all these accounts. To do this, I’ll need a vectorised version of cancellation function. Thanks to the functional programming tools in the purrr package, this is not too difficult. Here’s the cancel_users() function that I use:\n\n\ncancel_users <- function(users, type) {\n  msg <- c(\"block\" = \"blocking \", \"mute\" = \"muting \")\n  cat(msg[type], length(users), \" users\\n...\")\n  purrr::walk(users, cancel_verbosely, type = type)\n}\n\n\n\nWhen given a vector of user ids, the cancel_users() function will attempt to block/mute them all one at a time. When rate limits are exceeded it will pause and wait for them to reset, and then continue with the process. For mass muting in particular it can take a long time, so it’s the kind of thing you run in its own session while you go do something else with your life. If you want to be clever about it you can make it a background job and sink the output to a log file but honestly I’m usually too lazy to bother with that: all I’m trying to do is sanitise my twitter experience, I’m not deploying production code here.\nThe trickier question is “where do I get this block list from?”\nHere, I’m not going to be too specific, for a couple of reasons. Firstly, I don’t want to be in the business of teaching people how to track down hidden networks of users embedded in social media. That’s not something I’m comfortable doing. Secondly, if you’re doing this defensively (i.e., you’re protecting yourself from attack) then you probably already know something about where the attacks are coming from. You already have your own list of key names, because they’re the people who keep harassing you. Really, your only goal is to block them and their followers, because the thing that’s happening is they’re targeting you and they’re using their follower base as a weapon. Right? I mean if that’s not the situation you’re in, and what you’re actually trying to do is seek out a hidden population to potentially target them… yeah I’m not sure I want to be telling you the other tricks I know. So let’s keep it very simple.\nThe easiest trick in the book (and, honestly, one of the most powerful when you’re trying to block out harassment from a centralised “hub-and-spokes” network), is simply to find every account that follows more than \\(k\\) of the \\(n\\) of the key actors, and block/mute them. Actually, in the case of “astroturf” organisations that don’t have real grassroots support, you can probably just pick a few of the big names and block (or mute) all their followers. That will eliminate the vast majority of the horrible traffic that you’re trying to avoid. (Yes, I am speaking from experience here!)\nThe rtweet package makes this fairly painless courtesy of the get_followers() function. Twitter makes follower lists public whenever the account itself is public, so you can use get_followers() to return a tibble that contains the user ids for all followers of a particular account.2 Here’s an example showing how you an write a wrapper around get_followers() and use it to block/mute everyone who follows a particular account:\n\n\ncancel_followers <- function(user, type = \"block\", n_max = 50000, precancelled = numeric(0)) {\n\n  followers <- get_followers(user, n = n_max, retryonratelimit = TRUE)\n  followers <- followers$from_id\n\n  uncancelled <- setdiff(followers, precancelled)\n  uncancelled <- sort(as.numeric(uncancelled))\n\n  cancel_users(uncancelled, type = type)\n}\n\n\n\nNote the precancelled argument to this function. If you have a vector of numeric ids containing users that you’ve already blocked/muted, there’s no point wasting time and bandwidth trying to block them again, so the function will ignore anything on that list. You could use the same idea to build a whitelist of accounts that would never get blocked or muted regardless of who they follow.\nWe’re almost at the end of the post. There’s only one other thing I want to show here, and that’s how to extract a list of all the accounts you currently have muted or blocked. Again this particular bit of functionality isn’t exposed by rtweet directly, so you’ll notice that I’ve had to go off-label again and call an unexported function!\n\n\nlist_cancelled <- function(type, n_max, ...) {\n  api <- c(\n    \"block\" = \"/1.1/blocks/ids\",\n    \"mute\" = \"/1.1/mutes/users/ids\"\n  )\n  params <- list(\n    include_entities = \"false\",\n    skip_status = \"true\"\n  )\n  resp <- rtweet:::TWIT_paginate_cursor(NULL, api[type], params, n = n_max, ...)\n  users <- unlist(lapply(resp, function(x) x$ids))\n  return(users)\n}\n\n\n\nI’m not going to expand on this one, other than to mention that when you get to the point where you have hundreds of thousands of blocked or muted accounts, it’s handy to use a function like this from time to time, and to save the results locally so that you can be a little more efficient whenever you next need to refresh your block/mute lists.\nEpilogue\nI wrote this post in two minds. On the one hand, the rtweet developers made a decision not to support blocklists for a reason, and presumably the twitter developers have some reason for making it difficult to mute large numbers of accounts. It’s very rarely a good idea to write code that works against the clear intent of the tools you’re relying on. It is almost certain to break later on.\nOn the other hand, this is functionality that I personally need. On my primary account I’ve made the deliberate decision not to block anyone3 but to keep my twitter feed free of a particular type of content I have had to mute an extremely large number of accounts. Twitter makes that difficult to do, but with the help of these scripts I managed to automate the process. After a month or two, with a little manual intervention, the problematic content was gone from my feed, and I was able to get back to doing my job. So, if anyone else finds themselves in a similar situation, hopefully this blog post will help.\n\n\nLast updated\n2022-02-12 11:17:23 AEDT\nDetails\nsource code, R environment\n\n\n\n\n\n\nI mean, what exactly do we mean by “at scale” here? In the context of data wrangling, a hundred thousand anything is rarely considered “at scale”. But mute/blocks on twitter are usually measured in the tens or hundreds at most. Doing things at the hundreds of thousands scale is a big step up from the typical use case, and as noted later, because of how the twitter API handles mutes it’s something that can take months to complete.↩︎\nThis is not unrelated to the reason why I keep my follows hidden behind private lists. In public it looks like I don’t follow anyone but using private lists I actually follow several hundred people! Some time ago I had some unpleasant experiences with people using that information to target me, so now I use private lists exclusively. Being a trans woman on the internet is fuuuuuuuun.↩︎\nThere is one exception to this rule, but that’s a personal matter.↩︎\n",
    "preview": "posts/2022-02-11_r-scripts-for-twitter-blocks/img/jeremy-bezanger-Nh1tBGgEcG4-unsplash.jpg",
    "last_modified": "2022-03-04T23:38:00+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-01-18_binding-arrow-to-r/",
    "title": "Binding Apache Arrow to R",
    "description": "I've been learning how to program with Apache Arrow inside R, and also I have been watching the SyFy show \"The Magicians\" obsessively. For no sensible reason I wrote a blog post that combines these two fixations",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2022-01-18",
    "categories": [],
    "contents": "\n\nContents\nWhy am I writing this?\nWhat is Arrow?\nUsing Arrow in R\nUsing “arrowplyr” bindings\nCalling “arrow-prefix” functions\nA slightly-evil digression\nPart one: Object oriented programming\nPart two: Metaprogramming\nCooperative magic\n\nCalling libarrow directly\nArrow expressions\nWriting arrowplyr functions\nEpilogue: Where’s the rest of the owl?\n\n\n\n\nSo I have a new job.\nIn my previous job as an academic, a large part of my work – my favourite part, if I’m honest – involved creating open access resources to help people use modern open source tools for data analysis. In my totally different role in developer relations at Voltron Data, a large part of my work involves, um … [checks job description] … creating open access resources to help people use modern open source tools for data analysis. Well okay then!\nI’d better get on that, I suppose?\n\n\n\nFigure 1: Eliot Waugh. All I can say at this point is that thanks to his magnificent performance I have developed a terribly awkward crush on Hale Appleman. Image via giphy, copyright syfy\n\n\n\nYes I have been binge watching The Magicians lately. My preemptive apologies to everyone for the gif spam.\nI’ve been in my current role for a little over a week (or had been when I started writing this post!), and today my first contribution to Apache Arrow was merged. It was very modest contribution: I wrote some code that determines whether any given year is a leap year. It precisely mirrors the behaviour of the leap_year() function in the lubridate package, except that it can be applied to Arrow data and it will behave itself when used in the context of a dplyr pipeline (more on that later). The code itself is not complicated, but it relies on a little magic and a deeper understanding of Arrow than I possessed two weeks ago.\n\nThroughout this post I’ll use boldface to refer to specific R packages like dplyr or C++ libraries like libarrow\nThis post is the story of how I learned Arrow magic. ✨ 🏹 ✨\n\nWhy am I writing this?\n\n\nThe danger of sublimated trauma is a major theme in our story      – The Great God Ember (The Magicians: Season 2, Episode 3)\n\nIt might seem peculiar that I’m writing such a long post about such a tiny contribution to an open source project. After all, it doesn’t actually take a lot of work to figure out how to detect leap years. You can do it in one line of R code:\n\n\n(year %% 4 == 0) & ((year %% 100 != 0) | (year %% 400 == 0))\n\n\n\nThis is a logical expression corresponding to the following rules. If the year is divisible by 4 then it is a leap year (e.g., 1996 was a leap year). But there’s an exception: if year is divisible by 100 then it isn’t a leap year (e.g., 1900 wasn’t a leap year). But there’s also an exception to the exception: if year is divisible by 400 then it is a leap year (e.g., 2000 was a leap year). Yes, the process of mapping the verbally stated rules onto a logical expression is kind of annoying, but it’s not conceptually difficult or unusual. There is no magic in leap year calculation, no mystery that needs unpacking and explaining.\n\nAll this assumes years are counted using the Gregorian calendar. There are, of course, other calendars\nThe magic comes in when you start thinking about what the arrow package actually does. It lets you write perfectly ordinary R code for data manipulation that returns perfectly ordinary R data structures, even though the data have never been loaded into R and all the computation is performed externally using Apache Arrow. The code you write with arrow looks and feels like regular R code, but almost none of the work is being done by R. This is deep magic, and it is this magic that needs to be demystified.\n\n\n\nFigure 2: Two key moments in “The Magicians” when Julia Wicker discovers she can do magic, defying the expectations of others. One moment occurs at the start of Season 1 as a novice, after she had been told she failed the magic exams at Brakebills University; another moment occurs at the end of Season 2 after all magic has supposedly been turned off by the Old Gods or something. The parallel between the two moments is striking. Oh and Quentin Coldwater is in both scenes too I guess. Whatevs. Image via giphy, copyright syfy\n\n\n\nI have three reasons for wanting to unpack and explain this magic.\nThe first reason is personal: I’ve been a professional educator for over 15 years and it has become habit. The moment I learn a new thing my first impulse is to work out how to explain it to someone else.\nThe second reasons is professional: I work for Voltron Data now, and part of my job is to make an educational contribution to the open source Apache Arrow project. Arrow is a pretty cool project, but there’s very little value in magnificent software if you don’t help people learn how to take advantage of it!\nThe third reason is ethical: a readable tutorial/explanation lowers barriers to entry. I mean, let’s be honest: the only reason I was able to work up the courage to contribute to Apache Arrow is that I work for a company that is deeply invested in open source software and in the Arrow project specifically. I had colleagues and friends I could ask for advice. If I failed I knew they would be there to help me. I had a safety net.\nThe last of these is huuuuuuugely important from a community point of view. Not everyone has the safety net that I have, and it makes a big difference. In a former life I’ve been on the other side of this divide: I’ve been the person with no support, nobody to ask for help, and I’ve run afoul of capricious gatekeeping in the open source world. It is a deeply unpleasant experience, and one I would not wish upon anyone else. We lose good people when this happens, and I really don’t want that!\nThe quote from the beginning of this section, the one about the danger of sublimated trauma, is relevant here: if we want healthy user communities it is our obligation on the inside to provide safe environments and delightful experiences. Our job is to find and remove barriers to entry. We want to provide that “safety net” that ensures that even if you fall (because we all fall sometimes), you don’t get hurt. Failing safely at something can be a learning experience; suffering trauma, however, is almost never healthy. So yeah, this matters to me. I want to take what I’ve learned now that I’m on the inside and make that knowledge more widely accessible.\n\nEveryone deserves a safety net when first learning to walk the tightropes. It’s not a luxury, it’s a necessity\nBefore diving in, I should say something about the “assumed knowledge” for this post.\nI’ll do my best to explain R concepts as I go, but the post does assume that the reader is comfortable in R and knows how to use dplyr for data manipulation. If you need a refresher on these topics, I cannot recommend “R for data science” highly enough. It’s a fabulous resource!\nOn the Arrow side it would help a little if you have some vague idea of what Arrow is about. I will of course explain as I go, but if you’re looking for a post that starts at the very beginning, I wrote a post on “Getting started with Apache Arrow” that does exactly this and discusses a lot of the basics.\nFinally, a tiny R warning: later in the post I will do a little excursion into object oriented programming and metaprogramming in R, which will be familiar to some but not all readers. If you’re not comfortable with these topics, you should still be okay to skim those sections and still get the important parts of this post. It’s not essential to understand the main ideas.\n\n\n\nFigure 3: The Great God Ember. Capricious, chaotic, and utterly unreliable unless what you’re looking for is a whimsical death. Pretty much the opposite of what we’d hope for in a healthy open source community really! He is, however, a very entertaining character. Image via giphy, copyright syfy\n\n\n\n\nWhat is Arrow?\n\nIn case you decided not to read the introductory “Getting started with Apache Arrow” post, here’s an extremely condensed version. Apache Arrow is a standard and open source library that represents tabular data efficiently in memory. More generally it refers to a collection of tools used to work with Arrow data. There are libraries supporting Arrow in many different programming languages, including C, C++, C#, Go, Java, JavaScript, Julia, MATLAB, Python, R, Ruby, and Rust. It’s pretty cool.\n\nUsing Arrow in R\n\nA fundamental thing to understand about the arrow package in R is that it doesn’t implement the Apache Arrow standard directly. In fact, it tries very hard not to do any of the heavy lifting itself. There’s a C++ library that does that in a super efficient way, and the job of the R package is to supply bindings that allow the R user to interact with that library using a familiar interface. The C++ library is called libarrow. Although the long term goal is to make the integration so seamless that you can use the arrow R package without ever needing to understand the C++ library, my experience has been that most people want to know something about what’s happening under the hood. It can be unsettling to find yourself programming with tools you don’t quite understand, so I’ll dig a little deeper in this post.\nLet’s start with the C++ library. The role of libarrow is to do all the heavy computational work. It implements all the Arrow standards for representing tabular data in memory, provides support for the Apache “Inter-Process Communication” (IPC) protocol that lets you efficiently transfer data from one application to another, and supplies various compute kernels that allow you to do some data wrangling when your data are represented as an Arrow table.1 It is, fundamentally, the engine that makes everything work.\nWhat about the R package? The role of arrow is to expose the functionality of libarrow to the R user, to make that functionality feel “natural” in R, and to make it easier for R users to write Arrow code that is smoothly interoperable with Arrow code written in other languages (e.g., Python). In order to give you the flexibility you need, the arrow package allows you to interact with libarrow at three different levels of abstraction:\nThere’s a heavily abstracted interface that uses the dplyr bindings supplied by arrow. This version strives to make libarrow almost completely invisible, hidden behind an interface that uses familiar R function names.\nThere’s a lightly abstracted interface you can access using the arrow_*() functions. This version exposes the libarrow functions without attempting to exactly mirror any particular R functions, and provides a little syntactic sugar to make your life easier.\nFinally, there’s a minimally abstracted interface using call_function(). This version provides a bare bones interface, without any of the syntactic sugar.\nOver the next few sections section I’ll talk about these three levels of abstraction. So let’s load the packages we’re going to need for this post and dive right in!\n\n\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(arrow)\n\n\n\n\n\n\nFigure 4: Penny Adiyodi in the Neitherlands, diving head first into a fountain that transports him to a new and magical world. I cannot stress enough that Penny does not, by and large, make good choices. Impulse control is a virtue, but not one that he possesses in abundance. Image via giphy, copyright syfy\n\n\n\n\nUsing “arrowplyr” bindings\n\n\nI think I have some special fish magicks.     – Josh Hoberman (The Magicians: Season 4, Episode 13)\n\nWhen I wrote my Getting started with Apache Arrow post, I concluded with an illustration of how you can write dplyr code that will work smoothly in R even when the data themselves are stored in Arrow. Here’s a little recap of how that works, using a tiny data set I pulled from The Magicians Wikipedia page. Here’s what that data set looks like:\n\n\nmagicians <- read_csv_arrow(\"magicians.csv\", as_data_frame = TRUE)\nmagicians\n\n\n# A tibble: 65 × 6\n   season episode title                      air_date   rating viewers\n    <int>   <int> <chr>                      <date>      <dbl>   <dbl>\n 1      1       1 Unauthorized Magic         2015-12-16    0.2    0.92\n 2      1       2 The Source of Magic        2016-01-25    0.4    1.11\n 3      1       3 Consequences of Advanced … 2016-02-01    0.4    0.9 \n 4      1       4 The World in the Walls     2016-02-08    0.3    0.75\n 5      1       5 Mendings, Major and Minor  2016-02-15    0.3    0.75\n 6      1       6 Impractical Applications   2016-02-22    0.3    0.65\n 7      1       7 The Mayakovsky Circumstan… 2016-02-29    0.3    0.7 \n 8      1       8 The Strangled Heart        2016-03-07    0.3    0.67\n 9      1       9 The Writing Room           2016-03-14    0.3    0.71\n10      1      10 Homecoming                 2016-03-21    0.3    0.78\n# … with 55 more rows\n\nIn the code above I used the read_csv_arrow() function from the arrow package. If you’ve used the read_csv() function from readr this will seem very familiar: although Arrow C++ code is doing a lot of the work under the hood, the Arrow options have been chosen to mirror the familiar readr interface. The as_data_frame argument is specific to arrow though: when it is TRUE the data are imported into R as a data frame or tibble, and when it is FALSE the data are imported into Arrow. Strictly speaking I didn’t need to specify it in this example because TRUE is the default value. I ony included here so that I could draw attention to it.\nOkay, now that we have the data let’s start with a fairly typical data analysis process: computing summary variables. Perhaps I want to know the average popularity and ratings for each season of The Magicians, and extract the year in which the season aired. The dplyr package provides me with the tools I need to do this, using functions like mutate() to create new variables, group_by() to specify grouping variables, and summarise() to aggregate data within group:\n\n\nmagicians %>% \n  mutate(year = year(air_date)) %>% \n  group_by(season) %>% \n  summarise(\n    viewers = mean(viewers),\n    rating = mean(rating), \n    year = max(year)\n  )\n\n\n# A tibble: 5 × 4\n  season viewers rating  year\n   <int>   <dbl>  <dbl> <dbl>\n1      1   0.776  0.308  2016\n2      2   0.788  0.323  2017\n3      3   0.696  0.269  2018\n4      4   0.541  0.2    2019\n5      5   0.353  0.111  2020\n\nAll of these computations take place within R. The magicians data set is stored in R, and all the calculations are done using this data structure.\nWhat can we do when the data are stored in Arrow? It turns out the code is almost identical, but the first thing I’ll need to do is load the data into Arrow. The simplest way to do this is to set as_data_frame = FALSE when calling arrow_read_csv()\n\n\narrowmagicks <- read_csv_arrow(\"magicians.csv\", as_data_frame = FALSE)\narrowmagicks\n\n\nTable\n65 rows x 6 columns\n$season <int64>\n$episode <int64>\n$title <string>\n$air_date <date32[day]>\n$rating <double>\n$viewers <double>\n\n\nThe “arrowmagicks” variable name is a reference to the quote at the start of the section. For a while Josh was convinced he had been gifted with special magic because he had been a fish. It made sense at the time, I guess? It’s a weird show\nWhen I do this, two things happen. First, a data set is created outside of R in memory allocated to Arrow: all of the computations will be done on that data set. Second, the arrowmagicks variable is created inside R, which consists of a pointer to the actual data along with some handy metadata.\nThe most natural way to work with this data in R is to make sure that both the arrow and dplyr packages are loaded, and then write regular dplyr code. You can do this because the arrow package supplies methods for dplyr functions, and these methods will be called whenever the input data is an Arrow Table. I’ll refer to this data analyses that use this workflow as “arrowplyr pipelines”. Here’s an example of an arrowplyr pipeline:\n\nI’ve chosen not to boldface the “arrowplyr” terminology. arrow is a package and dplyr is a package, but arrowplyr isn’t. It’s simply a convenient fiction\n\n\narrowmagicks %>% \n  mutate(year = year(air_date)) %>% \n  group_by(season) %>% \n  summarise(\n    viewers = mean(viewers),\n    rating = mean(rating), \n    year = max(year)\n  )\n\n\nInMemoryDataset (query)\nseason: int64\nviewers: double\nrating: double\nyear: int64\n\nSee $.data for the source Arrow object\n\nIt looks like a regular dplyr pipeline, but because the input is arrowmagicks (an Arrow Table object), the effect of this is construct a query that can be passed to libarrow to be evaluated.\nIt’s important to realise that at this point, all we have done is define a query: no computations have been performed on the Arrow data. This is a deliberate choice for efficiency purposes: on the C++ side there are a lot of performance optimisations that are only possible because libarrow has access to the entire query before any computations are performed. As a consequence of this, you need to explicitly tell Arrow when you want to pull the trigger and execute the query.\n\nLater in the post I’ll talk about Arrow Expressions, the tool that powers this trickery\nThere are two ways to trigger query execution, one using the compute() function and the other using collect(). These two functions behave slightly differently and are useful for different purposes. The compute() function runs the query, but leaves the resulting data inside Arrow:\n\n\narrowmagicks %>% \n  mutate(year = year(air_date)) %>% \n  group_by(season) %>% \n  summarise(\n    viewers = mean(viewers),\n    rating = mean(rating), \n    year = max(year)\n  ) %>% \n  compute()\n\n\nTable\n5 rows x 4 columns\n$season <int64>\n$viewers <double>\n$rating <double>\n$year <int64>\n\nThis is useful whenever you’re creating an intermediate data set that you want to reuse in Arrow later, but don’t need to use this intermediate data structure inside R. If, however, you want the output to be pulled into R so that you can do R computation with it, use the collect() function:\n\n\narrowmagicks %>% \n  mutate(year = year(air_date)) %>% \n  group_by(season) %>% \n  summarise(\n    viewers = mean(viewers),\n    rating = mean(rating), \n    year = max(year)\n  ) %>% \n  collect()\n\n\n# A tibble: 5 × 4\n  season viewers rating  year\n   <int>   <dbl>  <dbl> <int>\n1      1   0.776  0.308  2016\n2      2   0.788  0.323  2017\n3      3   0.696  0.269  2018\n4      4   0.541  0.2    2019\n5      5   0.353  0.111  2020\n\nThe nice thing for R users is that all of this feels like regular R code. Under the hood libarrow is doing all the serious computation, but at the R level the user really doesn’t need to worry too much about that. The arrowplyr toolkit works seamlessly and invisibly.\nIn our ideal world, the arrowplyr interface is all you would ever need to use. Internally, the arrow package would intercept all the R function calls you make, and replace them with an equivalent function that performs exactly the same computation using libarrow. You the user would never need to think about what’s happening under the hood.\nReal life, however, is filled with leaky abstractions, and arrowplyr is no exception. Because it’s a huge project that is under active development, there’s a lot of functionality being introduced. As an example, the current version of the package (v6.0.1) has limited support for tidyverse packages like lubridate and stringr. It’s awesome that this functionality is coming online, but because it’s happening so quickly there are gaps. The small contribution that I made today was to fill one of those gaps: currently, you can’t refer to the leap_year() function from lubridate in an arrowplyr pipeline. Well, technically you can, but whenever arrow encounters a function it doesn’t know how to execute in Arrow it throws a warning, pulls the data into R, and completes the query using native R code. Here’s what that looks like:\n\n\narrowmagicks %>% \n  mutate(\n    year = year(air_date), \n    leap = leap_year(air_date)\n  ) %>% \n  collect()\n\n\nWarning: Expression leap_year(air_date) not supported in Arrow;\npulling data into R\n# A tibble: 65 × 8\n   season episode title          air_date   rating viewers  year leap \n    <int>   <int> <chr>          <date>      <dbl>   <dbl> <dbl> <lgl>\n 1      1       1 Unauthorized … 2015-12-16    0.2    0.92  2015 FALSE\n 2      1       2 The Source of… 2016-01-25    0.4    1.11  2016 TRUE \n 3      1       3 Consequences … 2016-02-01    0.4    0.9   2016 TRUE \n 4      1       4 The World in … 2016-02-08    0.3    0.75  2016 TRUE \n 5      1       5 Mendings, Maj… 2016-02-15    0.3    0.75  2016 TRUE \n 6      1       6 Impractical A… 2016-02-22    0.3    0.65  2016 TRUE \n 7      1       7 The Mayakovsk… 2016-02-29    0.3    0.7   2016 TRUE \n 8      1       8 The Strangled… 2016-03-07    0.3    0.67  2016 TRUE \n 9      1       9 The Writing R… 2016-03-14    0.3    0.71  2016 TRUE \n10      1      10 Homecoming     2016-03-21    0.3    0.78  2016 TRUE \n# … with 55 more rows\n\n\nThis is a bit of an oversimplification. The “warn and pull into R” behaviour shown here is what happens when the data is a Table object. If it is a Dataset object, arrow throws an error\nAn answer has been calculated, but the warning is there to tell you that the computations weren’t performed in Arrow. Realising that it doesn’t know how to interpret leap_year(), the arrow package has tried to “fail gracefully” and pulled everything back into R. The end result of all this is that the code executes as a regular dplyr pipeline and not as an arrowplyr one. It’s not the worst possible outcome, but it still makes me sad. 😭\n\n\n\nFigure 5: Quentin from timeline 40 talking to Alice from timeline 23. Communication across incommensurate universes is difficult. In the show it requires a Tesla Flexion. In Arrow, we use dplyr bindings. Image via giphy, copyright syfy\n\n\n\n\nCalling “arrow-prefix” functions\n\nOkay, let’s dig a little deeper.\nIn the last section I talked about arrowplyr, a collection of dplyr bindings provided by the arrow package. These are designed to mimic their native R equivalents as seamlessly as possible to enable you to write familiar code. Internally, there’s quite a lot going on to make this magic work. In most cases, the arrow developers – which I guess includes me now! 🎉 – have rewritten the R functions that they mimic. We’ve done this in a way that the computations rely only the C++ compute functions provided by libarrow, thereby ensuring that the data never have to enter R. The arrowplyr interface is the way you’d usually interact with Arrow in R, but there are ways in which you can access the C++ compute functions a little more more directly. There are two different ways you can call these compute functions yourself. If you’re working within an arrowplyr pipeline it is (relatively!) straightforward, and that’s what I’ll talk about in this section. However, there is also a more direct method which I’ll discuss later in the post.\nTo see what compute functions are exposed by the C++ libarrow library, you can call list_compute_functions() from R:\n\n\nlist_compute_functions()\n\n\n  [1] \"abs\"                            \n  [2] \"abs_checked\"                    \n  [3] \"acos\"                           \n  [4] \"acos_checked\"                   \n  [5] \"add\"                            \n  [6] \"add_checked\"                    \n  [7] \"all\"                            \n  [8] \"and\"                            \n  [9] \"and_kleene\"                     \n [10] \"and_not\"                        \n....\n\nThe actual output continues for quite a while: there are currently 221 compute functions, most of which are low level functions needed to perform basic computational operations.\nLet’s imagine you’re writing dplyr code to work with datetime data in a Table object like arrowmagicks. If you were working with native R data like magicians, you can do something like this:\n\n\nstart_date <- as.Date(\"2015-12-16\")\n\nmagicians %>% \n  mutate(days = air_date - start_date)\n\n\n# A tibble: 65 × 7\n   season episode title                air_date   rating viewers days \n    <int>   <int> <chr>                <date>      <dbl>   <dbl> <drt>\n 1      1       1 Unauthorized Magic   2015-12-16    0.2    0.92  0 d…\n 2      1       2 The Source of Magic  2016-01-25    0.4    1.11 40 d…\n 3      1       3 Consequences of Adv… 2016-02-01    0.4    0.9  47 d…\n 4      1       4 The World in the Wa… 2016-02-08    0.3    0.75 54 d…\n 5      1       5 Mendings, Major and… 2016-02-15    0.3    0.75 61 d…\n 6      1       6 Impractical Applica… 2016-02-22    0.3    0.65 68 d…\n 7      1       7 The Mayakovsky Circ… 2016-02-29    0.3    0.7  75 d…\n 8      1       8 The Strangled Heart  2016-03-07    0.3    0.67 82 d…\n 9      1       9 The Writing Room     2016-03-14    0.3    0.71 89 d…\n10      1      10 Homecoming           2016-03-21    0.3    0.78 96 d…\n# … with 55 more rows\n\nHere I’ve created a new days column that counts the number of days that have elapsed between the air_date for an episode and the start_date (December 16th, 2015) when the first episode of Season 1 aired. There are a lot of data analysis situations in which you might want to do something like this, but right now you can’t actually do this using the arrow dplyr bindings because temporal arithmetic is a work in progress. In the not-too-distant future users should be able to expect code like this to work seamlessly, but right now it doesn’t. If you try it right now, you get this error:\n\nImproving support for date/time calculations is one of the things I’m working on\n\n\narrowmagicks %>% \n  mutate(days = air_date - start_date) %>% \n  collect()\n\n\nError: NotImplemented: Function subtract_checked has no kernel matching input types (array[date32[day]], scalar[date32[day]])\n\nRight now, there are no general purpose arithmetic operations in arrow that allow you to subtract one date from another. However, because I chose this example rather carefully to find an edge case where the R package is missing some libarrow functionality, it turns out there is actually a days_between() function in libarrow that we could use to solve this problem, and it’s not too hard to use it. If you want to call one of the libarrow functions inside your dplyr pipeline, all you have to do is add an arrow_ prefix to the function name. For example, the C++ days_between() function becomes arrow_days_between() when called within the arrow dplyr pipeline:\n\n\narrowmagicks %>% \n  mutate(days = arrow_days_between(start_date, air_date)) %>% \n  collect()\n\n\n# A tibble: 65 × 7\n   season episode title                air_date   rating viewers  days\n    <int>   <int> <chr>                <date>      <dbl>   <dbl> <int>\n 1      1       1 Unauthorized Magic   2015-12-16    0.2    0.92     0\n 2      1       2 The Source of Magic  2016-01-25    0.4    1.11    40\n 3      1       3 Consequences of Adv… 2016-02-01    0.4    0.9     47\n 4      1       4 The World in the Wa… 2016-02-08    0.3    0.75    54\n 5      1       5 Mendings, Major and… 2016-02-15    0.3    0.75    61\n 6      1       6 Impractical Applica… 2016-02-22    0.3    0.65    68\n 7      1       7 The Mayakovsky Circ… 2016-02-29    0.3    0.7     75\n 8      1       8 The Strangled Heart  2016-03-07    0.3    0.67    82\n 9      1       9 The Writing Room     2016-03-14    0.3    0.71    89\n10      1      10 Homecoming           2016-03-21    0.3    0.78    96\n# … with 55 more rows\n\nNotice there’s no warning message here? That’s because the computations were done in Arrow and the data have not been pulled into R.\n\nA slightly-evil digression\n\n\nMarina, blatantly lying:     “Hi. I’m Marina. I’m here to help.”  Josh, missing important memories:     “So you’re like some powerful, benevolent White Witch?”  Marina, comically sincere:     “Uh-huh.”      – The Magicians: Season 4, Episode 2\n\n\nAt this point in the show everybody except the currently-amnesic main characters knows that Marina has no interest in helping anyone except Marina. I love Marina so much\nOkay, here’s a puzzle. In the previous section I used the arrow_days_between() function in the middle of a dplyr pipe to work around a current limitation in arrow. What happens if I try to call this function in another context?\n\n\ntoday <- as.Date(\"2022-01-18\")\n\narrow_days_between(start_date, today)\n\n\nError in arrow_days_between(start_date, today): could not find function \"arrow_days_between\"\n\nIt turns out there is no R function called arrow_days_between(). This is … surprising, to say the least. I mean, it really does look like I used this function in the last section, doesn’t it? How does this work? The answer to this requires a slightly deeper understanding of what the dplyr bindings in arrow do, and it’s kind of a two-part answer.\nPart one: Object oriented programming\nLet’s consider the mutate() function. dplyr defines mutate() as an S3 generic function, which allows it to display “polymorphism”: it behaves differently depending on what kind of object is passed to to the generic. When you pass a data frame to mutate(), the call is “dispatched” to the mutate.arrow_dplyr_query() methods supplied by (but not exported by) dplyr. The arrow package builds on this by supplying methods that apply for Arrow objects. Specifically, there are internal functions mutate.ArrowTabular(), mutate.Dataset(), and mutate.arrow_dplyr_query() that are used to provide mutate() functionality for Arrow data sets. In other words, the “top level” dplyr functions in arrow are S3 methods, and method dispatch is the mechanism that does the work.\nPart two: Metaprogramming\nNow let’s consider the leap_year() function that my contribution focused on. Not only is this not a generic function, it’s not even a dplyr function. It’s a regular function in the lubridate package. So how is it possible for arrow to mimic the behaviour of lubridate::leap_year() without messing up lubridate? This is where the dplyr binding part comes in. Let’s imagine that I’d written an actual function called arrowish_leap_year() that performs leap year calculations for Arrow data. If I’d done this inside the arrow package2 then I’d include a line like this to register a binding:\n\nI’ll show you how to write your own “arrowish” functions later in the post\n\n\nregister_binding(\"leap_year\", arrowish_leap_year)\n\n\n\nOnce the binding has been registered, whenever leap_year() is encountered within one of the arrow-supplied dplyr functions, R will substitute my arrowish_leap_year() function in place of the lubridate::leap_year() function that would normally be called. This is only possible because R has extremely sophisticated metaprogramming tools: you (the developer) can write functions that “capture” the code that the user input, and if necessary modify that code before R evaluates it. This is a very powerful tool for constructing domain-specific languages within R. The tidyverse uses it extensively, and the arrow package does too. The dplyr bindings inside arrow use metaprogramming tricks to modify the user input in such a way that – in this example – the user input is interpreted as if the user had called arrowish_leap_year() rather than leap_year().\nCooperative magic\nTaken together, these two pieces give us the answer to our puzzle. The call to arrow_days_between() works in my original example because that call was constructed within the context of an arrow-supplied mutate() function. The interpretation of this code isn’t performed by dplyr it is handled by arrow. Internally, arrow uses metaprogramming magic to ensure that arrow_days_between() is reinterpreted as a call to the libarrow days_between() function. But that metaprogramming magic doesn’t apply anywhere except the arrowplyr context. If you try to call arrow_days_between() from the R console or even in a regular dplyr pipeline, you get an error because technically speaking this function doesn’t exist.\n\n\n\nFigure 6: I guess there’s a connection between slightly-evil-Julia burning down the talking trees and my slightly-evil digression? Sort of. I mean the truth is just that I just love this scene and secretly wish I was her. Of all the characters Julia has the most personally transformative arc (in my opinion), in both good ways and bad. There’s a lot going on with her life, her person, and her body. I relate to that. Image via giphy, copyright syfy\n\n\n\n\nCalling libarrow directly\n\nThe weirdness of that digression leads naturally to a practical question. Given that the “arrow-prefix” function don’t actually exist in the usual sense of the term, and the corresponding bindings can only be called in an arrowplyr context, how the heck does an R developer call the libarrow functions directly? In everyday data analysis you wouldn’t want to do this very often, but from a programming perspective it matters: if you want to write your own functions that play nicely with arrowplyr pipelines, it’s very handy to know how to call libarrow directly.\nSo let’s strip back another level of abstraction!\nShould you ever find yourself wanting to call libarrow compute functions directly from R, call_function() will become your new best friend. It provides a very minimal interface that exposes the libarrow functions to R. The “bare bones” nature of this interface has advantages and disadvantages. The advantage is simplicity: your code doesn’t depend on any of the fancy bells and whistles. Those are fabulous from the user perspective, but from a developer point of view you usually want to keep it simple. The price you pay for this is that you must pass appropriate Arrow objects. You can’t pass a regular R object to a libarrow function and expect it to work. For example:\n\n\ncall_function(\"days_between\", start_date, today)\n\n\nError: Argument 1 is of class Date but it must be one of \"Array\", \"ChunkedArray\", \"RecordBatch\", \"Table\", or \"Scalar\"\n\nThis doesn’t work because start_date and today are R-native Date objects and do not refer to any data structures in Arrow. The libarrow functions expect to receive pointers to Arrow objects. To fix the previous example, all we need to do is create Arrow Scalars for each date. Here’s how we do that:\n\n\narrow_start_date <- Scalar$create(start_date)\narrow_today <- Scalar$create(today)\n\narrow_start_date\n\n\nScalar\n2015-12-16\n\nThe arrow_start_date and arrow_today variables are R data structures, but they’re only thin wrappers. The actual data are stored in Arrow, and the R objects are really just pointers to the Arrow data. These objects are suitable for passing to the libarrow days_between() function, and this works:\n\n\ncall_function(\"days_between\", arrow_start_date, arrow_today)\n\n\nScalar\n2225\n\nHuh. Apparently it took me over 2000 days to write a proper fangirl post about The Magicians. I’m really late to the pop culture party, aren’t I? Oh dear. I’m getting old.\n\n\n\nFigure 7: I’m getting lazier with these connections. Using a Library gif because I’m talking about the C++ library? I mean really, you’d think I’d be better than that wouldn’t you? But no. I am not. Image via giphy, copyright syfy\n\n\n\n\nArrow expressions\n\nThere’s one more foundational topic I should discuss before I can show you how to write arrowplyr-friendly functions, and that’s Arrow Expressions. When I introduced arrowplyr early in the post I noted that most of your code is used to specify a query, and that query doesn’t get evaluated until compute() or collect() is called. If you want to write code that plays nicely with this workflow, you need to ensure that your custom functions return an Arrow Expression.\nThe basic idea behind expressions is probably familiar to R users, since they are what powers the metaprogramming capabilities of the language and are used extensively throughout tidyverse as well as base R. In base R, the quote() function is used to capture a user expression and eval() is used to force it to evaluate. Here’s a simple example where I use quote() to “capture” some R code and prevent it from evaluating:\n\n\nhead_expr <- quote(head(magicians, n = 3))\nhead_expr\n\n\nhead(magicians, n = 3)\n\nIf I wanted to be clever I could modify the code in head_expr before allowing R to pull the trigger on evaluating it. I could combine a lot of expressions together, change parts of the code as needed, and evaluate them wherever I wanted. As you might imagine, this is super useful for creating domain specific languages within R. But this isn’t a post about metaprogramming so let’s evaluate it now:\n\n\neval(head_expr)\n\n\n# A tibble: 3 × 6\n  season episode title                       air_date   rating viewers\n   <int>   <int> <chr>                       <date>      <dbl>   <dbl>\n1      1       1 Unauthorized Magic          2015-12-16    0.2    0.92\n2      1       2 The Source of Magic         2016-01-25    0.4    1.11\n3      1       3 Consequences of Advanced S… 2016-02-01    0.4    0.9 \n\nThe example above uses native R code. It’s not tied to Arrow in any sense. However, the arrow package provides a mechanism for doing something similar in an Arrow context. For example, here’s me creating a character string as an Arrow Scalar:\n\n\nfillory <- Scalar$create(\"A world as intricate as filigree\")\nfillory\n\n\nScalar\nA world as intricate as filigree\n\nHere’s me creating the corresponding object within an Arrow Expression:\n\n\nfillory <- Expression$scalar(\n  Scalar$create(\"A world as intricate as filigree\")\n)\nfillory\n\n\nExpression\n\"A world as intricate as filigree\"\n\nI suspect this would not seem particularly impressive on its own, but you can use the same idea to create function calls that can be evaluated later within the Arrow context:\n\n\nember <- Expression$create(\"utf8_capitalize\", fillory)\nember\n\n\nExpression\nutf8_capitalize(\"A world as intricate as filigree\")\n\nSo close. We are so very close to the end now.\n\n\n\nFigure 8: Okay look, I’ll level with you. At this point there is absolutely no connection between the gifs and the content. This post is getting very long and my brain is fried. I need a short break to appreciate the beautiful people, and Kings Idri and Eliot are both very beautiful people. Image via giphy, copyright syfy\n\n\n\nWriting arrowplyr functions\nAt long last we have all the ingredients needed to write a function that can be used in an arrowplyr pipeline. Here’s a simple implementation of the base R toupper() function\n\n\narrowish_toupper <- function(x) {\n  Expression$create(\"utf8_upper\", x)\n}\n\n\n\nAs it happens arrowplyr pipelines already support the toupper() function, so there really wasn’t a need for me to write this. However, at present they don’t support the lubridate leap_year() function, which was the purpose of my very small contribution today. An Arrow friendly version of leap_year() looks like this:\n\n\narrowish_leap_year <- function(date) {\n   year <- Expression$create(\"year\", date)\n  (year %% 4 == 0) & ((year %% 100 != 0) | (year %% 400 == 0))\n}\n\n\n\nBefore putting our functions into action, let’s see what happens when we try to write a simple data analysis pipeline without them:\n\n\narrowmagicks %>% \n  mutate(\n    title = toupper(title),\n    year = year(air_date), \n    leap = leap_year(air_date)\n  ) %>% \n  collect()\n\n\nWarning: Expression leap_year(air_date) not supported in Arrow;\npulling data into R\n# A tibble: 65 × 8\n   season episode title          air_date   rating viewers  year leap \n    <int>   <int> <chr>          <date>      <dbl>   <dbl> <dbl> <lgl>\n 1      1       1 UNAUTHORIZED … 2015-12-16    0.2    0.92  2015 FALSE\n 2      1       2 THE SOURCE OF… 2016-01-25    0.4    1.11  2016 TRUE \n 3      1       3 CONSEQUENCES … 2016-02-01    0.4    0.9   2016 TRUE \n 4      1       4 THE WORLD IN … 2016-02-08    0.3    0.75  2016 TRUE \n 5      1       5 MENDINGS, MAJ… 2016-02-15    0.3    0.75  2016 TRUE \n 6      1       6 IMPRACTICAL A… 2016-02-22    0.3    0.65  2016 TRUE \n 7      1       7 THE MAYAKOVSK… 2016-02-29    0.3    0.7   2016 TRUE \n 8      1       8 THE STRANGLED… 2016-03-07    0.3    0.67  2016 TRUE \n 9      1       9 THE WRITING R… 2016-03-14    0.3    0.71  2016 TRUE \n10      1      10 HOMECOMING     2016-03-21    0.3    0.78  2016 TRUE \n# … with 55 more rows\n\n\nThe internal arrow function that handles this is called “abandon_ship”. No, I don’t know why I felt the need to mention this`\nYes, it returns the correct answer, but only because arrow detected a function it doesn’t understand and has “abandoned ship”. It pulled the data into R and let dplyr do all the work. Now let’s see what happens when we use our functions instead:\n\n\narrowmagicks %>% \n  mutate(\n    title = arrowish_toupper(title),\n    year = year(air_date),\n    leap = arrowish_leap_year(air_date)\n  ) %>% \n  collect()\n\n\n# A tibble: 65 × 8\n   season episode title          air_date   rating viewers  year leap \n    <int>   <int> <chr>          <date>      <dbl>   <dbl> <int> <lgl>\n 1      1       1 UNAUTHORIZED … 2015-12-16    0.2    0.92  2015 FALSE\n 2      1       2 THE SOURCE OF… 2016-01-25    0.4    1.11  2016 TRUE \n 3      1       3 CONSEQUENCES … 2016-02-01    0.4    0.9   2016 TRUE \n 4      1       4 THE WORLD IN … 2016-02-08    0.3    0.75  2016 TRUE \n 5      1       5 MENDINGS, MAJ… 2016-02-15    0.3    0.75  2016 TRUE \n 6      1       6 IMPRACTICAL A… 2016-02-22    0.3    0.65  2016 TRUE \n 7      1       7 THE MAYAKOVSK… 2016-02-29    0.3    0.7   2016 TRUE \n 8      1       8 THE STRANGLED… 2016-03-07    0.3    0.67  2016 TRUE \n 9      1       9 THE WRITING R… 2016-03-14    0.3    0.71  2016 TRUE \n10      1      10 HOMECOMING     2016-03-21    0.3    0.78  2016 TRUE \n# … with 55 more rows\n\nEverything works perfectly within Arrow. No ships are abandoned, the arrowplyr pipeline springs no leaks, and we all live happily ever after.\nSort of.\nI mean, we’re all still alive.\nThat has to count as a win, right? 🎉\n\n\n\nFigure 9: Eliot and Margo applaud your success. They are the best characters, and you are also the best because you have made it to the end of a long and strange blog post. Image via giphy, copyright syfy\n\n\n\n\nEpilogue: Where’s the rest of the owl?\n\n\nIn case you don’t know the reference: how to draw an owl\nThe story I’ve told in this post is a little incomplete. I’ve shown you how to write a function like arrowish_leap_year() that can slot into a dplyr pipeline and operate on an Arrow data structure. But I haven’t said anything about the precise workings of how register_binding() works, in part because the details of the metaprogramming magic is one of the mysteries I’m currently unpacking while I dig into the code base.\nBut that’s not the only thing I’ve left unsaid. I haven’t talked about unit tests, for example. I haven’t talked about the social/technical process of getting code merged into the Arrow repository. If you’ve made it to the end of this post and are curious about joining the Arrow developer community, these are things you need to know about. I’ll probably write something about those topics later on, but in the meantime here are some fabulous resources that might be handy:\nApache Arrow New Contributors Guide (thank you to Alenka Frim!)\nDevelopers Guide to Writing Bindings (thank you to Nic Crane!)\nApache Arrow R Cookbook (thank you to Nic Crane again)\nEnjoy! 🍰\n\n\nLast updated\n2022-01-31 10:08:56 AEDT\nDetails\nsource code, R environment\n\n\n\n\n\n\nI didn’t quite understand what “kernels” meant in this context until Nic Crane kindly explained it to me. The compute API contains a number of functions which are divided up into “kernels”, specialised functions designed to work on a specific data type. The C++ Arrow compute documentation explains this better.↩︎\nMy actual code didn’t bother to name my function. It’s just an anonymous function passed to register_binding().↩︎\n",
    "preview": "posts/2022-01-18_binding-arrow-to-r/img/magicians_hard_glossy_armour.jpg",
    "last_modified": "2022-03-04T23:35:08+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-01-10_setting-cran-repositories/",
    "title": "Setting CRAN repository options",
    "description": "A quick post on how to use RStudio public package manager instead of a standard CRAN mirror, and an example of why that can be useful sometimes.",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2022-01-10",
    "categories": [],
    "contents": "\n\nContents\nRStudio package manager\nMethod 1: RStudio settings\nMethod 2: Edit your R profile\nEpilogue\n\n\n\n\nThe shiny new work laptop arrives. Pristine and beautiful in its factory-fresh state. I am in love.\nI remain in love right up the moment I remember that with new work laptop comes the peculiar torture of setting up the machine. My gorgeous little Dell XPS 13 shipped with Windows 11, and while I do quite like Windows these days, I’ve become very accustomed to working in linux, so my first task was to install Ubuntu 20.04. These days that’s a pretty easy task, and the Ubuntu installer was even thoughtful enough to give me an option to enable full disk encryption. It all went smoothly. Yay me!\nEquipped with my fabulous new operating system, my next steps were to install R and RStudio, and for the first time in my life I was smart enough to remember to install the latest version of git along with the build-essential packages that I’m pretty much guaranteed to need the moment I need to build anything from source. Yay me again!\nThen comes the horror. Installing R packages. On linux. A small part of me dies.\nI’m sure every linux-based R user shares my pain and needs no explanation, but some of the gentler souls who use Windows or Mac OS may not be aware of how tiresome package installation is on linux. The problem that linux users face is that CRAN does not maintain binaries for linux, so every time a linux user wants to install a package, it has to be built locally from the source code. This is both time consuming and frustrating, and very often you have to go hunting around to discover what other system dependencies need to be installed. So many tears have been shed over this.\nSo.\nMany.\nTears.\nRStudio package manager\nRecently, however, I have become aware that a better world is possible thanks to the magic of RStudio package manager. I’d sort of known that this existed as an option, but it wasn’t until today that I realised that — in addition to the fancy commercial options — RStudio maintains a public package manager as a free service: the FAQ page is here. Anyone can configure R to install packages from the RStudio public package manager, if they want to.\n\n\n\n\n\n\nBut first a tiny bit of context… back in the distant part there was this strange, nightmarish time where I was teaching students R, but RStudio was not yet a thing. Many of the little niceties that RStudio users now take for granted didn’t yet exist. In those dark years I had to spend a lot of time explaining to students that CRAN — the comprehensive R archive network — isn’t actually a single website that contains lots of R packages. It’s more like a whole network of mirrors distributed all over the world, and you’d have to manually choose which one you wanted to install packages from. It was mildly annoying. It’s considerably simpler now, because you can use the cloud.r-project.org service that automatically directs you to an appropriate server. In fact, if you’re using RStudio you’ve probably been using this service all along.\nRStudio package manager provides a modern alternative: it works like a CRAN mirror, but it has a lot of additional functionality. It has broader coverage, for instance: it includes R packages on Bioconductor as well as packages on CRAN. For my purposes, however, the attractive property is that it hosts binaries suitable for Ubuntu and other flavours of linux.\n“But how do I try it out, Danielle?” I hear you ask.\nI’m so glad you asked, dear reader, because it’s so much easier than it sounds.\nMethod 1: RStudio settings\nIf you’re using RStudio, the easiest way to switch to RStudio PPM is to change your settings inside RStudio. Go to the RStudio Tools menu and select Global Options. When the popup window appears, click on Packages. You’ll see a screen that looks like this:\n\n\n\n\nIf it says “RStudio Global CDN” next to “Primary CRAN repo”, then you’re using cloud.r-project.org as your CRAN repository. To switch to RStudio PPM, click on the “change” button. It will bring up a list of CRAN mirrors, and if you want you can choose one of those. However the RStudio PPM isn’t technically a CRAN mirror, so it’s not listed there. If you want to switch to using the RStudio PPM, you have to enter the URL manually.\nSo what URL do you want? Well, it depends on whether you want to install packages from binaries or from source, and on what operating system you’re using. I’m on Ubuntu 20.04, “Focal Fossa”, and the URL that serves binaries for my operating system is:\nhttps://packagemanager.rstudio.com/all/__linux__/focal/latest\nHere’s me in the process of entering the URL:\n\n\n\n\nOkay, but what if you’re not on Ubuntu 20.04? If you’re on a different version of Ubuntu or some other operating system, you can find the link you need from the package manager setup page. The relevant part of the page should look something like this:\n\n\n\n\n\nTo get the URL you’re looking for, click on the “change” link to choose your operating system, or toggle between the binary and source options.\nMethod 2: Edit your R profile\nThere are a couple of limitations to this method. The most obvious one is that it’s no help if you don’t use RStudio, and even for RStudio users it can be awkward if you don’t always use RStudio. If that’s your situation, you may want to manage your CRAN repository links by editing your R profile. To do this, open the .Rprofile file — using usethis::edit_r_profile(), for example — and add the following line:\n\n\noptions(repos = \"https://packagemanager.rstudio.com/all/__linux__/focal/latest\")\n\n\n\nYou’ll need to restart your R session for this change to take effect.\nIf you want to be fancy, you can list multiple URLs. If the package you want to install is not found at the first link, R will try the second link, and so on. That can be useful. For instance, this is what I use in my R profile:\n\n\noptions(repos = c(\n  binary = \"https://packagemanager.rstudio.com/all/__linux__/focal/latest\",\n  source = \"https://packagemanager.rstudio.com/all/latest\",\n  CRAN = \"https://cloud.r-project.org\",\n  djnavarro = \"https://djnavarro.r-universe.dev\"\n))\n\n\n\nUsing this configuration, R will look for a suitable binary version of the package on RStudio PPM. If that fails it will try to install from RStudio PPM by building the package from the source code. If that fails, it checks CRAN in the usual way. Finally, if that fails, it looks to see if the package I’m requesting is one of the packages I listed at djnavarro.r-universe.dev, my very own tiny corner of the R-universe. Obviously, you’re very unlikely to want to use my R-universe repository since it only consists of a handful of my own packages: but it’s quite handy for me since they aren’t all on CRAN!\nEpilogue\nIf you’re a Windows or Mac user, you might not be aware of how much of a game changer this is for linux users. For example, in my previous blog post I wrote about my experiences getting started using Apache Arrow. I’m a big fan of Arrow — which should come as no surprise as I’ve recently started work at Voltron Data — but if you’re installing the arrow R package on linux, it’s extremely time consuming to build all the C++ libraries from source. It was a little cumbersome, but after switching to RStudio PPM, I can install arrow on my Ubuntu machine using the exact same command I’d use on Windows…\n\n\ninstall.packages(\"arrow\")\n\n\n\n…and everything works. As easy on linux as it is on other operating systems! Yay! 🎉\n\n\nLast updated\n2022-01-10 21:45:12 AEDT\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2022-01-10_setting-cran-repositories/img/rasa-kasparaviciene-0TFxOkhFt14-unsplash.jpg",
    "last_modified": "2022-01-10T21:45:12+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-11-19_starting-apache-arrow-in-r/",
    "title": "Getting started with Apache Arrow",
    "description": "I've been wanting to learn the basics of Apache Arrow a while: this is the story of how an R user learned to stop worrying and love a standardised in-memory columnar data format",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-11-19",
    "categories": [],
    "contents": "\n\nContents\nIntroduction\nWait… do I actually care?\nOkay… so what’s the problem?\nFiiiiiine, I’ll keep reading… tell me what Arrow is\nSigh. Apache Arrow please?\nI hate you\n\nOverview of Arrow\nInstalling Arrow\nDoes it work?\nExample 1: Arrow data sets aren’t stored in R memory\nExample 2: Arrow plays nicely with dplyr\n\n\n\n\n\nIf you’re like me and spend far too much time talking about R on Twitter you may have come across people talking about how to work with large data sets in R. Perhaps you hear people talking about Parquet files, Apache Arrow, and the arrow package for R, but you’re not really sure what they’re about and are curious? If that’s you, then–\nSo we’re just writing obvious “I want a job in tech, please hire me!” blog posts pitched at potential employers now?\nOh shush. It’s fun and useful too, you know.\nOkay fine, but could you at least be transparent about what you’re doing? Because it’s sort of obnoxious otherwise\nSheesh, what do you think this fake dialogue is for if not making the subtext blatant? Now could you please stop interrupting me and let me talk about Apache Arrow? It is in fact a more interesting subject than our pending unemployment.\nYeah, see how you feel about that in December babe…\nSigh.\n\n\n\nFigure 1: Arrow image by Tim Mossholder. It has nothing whatsoever to do with the Apache Software Foundation. Available by CC0 licence on unsplash.\n\n\n\nIntroduction\nOkay, where was I? Ah yes…\nIf you’re like me and spend far too much time talking about R on Twitter you may have come across people talking about how to work with large data sets in R. Perhaps you hear people talking about Parquet files, Apache Arrow, and the arrow package for R, but you’re not really sure what they’re about and are curious? If that’s you, then then this blog post is designed to help you get started.\nWait… do I actually care?\nLet’s start at the beginning, with the most important question of all: do you actually need to care about this? This might be a long post (or possibly the first post in a long series), so let’s make sure you’re reading for the right reasons!\nFor a lot of people, the answer to the “do I care?” question is going to be “probably not – or at least not right now”. For example, if all your data sets are small and rectangular, then you’re probably working with CSV files and not encountering a lot of problems. Your current workflow uses read.csv() or readr::read_csv() to import data, and everything is fine. Sure, the CSV format has some problems, but it’s simple and it works. If that is you, then right now you don’t need to worry about this.\nBut perhaps that’s not you, or maybe that won’t be you forever. You might be working with larger data sets, either now or in the future, and when that happens you might need to care.\nOkay… so what’s the problem?\nThanks for a great question! Here are a few scenarios to think about.\nScenario 1: Let’s suppose you have a big rectangular data set. An enormous table, basically, and currently it’s stored as a file on your disk. The format of that file could be a plain CSV, a compressed CSV, or it could be something fancier like a Parquet file (I’ll come back to those in a later post, I suspect). It might be a couple of billion rows or so, the kind of thing that you can store on disk but is too big to fit into memory, so it’s not going to be very easy to read this thing into R as a data frame! But your boss wants you to analyse it in R anyway. That’s awkward. R likes to store things in memory. Eek.\nScenario 2: Okay, maybe your data isn’t that big and it fits in memory, but it’s still pretty big, and you need to do something complicated with it. Maybe your analysis needs to start in R but then continue in Python. Or something like that. In your head, you’re thinking okay first I have to read the whole dataset into memory in R, and then it has to be transferred to Python which will have to read its own copy, and… gosh that sounds slow and inefficient. Ugh.\nScenario 3: Honestly, you’re just tired of having to deal with the fact that every language has its own idiosyncratic way of storing data sets in memory and it’s exhausting to have to keep learning new things and you really wish there were some standardised way that programming languages represent data in memory and you’d like a single toolkit that you can use regardless of what language you’re in. Sigh…\nIn any of these scenarios, Arrow might be useful to you.\nFiiiiiine, I’ll keep reading… tell me what Arrow is\nYaaaaay! Green Arrow is a superhero in the DC Comics universe, whose real name is Oliver Queen. He was the subject of an unintentionally hilarious TV show, and–\nSigh. Apache Arrow please?\nOh right. Apache Arrow is a standardised, language-independent format for storing table-like data in-memory, using a columnar format and supporting zero-copy reads without serialisation overhead.\nI hate you\nSorry. Let’s unpack each of those terms:\nArrow is a standardised and language-independent format. It’s the same thing regardless of what programming language you’re using: a data set accessed from R with Arrow has the same format as the a data set accessed in Python.\nArrow is used to store table-like data, very similar to a data frame or tibble.\nArrow refers to the in-memory format: it’s not talking about how the data are stored on disk, and it’s not talking about file formats. It’s all about how a loaded data set is represented in memory.1\nArrow uses columnar format. Unlike a CSV file, which stores the data row-wise, it represents the data column-wise: this turns out to be a much more efficient way to represent data when you need to subset the data (e.g., by using dplyr::filter() in R or the WHERE clause in SQL).\nArrow supports zero-copy reads without serialisation overhead, which… um… yeah, what the heck does that mean?\nSo yeah. Serialisation is one of those terms that those fancy data people know all about, but a regular R user might not be quite as familiar with. It’s worth unpacking this a bit because it’s helpful for understanding the problem that Arrow solves…\n…Hey!\nWait a second, I already wrote a blog post about serialisation! I don’t need to write another one.2 The TL;DR, for folks who quite reasonably don’t want to do a deep dive into how R objects are written to RDS files, is that serialisation is the process of taking an in-memory data structure (like a data frame), and converting it into a sequence of bytes. Those bytes can either be written to disk (when you’re saving a file) or they can be transmitted over some other channel. Regardless of what you want to do with the serialised data, this conversion takes time and resources, and at some point the data will need to be unserialised later. The resources expended in doing so are referred to as the “serialisation overhead”.\nFor small data sets, it doesn’t take R very long to serialise or unserialise. The “serialisation overhead” isn’t a big deal. But when the data set is very large, this is not a trivial operation and you don’t want to do this very often. That’s a problem when a large data set needs to be passed around between multiple platforms. Loading the a CSV into R incurs a serialisation cost; transferring a copy of the data from R to Python incurs a serialisation cost. This happens because R and Python have different structured representations: a data frame in R is a different kind of thing to a panda in Python, so the data has to be serialised, transferred, and then unserialised at the other end in order to pass the data from one to another.\nWouldn’t it be nice if we could avoid that? What if there was just one data structure representing the table in-memory, and R and Python could both agree to use it? That would remove the need to copy and transfer the data, right? And in doing so, it would eliminate those pesky serialisation costs incurred every time. It would be a “zero-copy” mechanism.\nIf only there were a standardised, language-independent format for storing table-like data in-memory, using a columnar format and supporting zero-copy reads without serialisation overhead…\n\n\n\nFigure 2: Arrow image by Possessed Photography. It also has nothing whatsoever to do with the Apache Software Foundation. Available by CC0 licence on unsplash.\n\n\n\nOverview of Arrow\nHere’s one of the two big ideas: standardisation prevents wasteful copying. The current situation that most of us are working in looks something like this. Every application and programming language defines its own format for storing data in memory (and often on disk too), and so any time multiple applications require access to the same data, there’s a serialisation cost. The bigger the data, the higher that cost will be. The more applications you connect to the same data, the more times you incur the cost:\n\n\n\nArrow solves this problem by allocating its own memory to store the data, and providing tools that allow you to access this from any language you like. The goal is to make those tools feel “natural” in whatever language you’re using. For example, if you’re an R user, you may already be familiar with the dplyr grammar for data manipulation and you’d like to be able to manipulate an Arrow Table using dplyr, in exactly the same way you would manipulate a data frame. The arrow R package allows you to do precisely this, and there’s a similar story that applies on the Python side. This allows you to write code that feels natural for the language you’re working in.\nIn this approach, R and Python both have a toolkit that plays nicely with Arrow and feels native to that language. Applications written in R and applications written in Python can both work with the same underlying data (because it’s in Arrow), so you don’t have to serialise the data in order for them to talk to each other:\n\n\n\nSo that’s the first big idea.\nThe second big idea is that Arrow organises data column-wise in memory and as consequence it can support cool single instruction multiple data (or SIMD) operations that you can do with modern CPUs, which I totally understand 100% and am not just paraphrasing Wikipedia. Anyway, it doesn’t really matter at the user level. All we care about there is that manipulating data with Arrow can be very fast. There’s a very brief discussion of this on the Arrow overview page. (It also has prettier versions of my crappy handwritten diagrams)\n\n\n\nFigure 3: Arrow image by Denise Johnson. Yet again, it has nothing whatsoever to do with the Apache Software Foundation but it is very pretty. Available by CC0 licence on unsplash.\n\n\n\nInstalling Arrow\nInstalling Apache Arrow on your local machine as an R user is either extremely easy or mildly tiresome, depending almost entirely on whether you’re on Linux. If you’re using Windows or Mac OS, you shouldn’t need to do anything except install the arrow package in the usual way. It just works:\n\n\ninstall.packages(\"arrow\")\n\n\n\nIf you’re on Linux, there may not be any precompiled C++ binaries for your system, so you’ll have to do it yourself. On my system this was quite time consuming, and the first couple of times I tried it I was convinced that nothing was actually happening because I wasn’t seeing a progress bar or anything, and being impatient I killed the install process before it was finished. If you’re like me and need visual confirmation that something is happening, there’s an ARROW_R_DEV environment variable you can set that will make the process more verbose:\n\n\nSys.setenv(ARROW_R_DEV = TRUE)\ninstall.packages(\"arrow\")\n\n\n\nThis way you get to see all the C++ build information scrolling by on the screen during the installation process. It doesn’t make for very exciting viewing, but at least you have visual confirmation that everything is working!\nThere are quite a few ways you can customise the installation process, and they’re all documented on the installation page. One particularly useful thing to do is to set LIBARROW_MINIMAL to false, which ensures that arrow will install a bunch of optional features like compression libraries and AWS S3 support. It takes longer but you get more stuff! So the actual installation code I used was this:\n\n\nSys.setenv(\n  ARROW_R_DEV = TRUE,\n  LIBARROW_MINIMAL = FALSE\n)\ninstall.packages(\"arrow\")\n\n\n\nThis may take quite a long time if you’re compiling from source so you may want to go make a cup of tea or something while it installs. At the end, hopefully, you’ll have a working version of the package:\n\n\nlibrary(arrow)\n\n\n\nYou can use the arrow_info() function to obtain information about your installation:\n\n\narrow_info()\n\n\nArrow package version: 6.0.0.2\n\nCapabilities:\n               \ndataset    TRUE\nparquet    TRUE\njson       TRUE\ns3         TRUE\nutf8proc   TRUE\nre2        TRUE\nsnappy     TRUE\ngzip       TRUE\nbrotli     TRUE\nzstd       TRUE\nlz4        TRUE\nlz4_frame  TRUE\nlzo       FALSE\nbz2        TRUE\njemalloc   TRUE\nmimalloc   TRUE\n\nMemory:\n                  \nAllocator jemalloc\nCurrent    0 bytes\nMax        0 bytes\n\nRuntime:\n                        \nSIMD Level          avx2\nDetected SIMD Level avx2\n\nBuild:\n                          \nC++ Library Version  6.0.0\nC++ Compiler           GNU\nC++ Compiler Version 9.3.0\n\nYaaas queen! We are ready to go.\n\n\n\nFigure 4: Arrow image by Frank Busch. Now there are two! There are two arrows. Available by CC0 licence on unsplash.\n\n\n\nDoes it work?\nMy goal in this post is fairly modest. I wanted to understand why everyone I talk to seems so excited about Arrow, and try to get it configured to work on my machine. Assuming I can be bothered continuing this series, the next step would be to start playing with Arrow and do a proper exploration. For now though, I’ll try something simple, using the diamonds data from the ggplot2 package\n\n\nlibrary(arrow)\nlibrary(dplyr)\nlibrary(ggplot2)\ndiamonds\n\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# … with 53,930 more rows\n\nExample 1: Arrow data sets aren’t stored in R memory\nOkay, so the first thing I want to investigate is this idea that Arrow holds the data in its own memory, not in the memory allocated to R. As things currently stand the diamonds tibble has 53940 rows stored in R memory, and that occupies about 3.3MB of memory:\n\n\nlobstr::obj_size(diamonds)\n\n\n3,456,344 B\n\nWhat happens when we move the data into Arrow? To do this we would construct a “Table” object using the arrow_table() function, like this:\n\n\ndiamonds2 <- arrow_table(diamonds)\ndiamonds2\n\n\nTable\n53940 rows x 10 columns\n$carat <double>\n$cut <dictionary<values=string, indices=int8, ordered>>\n$color <dictionary<values=string, indices=int8, ordered>>\n$clarity <dictionary<values=string, indices=int8, ordered>>\n$depth <double>\n$table <double>\n$price <int32>\n$x <double>\n$y <double>\n$z <double>\n\nIt’s printed a little differently, but it’s the same tabular data structure consisting of 53940 rows and 10 columns. So how much R memory does diamonds2 occupy?\n\n\nlobstr::obj_size(diamonds2)\n\n\n285,696 B\n\nOnly 279KB. The reason why it occupies so little memory is that diamonds2 doesn’t contain all the data. The data are stored elsewhere, using memory allocated to Arrow. If a Python program wanted to access the diamonds2 data, it could do so without having to serialise the data again. It can link to the same data structure in Arrow memory that I just created. Neat!\nExample 2: Arrow plays nicely with dplyr\nOne neat thing about dplyr is that it cleanly separates the API from the backend. So you can use the dbplyr package to work with databases using dplyr code, or the dtplyr package to use a data.table backend, and so on. The arrow package does the same thing for Apache Arrow.\nHere’s an example. If I were working with the original diamonds tibble, I might write a simple dplyr pipe to tabulate the clarity of premium-cut diamonds:\n\n\ndiamonds %>% \n  filter(cut == \"Premium\") %>% \n  count(clarity)\n\n\n# A tibble: 8 × 2\n  clarity     n\n  <ord>   <int>\n1 I1        205\n2 SI2      2949\n3 SI1      3575\n4 VS2      3357\n5 VS1      1989\n6 VVS2      870\n7 VVS1      616\n8 IF        230\n\nCan I do the same thing using the diamonds2 Table? Let’s try:\n\n\ndiamonds2 %>% \n  filter(cut == \"Premium\") %>% \n  count(clarity)\n\n\nInMemoryDataset (query)\nclarity: dictionary<values=string, indices=int8, ordered>\nn: int32\n\nSee $.data for the source Arrow object\n\nOkay, perhaps not what we were expecting. In order to optimise performance, the query doesn’t get evaluated immediately (more on this in a later post perhaps) You have to tell it either to compute() the result, which will return another Table, or to collect() the result into a data frame\n\n\ndiamonds2 %>% \n  filter(cut == \"Premium\") %>% \n  count(clarity) %>% \n  collect()\n\n\n# A tibble: 8 × 2\n  clarity     n\n  <ord>   <int>\n1 SI1      3575\n2 VS2      3357\n3 SI2      2949\n4 I1        205\n5 VS1      1989\n6 VVS1      616\n7 VVS2      870\n8 IF        230\n\nAt no point has the full data set been loaded into R memory. The diamonds2 object doesn’t contain any new information. It’s still the same size:\n\n\nlobstr::obj_size(diamonds2)\n\n\n285,696 B\n\nMy example is trivial, of course, because the diamonds data set isn’t very big. But if you start reading the Arrow documentation, they give an example using the NYC taxi data which is about 37GB in size. That’s… a teeensy bit bigger than I’d want to try loading into memory on my laptop, so I wouldn’t be able to load it into R at all much less use dplyr. However, because Arrow supplies a dplyr back end, it is possible to write dplyr code for the NYC taxi data.\nOld and jaded though I may be, I have to admit that’s pretty cool.\n\n\n\nFigure 5: Okay yeah, this one actually does have something to do with the Apache Software Foundation. It’s, like, a registered trademark or something. I’m guessing this counts as fair use though.\n\n\n\n\n\n\n\n\n\n\n\n\nTechnically speaking, there’s a little ambiguity here. Usually when we’re talking about Arrow we’re talking about the in memory specification, but the term is also used to refer to the software implementing it, which includes a lot of compute functionality that goes beyond what the specification states. Similarly, the Arrow in-memory format doesn’t have to imply any particular serialisation format, but in practice it’s tightly connected to the IPC (“interprocess communication”) streaming and file format, and to the parquet file format. As a consequence, the term “Arrow” is sometimes used to refer to that broader suite of tools.↩︎\nOkay, I’ll be honest, the RDS serialisation post came about because I was thinking about Arrow and serialisation costs, and got slightly distracted!↩︎\n",
    "preview": "posts/2021-11-19_starting-apache-arrow-in-r/img/frank-busch-LpYcecGTifI-unsplash.jpg",
    "last_modified": "2022-01-10T11:27:13+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-11-15_serialisation-with-rds/",
    "title": "Data serialisation in R",
    "description": "A terrifying descent into madness, or, an explanation of how R serialises an in-memory data structure to summon a sequence of bytes that can be saved or transmitted. Eldritch horrors are unleashed by reading occult texts such as the R internals manual, SEXPTYPE codes are extracted from RDS with bitwise logic, and in the dark conclusion the R source code is consulted",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-11-15",
    "categories": [],
    "contents": "\n\nContents\nWhat is serialisation?\nHow does RDS serialisation work?\nThe serialize() function\nRDS uses gzip compression\nThe unserialize() function\n\nSerialising to plain text RDS\nInterpreting the RDS format\nThe RDS header\nLogical, integer, and numeric vectors\nCharacter vectors\nLists\nObject attributes\n\nType/flag packing\nDecoding the SEXPTYPE\nWhat’s in the other bits?\nOkay but what’s up with 262153?\n\nAre we done yet?\n\n\n\n\n\nI still alive, and that’s what matters. The traumatic experience of the last week is fading, leaving a pale residue of fear and the few scraps of writing that are the sole surviving documentation of these days. It is a tale of fright, a desperate agony, and like any good tragedy it starts with the hope and naive optimism of youth…\n\n\nI’ve decided the time has come for me to do a deep dive into data serialisation in R. Serialisation is one of those terms that comes up from time to time in data science, and it’s popped up so many times on my twitter feed that I feel like I need a better grasp of how serialisation works in R. It’s a topic that folks who work with big data or have a computer science background likely understand quite well, but a lot of people who use R come from other backgrounds. If you’re a social scientist who mostly works with small CSV files, for example, there’s no particular reason why you’d have encountered this. In my case, I’ve worked as a mathematical psychologist and computational modeller for about 20 years, and until very recently I’ve never had never had to think about it in any detail. The issue only came up for me when I started reading about Apache Arrow (a topic for another post, perhaps) and realised that I needed to have a better understanding of what all this data serialisation business is about, and how R handles it.\nThis post is aimed at anyone who is in a similar situation to me!\n\nOh you sweet summer child. You really think you are prepared for the dark? That’s adorable.\n\n\n\n\nFigure 1: Image by Andrey Zvyagintsev. Available by CC0 licence on unsplash.\n\n\n\nWhat is serialisation?\nIn general serialisation refers to any process that takes an object stored in memory and converts into a stream of bytes that can be written to a file or transmitted elsewhere. Any time we write data to a file, we are “serialising” it according to some encoding scheme. Suppose, for instance, I have a data frame called art:\n\n\n\n\n\nart\n\n\n   resolution      series sys_id img_id   short_name format\n1        1000 watercolour  sys02  img34 teacup-ocean    jpg\n2        1000 watercolour  sys02  img34 teacup-ocean    png\n3        2000 watercolour  sys02  img34 teacup-ocean    jpg\n4        2000 watercolour  sys02  img34 teacup-ocean    png\n5        4000 watercolour  sys02  img34 teacup-ocean    jpg\n6        4000 watercolour  sys02  img34 teacup-ocean    png\n7         500 watercolour  sys02  img34 teacup-ocean    jpg\n8         500 watercolour  sys02  img34 teacup-ocean    png\n9        8000 watercolour  sys02  img34 teacup-ocean    jpg\n10       8000 watercolour  sys02  img34 teacup-ocean    png\n\nThis data frame is currently stored in memory on my machine, and it has structure. R represents this data frame as a list of length 6. Each element of this list is a pointer to another data structure, namely an atomic vector (e.g., numeric vector). The list is accompanied by additional metadata that tells R that this particular list is a data frame. The details of how this is accomplished don’t matter for this post. All that matters for now is that the in-memory representation of art is a structured object. It’s little more complicated than a stream of data, but if I want to save this data to a file it needs to be converted into one. The process of taking an in-memory structure and converting it to a sequence of bytes is called serialisation.\nSerialisation doesn’t have to be fancy. The humble CSV file can be viewed as a form of serialisation for a data frame, albeit one that does not store all the metadata associated with the data frame. Viewed this way, write.csv() can be viewed as a serialisation function for tabular data:\n\n\nwrite.csv(art, file = \"art.csv\", row.names = FALSE)\n\n\n\nWhen I call this function R uses the art object to write text onto the disk, saved as the file “art.csv”. If I were to open this file in a text editor, I’d see this:\n\n\"resolution\",\"series\",\"sys_id\",\"img_id\",\"short_name\",\"format\"\n1000,\"watercolour\",\"sys02\",\"img34\",\"teacup-ocean\",\"jpg\"\n1000,\"watercolour\",\"sys02\",\"img34\",\"teacup-ocean\",\"png\"\n2000,\"watercolour\",\"sys02\",\"img34\",\"teacup-ocean\",\"jpg\"\n2000,\"watercolour\",\"sys02\",\"img34\",\"teacup-ocean\",\"png\"\n4000,\"watercolour\",\"sys02\",\"img34\",\"teacup-ocean\",\"jpg\"\n4000,\"watercolour\",\"sys02\",\"img34\",\"teacup-ocean\",\"png\"\n500,\"watercolour\",\"sys02\",\"img34\",\"teacup-ocean\",\"jpg\"\n500,\"watercolour\",\"sys02\",\"img34\",\"teacup-ocean\",\"png\"\n8000,\"watercolour\",\"sys02\",\"img34\",\"teacup-ocean\",\"jpg\"\n8000,\"watercolour\",\"sys02\",\"img34\",\"teacup-ocean\",\"png\"\n\nAlthough this view is human-readable, it is slightly misleading. The text in shown above isn’t the literal sequence of bytes. It’s how those bytes are displayed when the have been unserialised and displayed on screen as UTF-8 plain text. To get a sense of what serialised text actually looks like we can use the charToRaw() function. The first few characters of the text file are \"resolu\" which looks like this when series of bytes:\n\n\ncharToRaw('\"resolu')\n\n\n[1] 22 72 65 73 6f 6c 75\n\nThe raw vector shown in the output above uses one byte to represent each character. For instance, the character \"l\" is represented with the byte 6c in the usual hexadecimal representation. We can unpack that byte into its consituent 8-bit representation using rawToBits()\n\n\n\"u\" |>\n  charToRaw() |>\n  rawToBits()\n\n\n[1] 01 00 01 00 01 01 01 00\n\n(Note that the base pipe |> is rendered as a triangle-shaped ligature in Fira Code)\nReturning to the “art.csv” data file, I can use file() and readBin() to define a simple helper function that opens a binary connection to the file, reads in the first 100 bytes (or whatever), closes the file, and then returns those bytes as a raw vector:\n\n\nread_bytes <- function(path, max_bytes = 100) {\n  con <- file(path, open = \"rb\")\n  bytes <- readBin(con, what = raw(), n = max_bytes)\n  close(con)\n  return(bytes)\n}\n\n\n\nHere are the first 100 bytes of the “art.csv” file:\n\n\nread_bytes(\"art.csv\")\n\n\n  [1] 22 72 65 73 6f 6c 75 74 69 6f 6e 22 2c 22 73 65 72 69 65 73 22\n [22] 2c 22 73 79 73 5f 69 64 22 2c 22 69 6d 67 5f 69 64 22 2c 22 73\n [43] 68 6f 72 74 5f 6e 61 6d 65 22 2c 22 66 6f 72 6d 61 74 22 0a 31\n [64] 30 30 30 2c 22 77 61 74 65 72 63 6f 6c 6f 75 72 22 2c 22 73 79\n [85] 73 30 32 22 2c 22 69 6d 67 33 34 22 2c 22 74 65\n\nThe read.csv() function is similar to read_bytes() in spirit: when I call read.csv(\"art.csv\"), R opens a connection to the “art.csv” file. It then reads that sequence of bytes into memory, and then closes the file. However, unlike my simple read_bytes() function, it does something useful with that information. The sequence of bytes gets decoded (unserialised), and the result is that R reconstructs the original art data frame:\n\n\nart <- read.csv(\"art.csv\")\nart\n\n\n   resolution      series sys_id img_id   short_name format\n1        1000 watercolour  sys02  img34 teacup-ocean    jpg\n2        1000 watercolour  sys02  img34 teacup-ocean    png\n3        2000 watercolour  sys02  img34 teacup-ocean    jpg\n4        2000 watercolour  sys02  img34 teacup-ocean    png\n5        4000 watercolour  sys02  img34 teacup-ocean    jpg\n6        4000 watercolour  sys02  img34 teacup-ocean    png\n7         500 watercolour  sys02  img34 teacup-ocean    jpg\n8         500 watercolour  sys02  img34 teacup-ocean    png\n9        8000 watercolour  sys02  img34 teacup-ocean    jpg\n10       8000 watercolour  sys02  img34 teacup-ocean    png\n\nThrilling stuff.\n\nDo you feel that slow dread yet, my dear? Do you feel yourself slipping? You are on the edge of the cliff. You can still climb back to safety if you want. You don’t have to fall. The choice is still yours.\n\n\n\n\nFigure 2: Image by Daniel Jensen. Available by CC0 licence on unsplash.\n\n\n\nHow does RDS serialisation work?\nData can be serialised in different ways. The CSV format works reasonably well for rectangular data structures like data frames, but doesn’t work well if you need to serialise something complicated like a nested list. The JSON format is a better choice for those cases, but it too has some limitations when it comes to storing R objects. To serialise an R object we need to store the metadata (classes, names, and other attributes) associated with the object, and if the object is a function there is a lot of other information relevant to its execution besides the source code (e.g., enclosing environment). Because R needs this information, it relies on the native RDS format to do the work. As it happens I have an “art.rds” file on disk that stores the same data frame in the RDS format. When I use readRDS() to unserialise the file, it recreates the same data frame:\n\n\nreadRDS(\"art.rds\")\n\n\n   resolution      series sys_id img_id   short_name format\n1        1000 watercolour  sys02  img34 teacup-ocean    jpg\n2        1000 watercolour  sys02  img34 teacup-ocean    png\n3        2000 watercolour  sys02  img34 teacup-ocean    jpg\n4        2000 watercolour  sys02  img34 teacup-ocean    png\n5        4000 watercolour  sys02  img34 teacup-ocean    jpg\n6        4000 watercolour  sys02  img34 teacup-ocean    png\n7         500 watercolour  sys02  img34 teacup-ocean    jpg\n8         500 watercolour  sys02  img34 teacup-ocean    png\n9        8000 watercolour  sys02  img34 teacup-ocean    jpg\n10       8000 watercolour  sys02  img34 teacup-ocean    png\n\nHowever, when I read this file using read_bytes() it’s also clear that “art.rds” contains a very different sequence of bytes to “art.csv”:\n\n\nread_bytes(\"art.rds\")\n\n\n  [1] 1f 8b 08 00 00 00 00 00 00 03 8b e0 62 60 60 60 66 60 61 64 62\n [22] 60 66 05 32 19 58 43 43 dc 74 2d 80 62 c2 40 0e 1b 10 f3 02 31\n [43] 50 11 f3 0b 08 66 bf 00 c1 fc 0b 20 98 f1 0b 04 cb 3b 40 30 83\n [64] 00 58 3d 0b 03 27 90 e6 2e 4f 2c 49 2d 4a ce cf c9 2f 2d 1a 4a\n [85] 42 a8 be 60 2d ae 2c 36 30 1a 18 0e 9a 4b 32 73\n\nThis is hardly surprising since RDS and CSV are different file formats. But while I have a pretty good mental model of what the contents of a CSV file look like, I don’t have a very solid grasp of what the format of an RDS file is. I’m curious.\n\nOh sweetie, I tried to warn you…\n\nThe serialize() function\nTo get a sense of how the RDS format works, it’s helpful to note that R has a serialize() function and an unserialize() function that provide low-level access to the same mechanisms that underpin saveRDS() and readRDS().\n\n\nbytes <- serialize(art, connection = NULL)\n\n\n\nAs you can see, this is the same sequence of bytes returned by read_bytes()…\n\n\nbytes[1:100]\n\n\n  [1] 58 0a 00 00 00 03 00 04 01 02 00 03 05 00 00 00 00 05 55 54 46\n [22] 2d 38 00 00 03 13 00 00 00 06 00 00 00 0d 00 00 00 0a 00 00 03\n [43] e8 00 00 03 e8 00 00 07 d0 00 00 07 d0 00 00 0f a0 00 00 0f a0\n [64] 00 00 01 f4 00 00 01 f4 00 00 1f 40 00 00 1f 40 00 00 00 10 00\n [85] 00 00 0a 00 04 00 09 00 00 00 0b 77 61 74 65 72\n\n…oh wait, no it’s not. What gives???? The “art.rds” file begins with 1f 8b 08 00, whereas serialize() returns a sequence of bytes that begins with 58 0a 00 00. These are not the same at all! Why is this happening???\nRDS uses gzip compression\nAfter digging a little into the help documentation, I realised that this happens because the default behaviour of saveRDS() is to write a compressed RDS file using gzip compression. In contrast, serialize() does not employ any form of compression. The art.rds file that I have stored on disk is that gzipped version, but it’s easy enough to save an uncompressed RDS file, simply by setting compress = FALSE:\n\n\nsaveRDS(art, file = \"art_nozip.rds\", compress = FALSE)\n\n\n\nSo now when I inspect the uncompressed file using read_bytes(), the output is the same one I obtained when I called serialize(art) earlier:\n\n\nread_bytes(\"art_nozip.rds\")\n\n\n  [1] 58 0a 00 00 00 03 00 04 01 02 00 03 05 00 00 00 00 05 55 54 46\n [22] 2d 38 00 00 03 13 00 00 00 06 00 00 00 0d 00 00 00 0a 00 00 03\n [43] e8 00 00 03 e8 00 00 07 d0 00 00 07 d0 00 00 0f a0 00 00 0f a0\n [64] 00 00 01 f4 00 00 01 f4 00 00 1f 40 00 00 1f 40 00 00 00 10 00\n [85] 00 00 0a 00 04 00 09 00 00 00 0b 77 61 74 65 72\n\nThat’s a relief. I was getting very anxious there, but I feel a little better now. My sanity is restored.\n\n…for now.\n\nThe unserialize() function\nThat was frustrating. Anyway getting back to the main thread, the inverse of the serialize() function is unserialize(). It’s very similar to the readRDS() function that you’d normally use to read an RDS file, but you can apply it to a raw vector like bytes. Once again we reconstruct the original data frame:\n\n\nunserialize(bytes)\n\n\n   resolution      series sys_id img_id   short_name format\n1        1000 watercolour  sys02  img34 teacup-ocean    jpg\n2        1000 watercolour  sys02  img34 teacup-ocean    png\n3        2000 watercolour  sys02  img34 teacup-ocean    jpg\n4        2000 watercolour  sys02  img34 teacup-ocean    png\n5        4000 watercolour  sys02  img34 teacup-ocean    jpg\n6        4000 watercolour  sys02  img34 teacup-ocean    png\n7         500 watercolour  sys02  img34 teacup-ocean    jpg\n8         500 watercolour  sys02  img34 teacup-ocean    png\n9        8000 watercolour  sys02  img34 teacup-ocean    jpg\n10       8000 watercolour  sys02  img34 teacup-ocean    png\n\nYay.\n\nYou can sense it can’t you? It will only get worse for you, my sweet. Look upon the grim visage of those that have passed this way before. Their lifeless bones are a warning.\n\n\n\n\nFigure 3: Image by Chelms Varthoumlien. Available by CC0 licence on unsplash.\n\n\n\nSerialising to plain text RDS\nOkay, so what I’ve learned so far is that in most cases, an RDS file is just a gzipped version of … something. It’s the gzipped version of whatever the hell it is that serialize() creates. What I don’t yet know is how the serialize() function operates. What secret magic does it use? How does it construct this sequence of bytes? What do the contents of this file actually include?\nI’ll start simple. Trying to understand how a complicated object is serialised might be painful, so I’ll set the art data frame to one side. Instead, I’ll serialise a numeric vector containing three elements, and … I guess I’ll set ascii = TRUE so that R uses UTF-8 to serialise the object to plain text format rather than … writing a binary file?\n\nClever girl. Yes, the default behaviour is binary serialization. Unless otherwise specified using the xdr argument, serialize() enforces a big-endian representation on the binary encoding. But you didn’t want to go there did you? It frightened you, didn’t it? The abyss stares back at you, sweetness, and you are beginning to attract its attention\n\n\n\nbytes <- serialize(\n  object = c(10.1, 2.2, 94.3), \n  connection = NULL,\n  ascii = TRUE\n)\n\n\n\nWhen I print out the bytes vector I still don’t get text though?\n\n\nbytes\n\n\n [1] 41 0a 33 0a 32 36 32 34 30 32 0a 31 39 37 38 38 38 0a 35 0a 55 54\n[23] 46 2d 38 0a 31 34 0a 33 0a 31 30 2e 31 0a 32 2e 32 0a 39 34 2e 33\n[45] 0a\n\nI was expecting text. Where is my text??? I dig a little deeper and realise my mistake. What I’m looking at here is the sequence of bytes that correspond to the UTF-8 encoded text. If I want to see that text using actual letters, I need to use rawToChar(). When I do that I see something that looks vaguely like data:\n\n\nrawToChar(bytes)\n\n\n[1] \"A\\n3\\n262402\\n197888\\n5\\nUTF-8\\n14\\n3\\n10.1\\n2.2\\n94.3\\n\"\n\nIt is a little easier to read if I use cat() to print the output:\n\n\nbytes |>\n  rawToChar() |>\n  cat()\n\n\nA\n3\n262402\n197888\n5\nUTF-8\n14\n3\n10.1\n2.2\n94.3\n\nIt’s… not immediately obvious how this output should be interpreted? I don’t know what all these lines mean, but I recognise the last three lines: those are the three values stored in the vector I serialised. Now I just need to work out what the rest of it is all about.\nBut before I do, I’ll check that this is exactly the same text that I see if I create an RDS file using the following command and then open that file in a text editor:\n\n\nsaveRDS(\n  object = c(10.1, 2.2, 94.3), \n  file = \"numbers.rds\", \n  ascii = TRUE, \n  compress = FALSE\n)\n\n\n\nOkay, it checks out. My excitement can barely be contained.\n\nWilting already, aren’t you? Poor little flower, you’ve been cut from the stem. You’re dead already but you don’t even know it. All that is left is to wither away under the blistering glare of knowledge.\n\n\n\n\nFigure 4: Image by Daria Shevtsova. Available by CC0 licence on unsplash.\n\n\n\nInterpreting the RDS format\nAll right, lets see if I can interpret the contents of an RDS file. Rather than tediously writing the file to disk using saveRDS() and then loading it again, I’ll cheat slightly and write a show_rds() function that serialises an object and prints the results directly to the R console:\n\n\nshow_rds <- function(object, header = TRUE) {\n  rds <- object |>\n    serialize(connection = NULL, ascii = TRUE) |>\n    rawToChar() |>\n    strsplit(split = \"\\n\") |>\n    unlist()\n  if(header == FALSE) rds <- rds[-(1:6)]\n  cat(rds, sep = \"\\n\")\n}\n\n\n\nJust to make sure it’s doing what it’s supposed to I’ll make sure it gives the output I’m expecting. Probably a good idea given how many times I’ve been surprised so far…\n\n\nshow_rds(object = c(10.1, 2.2, 94.3))\n\n\nA\n3\n262402\n197888\n5\nUTF-8\n14\n3\n10.1\n2.2\n94.3\n\nOkay, phew. That looks good.\nI guess my next task is to work out what all this output means. The last three lines are obvious: that’s the data! What about the line above the data? That line reads 3 and is followed by three data values. I wonder if that’s a coincidence? I’ll see what happens if I try to serialise just 2 numbers. Does that line change to 2?\n\n\nshow_rds(object = c(10.1, 2.2))\n\n\nA\n3\n262402\n197888\n5\nUTF-8\n14\n2\n10.1\n2.2\n\nYes. Yes it does. I am learning things.\nHere’s what I know so far:\nA\n3\n262402\n197888\n5\nUTF-8\n14\n3      # the object has length 3\n10.1   # first value is 10.1\n2.2    # second value is 2.2\n94.3   # third value is 94.3\nOkay, so what’s next? The 14 in the preceding line. What does that mean?\nI puzzled over this for a while, and ended up needing to consult an occult tome of dangerous lore – the R Internals Manual – to find a partial answer. On the very first page of the Infernals Manual there is a table listing the SEXPTYPE codes that R uses internally to specify what kind of entity is encoded by an R object. Here are a few of these SEXPTYPE codes:\nValue\nSEXPTYPE\nVariable type\n10\nLGLSXP\nlogical\n13\nINTSXP\ninteger\n14\nREALSXP\nnumeric\n16\nSTRSXP\ncharacter\n19\nVECSXP\nlist\nSo… when I serialise a plain numeric vector, the RDS file writes the number 14 to the file. In that case I will tentatively update my beliefs about the RDS file\nA\n3\n262402\n197888\n5\nUTF-8\n14     # the object is numeric\n3      # the object has length 3\n10.1   # first value is 10.1\n2.2    # second value is 2.2\n94.3   # third value is 94.3\n\nOh no dear. You have strayed so far from the light already. That 14 carries much more meaning than your fragile mind is prepared to handle. Soon you will know better. Soon you will unravel entirely. You can feel it coming, can’t you?\n\n\n\n\nFigure 5: Image by Roxy Aln Available by CC0 licence on unsplash.\n\n\n\nThe RDS header\nAt this point, I have annotated every part of the RDS file that corresponds to the actual object. Consulting the section of the Infernal Manual devoted to serialisation, I learn that the six lines at the beginning of the file are known as the RDS header. Reading further I learn that the first line specifies the encoding scheme (A for ASCII, X for binary big-endian). The second line specifies which version of the RDS file format is used. The third line indicates the version of R that wrote the file. Finally, the fourth line is the minimum version of R required to read the file.\nIf I annotate my RDS header to reflect this knowledge, I get this:\nA       # use ASCII encoding\n3       # use version 3 of the RDS format\n262402  # written with R version 4.1.2\n197888  # minimum R version that can read it is 3.5\n5\nUTF-8 \nI am confused. Where did those numbers come from? Why does version 4.1.2 correspond to the number 262402, and why does 3.5 get encoded as 197888? The Manual is silent, and my thoughts become bleak. Am I losing my mind? Is the answer obvious??? What mess have I gotten myself into?\nIn desperation, I look at the R source code which reveals unto me the magic formula:\n\n\nencode_r_version <- function(major, minor, patch) {\n  (major * 65536) + (minor * 256) + patch\n}\n\n\n\nYessss. This all makes sense now…\n\n\nencode_r_version(4, 1, 2)\nencode_r_version(3, 5, 0)\n\n\n[1] 262402\n[1] 197888\n\n…so much sense.\nWhat about the other two lines in the header? Prior to RDS version 3 – which was released in R version 3.5 – those two lines didn’t exist in the header. Those are now used to specify the “native encoding” of the file, according to the Manual.\n“But isn’t that ASCII????”, whispers a voice in my head. “Is that not what the A is for?”\nNot quite. The RDS file format isn’t restricted to ASCII characters. In the usual case, the RDS file can encode any UTF-8 character and the native encoding line reads UTF-8. There is another possibility though: the file may use the Latin-1 alphabet. Because of this, there is some ambiguity that needs to be resolved. The RDS file needs to indicate which character set is used for the encoding.\nMy annotated header now looks like this:\nA      # the file uses ASCII encoding\n3      # the file uses version 3 of the RDS format\n262402 # the file was written in R version 4.1.2\n197888 # the minimum R version that can read it is 3.5\n5\nUTF-8  # the file encodes UTF-8 characters not Latin-1\nOkay, that makes a certain kind of sense, but what’s the story behind that 5? What does that mean? What dark secret does it hide?\nIt took me so very long to figure this one out. As far as I can tell this line isn’t discussed in the R Internals Manual, but I worked it out by looking at the source code for serialize. That line reads 5 because it’s telling the parser that the string that follows on the next line (i.e., UTF-8) contains five characters. Presumably if I’d used Latin-1 encoding, the corresponding line would have been 7.\nThis is doing my head in, but I think I’m okay?\n\nAre you sure? Really? You don’t sound too certain\n\n\n\n\nFigure 6: Image by Liza Polyanskaya. Available by CC0 licence on unsplash.\n\n\n\nLogical, integer, and numeric vectors\nNow that I have a sense of how the RDS header works, I’ll set header = FALSE whenever I call show_rds() from now on. That way I won’t have to look at that same six lines of output over and over and they will no longer haunt my dreams.\n\nOh no my dear. Hiding won’t save you.\n\nI think the time has come to look at how RDS encodes other kinds of data. For three of the four commonly used atomic vector types (logical, integer, and numeric), the RDS format looks exactly as I expected given what I learned earlier. As shown in the table above, the SEXPTYPE code for a logical vector is 10, so a logical vector with four elements looks like this:\n\n\nshow_rds(\n  object = c(TRUE, TRUE, FALSE, NA), \n  header = FALSE\n)\n\n\n10\n4\n1\n1\n0\nNA\n\nTRUE values are represented by 1 in the RDS file, and FALSE values are represented by 0. Missing values are represented as NA.\nFor an integer vector, the output is again familiar. The SEXPTYPE here is 13, so a vector of four integer looks like this:\n\n\nshow_rds(\n  object = c(-10L, 20L, 30L, NA),\n  header = FALSE\n)\n\n\n13\n4\n-10\n20\n30\nNA\n\nNumeric vectors I’ve already seen. They have SEXPTYPE of 14, so a numeric vector of length 3 starts with 14 on the first line, 3 on the second line, and then the numbers themselves appear over the remaining three lines. However, there is a catch. There always is when dealing with real numbers. Numeric values are subject to the vagaries of floating point arithmetic when represented in memory, and the encoding is not exact. As a consequence, it is entirely possible that something like this happens:\n\n\nshow_rds(\n  object = c(10.3, 99.9, 100),\n  header = FALSE\n)\n\n\n14\n3\n10.3\n99.90000000000001\n100\n\nFloating point numbers always make my head hurt. It is best not to dwell too long upon them lest my grip on sanity loosen.\n\nToo late. Far, far too late.\n\n\n\n\nFigure 7: Image by Hoshino Ai. Available by CC0 licence on unsplash.\n\n\n\nCharacter vectors\nWhat about character vectors?\n\nAdorable that you think these will be safer waters in which to swim my dear. A wiser woman would turn back now and return to the shallows. Yet there you go, drifting out to sea. Fool.\n\n\nLet’s create a simple character vector. According to the table above, character vectors have SEXPTYPE 16, so I’d expect that a character vector with three elements would start with 16 on the first line and 3 on the second line, which would then be followed by the contents of each cell.\nAnd that’s… sort of true?\n\n\nshow_rds(\n  object = c(\"text\", \"is\", \"strange\"),\n  header = FALSE\n)\n\n\n16\n3\n262153\n4\ntext\n262153\n2\nis\n262153\n7\nstrange\n\nThe format of this output is roughly what I was expecting, except for the fact that each string occupies three lines. For instance, these three lines correspond to the word \"strange\":\n262153\n7\nstrange\nThis puzzled me at first. Eventually, I remembered that the source code for R is written in C, and C represents strings as an array. So where R treats the word \"strange\" a single object with length 1, C treats it as a string array containing 7 characters. In the R source code, the object encoding a string is called a CHARSXP. So lines two and three begin to make sense:\n262153\n7        # the string has \"length\" 7\nstrange  # the 7 characters in the string\nWhat about the first line? Given everything I’ve seen previously it’s pretty tempting to guess that it means something similar to the SEXPTYPE codes that we’ve seen earlier. Perhaps in the same way that numeric is SEXPTYPE 14 and logical is SEXPTYPE 10, maybe there’s some sense in which a single string has a “SEXPTYPE” of 262153? That can’t be right though. According to the R Internals Manual, a CHARSXP object has a SEXPTYPE code of 9, not 262153. I must be misunderstanding something? Why is it 262153?\n\nFrightened by the first wave, are you? All in good time my love. The secrets of 262153 will reveal themselves soon.\n\n\n\n\nFigure 8: Image by Tim Marshall Available by CC0 licence on unsplash.\n\n\n\nLists\nWhat about lists? Lists are more complicated than atomic vectors, because they’re just containers for other data structures that can have different lengths and types. As mentioned earlier, they have SEXPTYPE 19, so a list with three elements will of course start with 19 on the first line and 3 on the second line. Here’s an example:\n\n\nshow_rds(\n  object = list(\n    c(TRUE, FALSE), \n    10.2, \n    c(\"strange\", \"thing\")\n  ),\n  header = FALSE\n)\n\n\n19\n3\n10\n2\n1\n0\n14\n1\n10.2\n16\n2\n262153\n7\nstrange\n262153\n5\nthing\n\nThis output makes my brain hurt, but it does make sense if I stare at it long enough. It begins with the two lines specifying that it’s a list of length three. This is then followed by the RDS representation for the logical vector c(TRUE, FALSE), the RDS representation for the numeric vector 10.2, and finally the RDS representation for the character vector c(\"strange\", \"thing\").\nI have started using annotations and whitespace to make it clearer:\n19 # it's a list\n3  # of length 3\n\n  10  # list entry 1 is logical\n   2  # of length 2\n   \n    1       # value is TRUE\n    0       # value is FALSE\n      \n  14  # list entry 2 is numeric \n   1  # of length 1\n   \n    10.2    # value is 10.2\n    \n  16  # list entry 3 is character\n   2  # of length 2\n   \n    262153  # every string starts with this\n         7  # this string has 7 characters\n   strange  # values are: s, t, r, a, n, g, e\n   \n    262153  # every string starts with this\n         5  # this string has 5 characters\n     thing  # values are: t, h, i, n, g\nI feel so powerful! My mind is now afire with knowledge! All the secrets of RDS will be mine…\n\n…and the madness strikes at last. Pride comes before the fall, always.\n\n\n\n\nFigure 9: Image by Moreno Matković. Available by CC0 licence on unsplash.\n\n\n\nObject attributes\nOne of the key features of R is that vectors are permitted to have arbitrary metadata: names, classes, attributes. If an R object contains metadata, that metadata must be serialised too. That has some slightly surprising effects. Let’s start with this very simple numeric object with two elements:\n\n\nshow_rds(object = c(100, 200), header = FALSE)\n\n\n14\n2\n100\n200\n\nAs expected it has SEXPTYPE 14 (numeric), length 2, and the values it stores are 100 and 200. Nothing out of the ordinary here. But when I add a name to the object, the output is … complicated.\n\n\nshow_rds(object = c(a = 100, b = 200), header = FALSE)\n\n\n526\n2\n100\n200\n1026\n1\n262153\n5\nnames\n16\n2\n262153\n1\na\n262153\n1\nb\n254\n\nI … don’t know what I am looking at here. First off, I seem to be having the same problem I had with character strings. If I take the first line of this output at face value I would think that a named numeric vector has SEXPTYPE 526. That can’t be right, can it?\n\nIt isn’t. In the same way that strings don’t have a SEXPTYPE of 262153 (the actual number is 9), the 526 here is a little misleading. This is a numeric vector and like all numeric vectors it is SEXPTYPE 14. You will learn the error of your ways very soon.\n\n\nSetting that mystery aside, I notice that the RDS output is similar to the output we saw when converting a list to RDS. The output contains the numeric vector first (the data), which is then followed by a list that specifies the attributes linked to that object?\n\nNot quite. You’re so close, but it’s a pairlist, not a list. The underlying data structure is different. Don’t let it worry your mind, sweet thing. Preserve your mind for the trials still to come.\n\n\nFor this object, there’s only one attribute that needs to be stored, corresponding to the names associated with each element of the vector. If I annotate the output again, I get this:\n526     # Numeric vector \n2       # with two values\n\n   100     # value 1 \n   200     # value 2\n   \n1026    # Pairlist for attributes\n1       # with one pair of entries\n\n   262153  # The attribute is called \"names\"\n   5       # \n   names   # \n   \n   16      # The attribute has two values\n   2       # \n   \n      262153   # First value is \"a\"\n           1   #\n           a   # \n\n      262153   # Second value is \"b\"\n           1   #\n           b   #\n\n254   # end of pairlist\nThe 254 marking the end of the pairlist confused me for a little while, but it isn’t arbitrary. It represents a NULL value in the RDS format:\n\n\nshow_rds(NULL, header=FALSE)\n\n\n254\n\n\nYes, my dear. If you look at the relevant part of the R source code, you see that there are a collection of “administrative codes” that are used to denote special values in a SEXPTYPE-like fashion. NULL is the one you’d be most likely to encounter though. Perhaps best not to travel down that road tonight though? Wait until day. You’re getting tired.\n\n\n\n\nFigure 10: Image by Kelly Sikkema. Available by CC0 licence on unsplash.\n\n\n\nType/flag packing\nThroughout this post, I’ve given the impression that when R serialises an object to RDS format, the first thing it writes is the SEXPTYPE of that object. Technically I wasn’t lying, but this is an oversimplificiation that hides something important. It’s time to unpack this, and to do that I’ll have to dive into the R source code…\nDecoding the SEXPTYPE\nAfter digging around in the source code I found the answer. What R actually does in that first entry is write a single integer, and packs multiple pieces of information into the bits that comprise that integer. Only the first eight bits are used to define the SEXPTYPE. Other bits are used as flags indicating other things. Earlier on, I said that a value of 526 actually corresponds to a SEXPTYPE of 14. That becomes clearer when we take a look at the binary representation of 14 and 526. The first eight bits are identical:\n\n\nintToBits(14)\n\n\n [1] 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n[23] 00 00 00 00 00 00 00 00 00 00\n\nintToBits(526)\n\n\n [1] 00 01 01 01 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00\n[23] 00 00 00 00 00 00 00 00 00 00\n\nTo extract the SEXPTYPE, what we want to do is ignore all the later bits. I could write a function that uses intToBits() to unpack an integer into its binary representation, then sets all the bits except the first eight to 0, and then converts back to an integer …but there’s no need. The thing I just described is a “bitwise AND” operation:\n\n\ndecode_sexptype <- function(x) bitwAnd(x, 255)\n\ndecode_sexptype(14)\n\n\n[1] 14\n\ndecode_sexptype(526)\n\n\n[1] 14\n\nWhen I said that those 262153 values we encounter every time a string is serialised actually correspond to a SEXPTYPE of 9, this is exactly what I was talking about:\n\n\ndecode_sexptype(262153)\n\n\n[1] 9\n\nThe attributes pairlist, which gave us a value of 1026 when the RDS is printed out as text?\n\n\ndecode_sexptype(1026)\n\n\n[1] 2\n\nThose are SEXPTYPE 2, and if we check the R internals manual again, we see that this is indeed the code for a pairlist.\nI feel triumphant, but broken.\n\nGirl, same.\n\n\n\n\nFigure 11: Image by Aimee Vogelsang. Available by CC0 licence on unsplash.\n\n\n\nWhat’s in the other bits?\nI fear that my mind is lost, but in case anyone uncover these notes and read this far, I should document what I have learned about the contents of the other bits. There are a few different things in there. The two you’d most likely encounter are the object flag (bit 9) and the attributes flag (bit 10). For example, consider the data frame below:\n\n\ndata.frame(\n  a = 1, \n  b = 2\n)\n\n\n  a b\n1 1 2\n\nhas an integer code of 787. Data frames are just lists with additional metadata, so it’s not surprising that when we extract the SEXPTYPE we get a value of 19:\n\n\ndecode_sexptype(787)\n\n\n[1] 19\n\nBut data frames are also more than lists. They have an explicit S3 class (\"data.frame\") and they have other attributes too: \"names\" and \"row.names\". If we unpack the integer code 787 into its constituent bits we see that bit 9 and bit 10 are both set to 1:\n\n\nintToBits(787)\n\n\n [1] 01 01 00 00 01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00\n[23] 00 00 00 00 00 00 00 00 00 00\n\nBit 9 is the “object flag”: it specifies whether or not the R data structure has a class attribute. Bit 10 is the more general one, and is called the “attribute flag”: it specifies whether or not the object has any attributes.\nOkay but what’s up with 262153?\nWho is asking me all these questions anyway?\nIt worries me that I’m now listening to the voices in my head, but okay fine. If we unpack the integer code 262153, we see that there’s something encoded in bit 19:\n\n\nintToBits(262153)\n\n\n [1] 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00\n[23] 00 00 00 00 00 00 00 00 00 00\n\nI haven’t found the part of the source code that sets this bit yet, but I’m pretty sure that the role of this bit is to flag whether or not the string should be added to the global string pool. In recent versions of R that’s true for all strings, so in practice every string has an integer code of 262153 rather than 9.\n\n\n\nFigure 12: Image by Pelly Benassi. Available by CC0 licence on unsplash.\n\n\n\nAre we done yet?\nWell that depends on what you mean by asking the question. If you mean “have we described everything there is to know about the RDS format and how data serialisation works in base R?” then no, we’re absolutely not done. I haven’t said anything about how R serialises functions or expressions:\n\n\nexpr <- quote(sum(a, b, c))\nfn <- function(x) x + 1 \n\n\n\nThese are both R objects and you can save them to RDS files. So of course there’s a serialisation format for those but it’s not a lot of fun. I mean, if you squint at it you can kiiiiiinnnnda see what’s going on with the expression…\n\n\nshow_rds(expr, header = FALSE)\n\n\n6\n1\n262153\n3\nsum\n2\n1\n262153\n1\na\n2\n1\n262153\n1\nb\n2\n1\n262153\n1\nc\n254\n\n\n\n\n…but if I do the same thing to serialise the function it gets unpleasant. This has been quite an ordeal just getting this far, and I see no need to write about the serialisation of closures. Let someone else suffer through that, because my brain is a wreck.\nSo no, we are not “done”. The RDS format keeps some secrets still.\nBut if you mean “have we reached the point where the author is losing her mind and needs to rest?” then… oh my god yes I am utterly and completely done with this subject, and wish to spend the rest of my night sobbing quietly in darkness.\n\nLet us never speak of this again.\n\n\n\n\nFigure 13: Image by Andrey Zvyagintsev. Available by CC0 licence on unsplash.\n\n\n\n\n\nLast updated\n2021-11-19 13:58:59 AEDT\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-11-15_serialisation-with-rds/preview-image.jpg",
    "last_modified": "2022-01-10T11:27:13+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-11-01_unpredictable-paintings/",
    "title": "Unpredictable paintings",
    "description": "An example showing how to build a generative art system in R. The post walks through some of the creative and design choices that are involved, and highlights how much of a trial-and-error process generative art can be",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-11-01",
    "categories": [],
    "contents": "\n\nContents\nIntroduction\nDo something, anything\nMix it up a bit\nCRAN is a girl’s best friend\nFormalise a system…\nVary parameters…\nHave fun exploiting loopholes\nTweet it!\n\n\n\n\nAlmost two years (2020-01-15) ago I wrote this blog post as an introduction to generative art in R. The idea behind the post was to start making a new generative art system from scratch, and write the blog post at the same time. By doing it that way the reader can see how the process unfolds and how many false starts and discarded ideas a generative artist tends to go through, even for a simple system like this one. The post disappeared when I moved my blog to its own subdomain and its own repository, but I’ve now managed to rescue it! Hope it’s helpful…\nIntroduction\nOver the last year or so I’ve taken up generative artwork as a hobby, and I am occasionally asked to write an introduction to the subject… how does one get started in generative art? When I started posting the code for my generative art to my “rosemary” repository I has this to say about my subjective experience when making artwork,\n\nMaking generative artwork reminds me a lot of gardening. Both are aesthetic exercise, creating a pleasant and relaxing evironment that the artist/gardener can enjoy no less than anyone visiting the space. Both are hard work, too. Learning how to prune, learning which plants will thrive in the land that you have, knowing what nutrients differnt plants need, taking care of the garden in hard times, et cetera, none of these are easy. At the end you might have a sustainable native garden that blends in seamlessly with the environment and brings you joy, but growing the garden is itself a technical and sometimes physically demanding exercise. The analogy between gardening and generative artwork feels solid to me, but it’s not amazingly helpful if you want to start making this kind of art. If you want to start gardening, you probably don’t really want a fancy gardener to talk about their overall philosophy of gardens, you’d like a few tips on what to plant, how often to water and so on. This post is an attempt to do that, and like so many things in life, it is entirely Mathew Ling’s fault.\n\nThe first thing to say about generative artwork is that it’s really up to you how you go about it. I do most of my programming using R, so that’s the language I use for my artwork. Most of the artwork I’ve been making lately has relied on the ambient package for the “generative” component, but to be honest you don’t have to rely on fancy multidimensional noise generators or anything like that. You can use the standard pseudorandom number generators built into R to do the work. Since the point of this post is to talk about “how to get started”, this is exactly what I’ll do!\nIn fact, what I’m going to do in this post is build a new system for generative art… I’m not sure what I’m going to end up with or if it will be any good, but let’s see where it goes! For the purposes of this post I’m assuming that you’re somewhat familiar with the tidyverse generally and ggplot2 specifically, and are comfortable writing functions in R. There’s a couple of spots where I do something slightly more complex, but I’ll explain those when they pop up. So, here goes…\nDo something, anything\nTruth be told, I almost never have a plan when I start building a new system. What I do is start playing with pictures that visualise random data in some fashion, and see where that takes me. So, okay… I’ll start out creating a data frame that contains random numbers: each row in the data frame is a single “point”, and each column specifies an attribute: an x variable specifying a horizontal co-ordinate, a y variable specifying the vertical location, and a g variable that randomly assigns each of point to a “group” of some kind. At this point in time I have no idea how I’m going to use this information:\n\n\nlibrary(tidyverse)\nset.seed(1)\nobj <- tibble(\n  x = rnorm(100), \n  y = rnorm(100), \n  g = sample(10, 100, TRUE)\n)\nobj\n\n\n# A tibble: 100 × 3\n        x       y     g\n    <dbl>   <dbl> <int>\n 1 -0.626 -0.620      1\n 2  0.184  0.0421     3\n 3 -0.836 -0.911     10\n 4  1.60   0.158      7\n 5  0.330 -0.655      4\n 6 -0.820  1.77       1\n 7  0.487  0.717      9\n 8  0.738  0.910      7\n 9  0.576  0.384      6\n10 -0.305  1.68       4\n# … with 90 more rows\n\nSomething to note about this code is that I used set.seed(1) to set the state of the random number generator in R. This will ensure that every time I call the same “random” code I will always get the same output. To get a different output, I change the seed to something different.\nSo I guess the first thing I’ll do is try a scatterplot:\n\n\nggplot(obj, aes(x, y, colour = g)) +\n  geom_point(show.legend = FALSE) + \n  coord_equal() + \n  theme_void()\n\n\n\n\nOkay, yeah that’s scatterplot. I’m not feeling inspired here, but it does occur to me that I’ve seen some very pretty hexbin plots in the past and maybe there’s some fun I could have playing with those?\n\n\nggplot(obj, aes(x, y)) +\n  geom_hex(show.legend = FALSE) + \n  coord_equal() + \n  theme_void()\n\n\n\n\nHm. Interesting? Maybe I could split this by group and try overlaying different hexagonal shapes? That sometimes makes for a neat three-dimensional feel when two hexagonal grids are offset from one another… okay let’s pursue that for a bit…\n[an hour passes in which I draw many boring plots]\n…yeah, okay I’ve got nothing. It seemed like a good idea but I couldn’t make anything I really liked. This is, in my experience, really common. I go down quite a few blind alleys when making a generative system, discard a lot of things that don’t seem to do what I want. It’s an exploration process and sometimes when you explore you get lost. Oh well, let’s try something else. Instead of drawing a scatterplot, let’s connect the dots and draw some lines:\n\n\nggplot(obj, aes(x, y, colour = g)) +\n  geom_path(show.legend = FALSE) + \n  coord_equal() + \n  theme_void()\n\n\n\n\nHm. A bit scribbly, but there’s something aesthetically pleasing there. Okay, what if I decided to turn the paths into polygons?\n\n\nggplot(obj, aes(x, y, fill = g, group = g)) +\n  geom_polygon(show.legend = FALSE) + \n  coord_equal() + \n  theme_void()\n\n\n\n\nOkay, this feels promising. It reminds me a bit of the time I accidentally drew some really pretty pictures by setting axis limits inappropriately when drawing kernel density estimates with ggplot2, and ended up using it as a way to explore the scico package. Let’s run with this…\nMix it up a bit\nTo try to get a sense of what you can do with a particular approach, it’s usually helpful to try out some variations. For example, the previous plot uses the ggplot2 default palette, which isn’t the most appealing colour scheme. So let’s modify the code to use palettes from the scico package. One of my favourites is the lajolla palette:\n\n\nlibrary(scico)\nggplot(obj, aes(x,y, fill = g, group = g)) +\n  geom_polygon(show.legend = FALSE) + \n  coord_equal() + \n  theme_void() + \n  scale_fill_scico(palette = \"lajolla\")\n\n\n\n\nThis is definitely neat. I do like the “jagged little polygons” feel to this, but to be honest I’m getting a bit bored. I’ve done a few different art pieces that exploit this effect before, and this isn’t the most exciting thing for me, so I want to push things in a different direction. Speaking of which, I’m not sure I want all the polygons to lie on top of each other so much, so what I’ll do is create a small tibble called grp that specifies a random “offset” or “shift” for each group, and then using full_join() from dplyr to merge it into the data object:\n\n\ngrp <- tibble(\n  g = 1:10,\n  x_shift = rnorm(10),\n  y_shift = rnorm(10)\n)\nobj <- full_join(obj, grp)\nobj\n\n\n# A tibble: 100 × 5\n        x       y     g x_shift y_shift\n    <dbl>   <dbl> <int>   <dbl>   <dbl>\n 1 -0.626 -0.620      1   1.13   -1.00 \n 2  0.184  0.0421     3   0.741   0.945\n 3 -0.836 -0.911     10  -0.581   1.78 \n 4  1.60   0.158      7  -0.408   0.376\n 5  0.330 -0.655      4  -1.32    0.434\n 6 -0.820  1.77       1   1.13   -1.00 \n 7  0.487  0.717      9  -0.701  -1.43 \n 8  0.738  0.910      7  -0.408   0.376\n 9  0.576  0.384      6   0.398  -0.390\n10 -0.305  1.68       4  -1.32    0.434\n# … with 90 more rows\n\nSo now I can adjust my ggplot2 code like this. Instead of defining each polygon in terms of the x and y columns, I’ll add the x_shift and y_shift values so that each polygon gets moved some distance away from the origin. This is kind of helpful, because now I can see more clearly what my objects actually look like!\n\n\nggplot(\n  data = obj, \n  mapping = aes(\n    x = x + x_shift, \n    y = y + y_shift, \n    fill = g, \n    group = g\n  )\n) +\n  geom_polygon(show.legend = FALSE) + \n  coord_equal() + \n  theme_void() + \n  scale_fill_scico(palette = \"lajolla\")\n\n\n\n\nVery pretty! But as I said, I’m bored with the “jagged little polygon” look, so what I want to do is find some way of changing the appearance of the shapes.\nCRAN is a girl’s best friend\nAt this point in my process I was a bit lost for ideas. I want to do something different, and I think what I want to do is turn each point set into more of a regular shape, something without holes in it. It then occurred to me that way back in 1998 I did my honours thesis on combinatorial optimisation problems in neuropsychological testing and had played around with things like the Travelling Salesperson Problem (TSP) and remembered that the solutions to two-dimensional planar TSPs can sometimes be quite pretty. A few minutes on google uncovers the TSP package, and a few more minutes playing around with the API gives me a sense of what I need to do in order to work out what order to connect the points in order to generate a TSP solution:\n\n\nlibrary(TSP)\ntour <- function(obj) {\n  obj$tour <- unname(c(solve_TSP(ETSP(obj[, c(\"x\", \"y\")]))))\n  arrange(obj, order(tour))\n}\n\n\n\nThe code here is very ugly because I wrote it in a rush. The gist of it is that what you want to do normally is feed a data frame to the ETSP() function, which creates the data structure needed to solve the corresponding optimisation problem. The output is then passed to solve_TSP() which can produce an approximate solution via one of many different algorithms, and that then returns a data structure (as an S3 object) that specifies the order in which the points need to be connected, along with some handy metadata (e.g., the length of the tour). But I don’t want any of that information, so I use c() and unname() to strip all that information out, append the resulting information to the data object, and then use the arrange() function from the dplyr package to order the data in the desired fashion.\nNext, because I want to apply the tour() function separately to each group rather than to compute a TSP solution for the overall data structure, I use group_split() to split the data set into a list of data frames, one for each group, and then map_dfr() to apply the tour() function to each element of that list and bind the results together into a data frame:\n\n\nobj <- obj %>%\n  group_split(g) %>%\n  map_dfr(~tour(.x))\nobj\n\n\n# A tibble: 100 × 6\n         x      y     g x_shift y_shift  tour\n     <dbl>  <dbl> <int>   <dbl>   <dbl> <int>\n 1 -0.626  -0.620     1    1.13   -1.00     1\n 2 -0.165  -1.91      1    1.13   -1.00     9\n 3  0.267  -0.926     1    1.13   -1.00     3\n 4 -0.103  -0.589     1    1.13   -1.00     8\n 5  0.370  -0.430     1    1.13   -1.00     4\n 6  0.557  -0.464     1    1.13   -1.00     5\n 7  2.17    0.208     1    1.13   -1.00     2\n 8  0.821   0.494     1    1.13   -1.00    10\n 9 -0.820   1.77      1    1.13   -1.00     7\n10 -0.0162 -0.320     1    1.13   -1.00     6\n# … with 90 more rows\n\nNow when I apply the same plotting code to the new data object, here’s what I get:\n\n\nggplot(\n  data = obj, \n  mapping = aes(\n    x = x + x_shift, \n    y = y + y_shift, \n    fill = g, \n    group = g\n  )\n) +\n  geom_polygon(show.legend = FALSE) + \n  coord_equal() + \n  theme_void() + \n  scale_fill_scico(palette = \"lajolla\")\n\n\n\n\nOoh, I like this.\nFormalise a system…\nThe next step in the process is to take all the moving parts and write a system. The exact details of what consitutes a generative art system is a little vague, but I usually think of it as a collection of functions that capture the essence of the process. If I’m being fancy I’ll convert this set of functions to a full-fledged R package, but let’s not bother with that for this simple system. So what do we need? First, I’ll state the dependencies:\n\n\nlibrary(tidyverse)\nlibrary(scico)\nlibrary(TSP)\n\n\n\nNext, let’s keep the tour() function as a separate thing. It’s one way of organising the points that belong to the same group, but there might be others:\n\n\ntour <- function(obj) {\n  tsp <- ETSP(obj[,c(\"x\",\"y\")])\n  obj$tour <- unname(c(solve_TSP(tsp)))\n  arrange(obj, order(tour))\n}\n\n\n\nMy personal style is to separate the “builder” functions that generate the underlying data structure from the “styling” functions that render that data structure as an image. For the current project, our builder function is build_art() and defined as follows:\n\n\nbuild_art <- function(\n  points = 100,   # total number of points\n  groups = 10,    # number of groups\n  polygon = tour, # function used to organise points\n  gap = 1,        # standard deviation of the \"shift\" separating groups\n  seed = 1        # numeric seed to use\n) {\n  \n  # set the seed\n  set.seed(seed)\n  \n  # create the initial data frame\n  obj <- tibble(\n    x = rnorm(points), \n    y = rnorm(points), \n    g = sample(groups, points, TRUE)\n  )\n  \n  # create the offset for each group\n  grp <- tibble(\n    g = 1:groups,\n    x_shift = rnorm(groups) * gap,\n    y_shift = rnorm(groups) * gap\n  )\n  \n  # merge obj with grp\n  obj <- full_join(obj, grp, by = \"g\") \n  \n  # split obj by group and apply the \"polygon\" mapping\n  # function separately to each group\n  obj <- obj %>%\n    group_split(g) %>%\n    map_dfr(~polygon(.x))\n  \n  return(obj) # output\n}\n\n\n\nAs you can see, it’s more or less the same as the code I developed for my original example, just written with a little more abstraction so that I can feed in different parameter values later. The draw_art() function takes this object as input, and creates a plot using the same ggplot2 code. The only free “parameter” here is the ... that I can use to pass arguments to the palette function:\n\n\ndraw_art <- function(obj, ...) {\n  ggplot(\n    data = obj, \n    mapping = aes(\n      x = x + x_shift, \n      y = y + y_shift, \n      fill = g, \n      group = g\n    )\n  ) +\n    geom_polygon(show.legend = FALSE) + \n    coord_equal() + \n    theme_void() + \n    scale_fill_scico(...)\n}\n\n\n\nNow we’re ready to go! Because I set it up so that every parameter has a default value that corresponds to the same parameters I used to draw the original picture, this code reproduces the original image:\n\n\nbuild_art() %>% \n  draw_art()\n\n\n\n\n… well, almost!\nVary parameters…\nOkay, the one thing that I didn’t do is specify the default palette. In the scico package the default palette is “bilbao”, and the original artwork I produced used the “lajolla” palette. So the default output of the system is identical to this:\n\n\nbuild_art(seed = 1) %>% \n  draw_art(palette = \"bilbao\")\n\n\n\n\nIf I’d set palette = \"lajolla\" I’d have obtained exactly the same result as before. But let’s play around a little bit. If I switch to the “vik” palette I get output with the same shapes, just with a different colours scheme:\n\n\nbuild_art(seed = 1) %>% \n  draw_art(palette = \"vik\")\n\n\n\n\nHowever, if I modify the seed argument as well I get different random points, and so the resulting shapes are different.\n\n\nbuild_art(seed = 2) %>% \n  draw_art(palette = \"vik\")\n\n\n\n\nMore generally, I can play around with my new system and find out what it is capable of. Here’s a version with 1000 points divided into 5 groups with a fairly modest offset:\n\n\nbuild_art(\n  points = 1000, \n  groups = 5,\n  gap = 2\n) %>% \n  draw_art(\n    palette = \"vik\", \n    alpha = .8\n  )\n\n\n\n\nThe shapes aren’t quite what I was expecting: I’m not used to seeing TSP solutions rendered as polygons, because they’re usually drawn as paths, and they make me think of crazy shuriken or maybe really screwed up snowflakes. Not as organic as I thought it might look, but still neat. Notice that I’ve also made the shapes slightly transparent by setting the alpha argument that gets passed to scale_fill_scico(). Okay, let’s play around a bit more:\n\n\nbuild_art(\n  points = 5000, \n  groups = 20,\n  gap = 7\n) %>% \n  draw_art(\n    palette = \"bamako\", \n    alpha = .8\n  )\n\n\n\n\nThis is kind of neat too, but I want to try something different. The general pattern for a TSP solution is that they take on this snowflake/shuriken look when there are many points, but not when there are fewer data points. So this time I’ll have 10000 points in total, but divide them among 1000 groups so that on average each polygon is defined by 10 vertices. I’ll space them out a little bit more too, and…\n\n\nbuild_art(\n  points = 10000, \n  groups = 1000,\n  gap = 15, \n  seed = 10\n) %>% \n  draw_art(palette = \"tokyo\")\n\n\n\n\nI kind of love it!\nHave fun exploiting loopholes\nAt the beginning, when I created the system, I set tour() to be the default polygon function used to modify each polygon. My original plan was that this function was really just supposed to be used to order the points, but there’s actually nothing in the system that prevents me from doing something fancier. For example, here’s a sneaky trick where the function calls dplyr::mutate() before passing the data for that group to the tour() function. In this case, what I’ve done is a dilation transformation: the overall size of each group is multiplied by the group number g, so now the shapes will lie on top of each other with different scales. It also, in another slightly sneaky trick, flips the sign of the group number which will ensure that when the data gets passed to draw_art() the order of the colours will be reversed. The result…\n\n\nshift_tour <- function(obj) {\n  obj %>% \n    mutate(\n      x = x * g, \n      y = y * g, \n      g = -g\n    ) %>%\n    tour()\n}\n\nbuild_art(\n  points = 5000,\n  groups = 200,\n  gap = 0,\n  polygon = shift_tour\n) %>% draw_art(palette = \"oslo\")\n\n\n\n\n… is really quite lovely. Later on, I might decide that this little trick is worth bundling into another function, the system gains new flexibility, and the range of things you can do by playing around with it expands. But I think this is quite enough for now, so it’s time to move on to the most important step of all …\nTweet it!\nBecause what’s the point of making art if you can’t share it with people?\n\n\nLast updated\n2021-11-02 06:45:43 AEDT\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-11-01_unpredictable-paintings/featured.png",
    "last_modified": "2022-01-10T11:27:13+11:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-10-19_rtistry-posts/",
    "title": "Generative art resources in R",
    "description": "An extremely incomplete (and probably biased) list of resources to\nhelp an aspiring generative artist get started making pretty pictures\nin R",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-10-19",
    "categories": [],
    "contents": "\n\n\n\nPeople often ask me if I have any words of advice for young people. No wait, that’s not right. Nobody wants to hear my words of advice for young people, largely because I have none. What they often do ask me is if I have any words of advice for aspiring generative artists who want to use R to make pretty pictures. To be honest, I don’t have a lot of advice there either, but I’ll try my best.\nLet’s start with the big picture: there are no books or general purpose introductions out there. There are no books, no CRAN task views, no courses you can take. In fact, until quite recently generative art in R was an extremely niche topic. To my knowledge, the #rtistry hashtag on twitter is where you’ll find the most art and the most posts about the topic, but that hashtag is pretty new.1 There were resources that existed prior to that, of course: how could there not be? After all, Thomas Lin Pedersen has been building a toolkit for generative art in R for quite some time now. In his keynote talk at celebRation2020, he refers to an “art driven development” process that has led him to create several packages that are valuable to the would-be generative artist. For example:\nambient is amazingly useful when you want to play around with flow fields or generate interesting multidimensional noise patterns\nparticles provides a toolkit for particle simulation in R: it’s inspired by the d3-force javascript module, and is useful when you want to simulate forces acting on particles\nggforce provides a collection of tools that add some missing functionality to ggplot2, much of which is very handy when making art\nThese tools are great, but if you’re just getting started it can be helpful to play around in a more constrained environment. If you want something extremely simple, you could play around with the flametree package I wrote. It’s not very flexible (it just draws branching things!) but it does have the advantage that you can get started with something as simple as this:\n\n\nlibrary(flametree)\n\n# pick some colours\nshades <- c(\"#1b2e3c\", \"#0c0c1e\", \"#74112f\", \"#f3e3e2\")\n\n# data structure defining the trees\ndat <- flametree_grow(time = 10, trees = 10)\n\n# draw the plot\ndat %>% \n  flametree_plot(\n    background = \"antiquewhite\",\n    palette = shades, \n    style = \"nativeflora\"\n  )\n\n\n\n\nPlaying around with a package like flametree – or jasmines if you want something a little more flexible – is a nice way to start drawing things, but at some point you might want to understand the process involved in creating a system like this. I’ve occasionally used art as a way to help teach people how to program in R, so you might find these programming of aRt slides helpful, and the precursor to flametree is discussed in my slides on functional programming.\nResources like mine can help get you started, but there are many other great artists out there who often post tutorials and walkthroughs. For instance, Antonio Sánchez Chinchón has a lot of really useful tutorials on his blog fronkonstin.com. Ijeamaka Anyene has written a lovely and gentle introduction to her system for rectangle subdivision. Will Chase writes about his process on his blog sometimes: here’s an example on a grid system. Jiwan Heo has a wonderful post on how to get started with flow fields in R among many other lovely posts! You can look outside of the R community too: Tyler Hobbs writes a lot of essays about generative art that describe algorithms in fairly general terms. For instance, one of my systems is built from his essay on simulating watercolour paints. And of course there’s also the walkthrough I wrote for one of my systems here and the piece I wrote that talks a little bit about the psychological process of making art in R.\nMy hope is that these resources will point you in the right direction to get started, but more than anything else I would emphasise that it takes time and effort. Art is a skill like any other. I’ve been practicing for about three years now, and while I am happy with the pieces I make, I still have a lot to learn. And that’s okay – one of the big things I always want to stress is that play is a huge part of the process. Making polished systems comes later!\nIn any case, I’ll leave this post as it is for now but if folks would like to suggest additional resources, I can always update it if need be!\nPostscript\nOkay, I’m going to start adding things. This is just a completely unstructured list for now, but I know how my brain works: if I don’t bookmark the cool posts and resources I see pop up on my timeline I’ll never find them again…\nR specific\nThinking outside the grid by Meghan Harris\nGradients repository by Sharla Gelfand\nGenerative art package by Nicola Rennie\nVarious art posts by Claus Wilke\nggbenjamini package by Urs Wilke\nGenerative art examples by Pierre Casadebaig\nThe art in randomness by Dorit Geifman\nGenerative art galleries by Jacquie Tran\nArt portfolio site by Ijeamaka Anyene\nMore general\nthatcreativecode.page is a great general resource\nthe description of asemi.ca shows a design process in detail\nTyler Hobbs generative art essays\n\nLast updated\n2022-03-06 15:20:42 AEDT\nDetails\nsource code, R environment\n\n\n\n\n\n\nA little bit of searching on twitter suggests that I proposed the hashtag on January 20th 2021 in a now-deleted tweet.↩︎\n",
    "preview": "posts/2021-10-19_rtistry-posts/preview-image.png",
    "last_modified": "2022-03-07T10:37:48+11:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-09-30_on-blogging-reproducibly/",
    "title": "On blogging reproducibly with renv",
    "description": "Some initial thoughts on how to deploy a distill blog in a reproducible fashion. It's a little harder than it looks and I am still working out all the details. To make my life a little easier, I started writing a small package called \"refinery\", which uses the renv package to manage a separate R environment for every post, and aims to prevent conflicts between renv and distill. I'm not sure it's useful to anyone except me, but it makes me happy.",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-09-30",
    "categories": [],
    "contents": "\n\nContents\nWhy is this so hard?\nSome useful tools\nProject environments with renv\nEscaping the Catch 22\nStep 1: Create the post\nStep 2: Start using renv\nStep 3: Loading the environment\nStep 4: Updating the R environment\nStep 5: Let your readers know!\n\nSo… what next?\n\n\n\n\nI started my very first blog in the dark ages, when dialup internet was a thing and the 21st century was still shiny and new. There are very few hints that this blog ever existed, which is perhaps fortunate for me since it wasn’t very good. For all its flaws though, it was a useful thing to try: rather than use one of the big blogging platforms, I hosted my own static site using the university website, and it got me started thinking about other forms of professional communication besides the tiresome process of writing academic papers. Besides, writing blog posts isn’t just useful, it’s fun.\nIt is surprising, then, that I haven’t managed to keep any of my many blogs running consistently. I used to think this was a personal failing on my part, but I’ve come to realise that technical blogging is an extremely difficult thing to do cleanly. In my first post on this blog I outlined four principles that I’ve tried to adhere to over the last year or two, and I think they’ve served me well:\nSimplicity. Try to use the simplest tools you can: hidden dependencies will hurt you later\nEncapsulation. Isolate the blog: don’t incorporate it into your home page\nFocus. A blog should do one thing well: if you do many things, you can have many blogs\nReproducibility. An R blog needs to manage the R environment cleanly\nThe first three are (I think) somewhat self explanatory. It’s the fourth one that I want to talk about here, because it’s a lot harder than it looks, and my initial post on this blog underestimated how tricky it can be to get this one right. I won’t be so arrogant as to claim that I’ve gotten it right now, but with the help of Kevin Ushey’s very excellent renv package, I’m slowly making progress!\nWhy is this so hard?\nRunning a programming blog based in R markdown is fundamentally hard, because of the very thing that makes R markdown attractive: the blog post is also the source code. This is a both a blessing and a curse. It’s a blessing because it forces you, the blogger, to write code that is readable to your audience. It forces you to write code that actually works: if the code doesn’t work, the post doesn’t knit. This is extremely valuable to you and to your audience. Having become addicted to literate programming tools such as R markdown, I would never want to go back to the bad old days where you wrote your code in scripts and pasted chunks of non-executable code into a document. Over and over again I found that this introduced horrible problems: I’d fix a bug in the source code, and then forget to update it in the document. With the advent of R markdown and the many tools that rely on it (distill, blogdown, bookdown, etc), I hope never to be forced to return to that nightmare.\nHowever, there is a catch. There is always a catch. The catch in this cases is that managing your R environment is hard. Every time you write a new post, your R environment is likely to change. Packages will have been updated, and there is a chance that code you wrote in an old post will no longer run the same way now as it did back then. The passage of time means that eventually all your old posts break: they were written using a particular R environment that no longer exists on your computer. What’s worse is that every post has a unique environment. If you want to ensure that old posts still knit, then every post needs to be associated with its own reproducible R environment. In effect, you’re in a situation where you need to maintain many R projects (one per blog post), that are themselves contained within an encompassing R project (the blog itself). That’s not easy to do.\n\n\n\nFigure 1: Image by Patrick Tomasso. Available by CC0 licence on unsplash.\n\n\n\nSome useful tools\nThe difficulty in managing the R environments in a blogging context is something that comes up a lot, and there are a few workarounds that make your life a little easier. For example, in a Distill blog like this one, you maintain manual control over when a post is rendered. Building the whole site with rmarkdown::render_site() won’t trigger a rebuild of posts, so it’s possible to rebuild the rest of the site without attempting to re-knit old posts. This is a very good thing, and in the early days of blogdown the fact that you didn’t have that protection was the source of a lot of problems (happily, they fixed that now!)\nAnother thing you can do to make things a little easier is to use utils::sessionInfo() or devtools::session_info(). Appending a call to one of these functions to your post will at least ensure that the reader of your post knows something about what the R environment was at the time you last knit the post:\n\n\nsessionInfo()\n\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_AU.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_AU.UTF-8        LC_COLLATE=en_AU.UTF-8    \n [5] LC_MONETARY=en_AU.UTF-8    LC_MESSAGES=en_AU.UTF-8   \n [7] LC_PAPER=en_AU.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_AU.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nloaded via a namespace (and not attached):\n [1] fansi_0.5.0         rprojroot_2.0.2     digest_0.6.28      \n [4] R6_2.5.1            jsonlite_1.7.2      magrittr_2.0.1     \n [7] evaluate_0.14       highr_0.9           stringi_1.7.4      \n[10] rlang_0.4.11        renv_0.14.0         fs_1.5.0           \n[13] refinery_0.0.0.9057 jquerylib_0.1.4     bslib_0.3.0        \n[16] vctrs_0.3.8         rmarkdown_2.10      distill_1.2        \n[19] tools_4.1.1         stringr_1.4.0       xfun_0.26          \n[22] yaml_2.2.1          fastmap_1.1.0       compiler_4.1.1     \n[25] htmltools_0.5.2     knitr_1.36          downlit_0.2.1      \n[28] sass_0.4.0         \n\nThese are useful, and taken together it’s possible to run a blog that won’t break on you, but it’s still less than ideal. For example, one problem I used to encounter often is the “minor edit” headache. I would often want to revisit an old blog post – one that no longer knits because the R environment has changed – and add a brief note mentioning that the code doesn’t work with more recent versions of certain packages! This is something I think is important to do, so that anyone reading my old posts won’t try using the same code in an R environment that won’t run it. At a bare minimum that seems polite, but… in order to make the update, I would need to modify the post, which means I’d have to re-knit the post, but… as aforementioned, the post won’t knit. It’s a Catch 22: you can’t inform people that the post won’t knit unless you are able to knit the post.\n\n\n\nFigure 2: Image by Andrew Neel. Available by CC0 licence on unsplash.\n\n\n\nProject environments with renv\nI imagine there are many different ways to solve this problem, but the approach I’ve taken in this blog is to rely on the renv package by Kevin Ushey. The goal of renv is to allow you to create and manage reproducible R environments that you can associate with a project. This post isn’t the place to write a full tutorial on how to use renv, but to oversimplify somewhat, the renv package manages an R environment using two things the lockfile and the a local package library. For any given project, you can start using renv using renv::init().\nThe lockfile associated with an R project has the file name renv.lock and it consists of a collection of records that precisely specify the version of renv, the version of R, and detailed information about the packages used in the project. One nice property of renv is that the lockfile is capable of tracking packages installed from GitHub as well as CRAN. For example, here’s what an entry looks like for a package installed from CRAN:\n\"distill\": {\n  \"Package\": \"distill\",\n  \"Version\": \"1.2\",\n  \"Source\": \"Repository\",\n  \"Repository\": \"CRAN\",\n  \"Hash\": \"5edf0b55f685c668d5e800051bc31f3d\"\n}\nThis entry tells you that this post (because I’m copying from the lockfile for this post) was generated using version 1.2 of the distill package, downloaded from CRAN. On the other hand, the version of cli that I’m currently using came from GitHub:\n\"cli\": {\n  \"Package\": \"cli\",\n  \"Version\": \"3.0.1.9000\",\n  \"Source\": \"GitHub\",\n  \"RemoteType\": \"github\",\n  \"RemoteHost\": \"api.github.com\",\n  \"RemoteRepo\": \"cli\",\n  \"RemoteUsername\": \"r-lib\",\n  \"RemoteRef\": \"HEAD\",\n  \"RemoteSha\": \"154f3215e458728a2155217a7f4897da5b8edea0\",\n  \"Hash\": \"3347d46b7c20b31f8d40491f57e65c38\"\n}\nThe complete lockfile is rather long, and it contains all the information that you need to recreate the R environment.1 For any given project, you can create a lockfile using renv::snapshot().\nHowever, although the lockfile contains the description of the R environment, it doesn’t actually contain the packages. Without the actual packages, you can’t do very much, so the renv package creates a local package library for each project, which contains the actual package installations.2. Given a lockfile, you can update the corresponding library using renv::restore().\nTo learn more about renv, I strongly recommend reading the package documentation. It’s very good.\n\n\n\nFigure 3: Image by Nadine Marfurt. Available by CC0 licence on unsplash.\n\n\n\nEscaping the Catch 22\nThe usual intent when using renv is to maintain one R environment per project, which is not quite perfectly aligned with the needs of a blog. For the blogging situation, we want one R environment per post, and – importantly – we don’t want the renv infrastructure and the blog infrastructure to interfere with each other. It’s not too difficult to do this, but I found it a little finicky to get started. So, to make my life a little easier, I started writing refinery, a small package whose sole purpose is to make distill and renv play nicely together!\nThe package is very much a work in progress. It’s reached the point where I can start using it on a regular basis in my own blogging, but that’s as far as I’ve gotten. But, to give you a sense of some of the design choices I’ve made, here’s a quick run through. The intended blogging workflow is as follows:\nStep 1: Create the post\nAs a general rule, I find it extremely helpful to create posts from a template file. In my blog there’s a _templates folder containing R markdown files that are pre-populated with information that rarely changes (e.g., my name doesn’t change very often). Actually, I only have one template for this blog, but in principle there can be as many as you like: my post template has author information pre-populated, contains instructions on which fields need to be updated, and so on. Using templates is a low-tech but effective way of improving reproducibility, because it will help to ensure that all posts adhere to a common structure.\nSo the first step is to create a new post from a template, and to that end the refinery package has a use_article_template() function:\n\nrefinery::use_article_template(\n  template = \"_templates/standard_post.Rmd\",\n  slug = \"fabulous-blog-post\", \n  date = \"1999-12-31\"\n  renv_new = FALSE\n)\n\nAt a minimum, you need to specify the template argument and the slug argument. If you don’t specify a date, today’s date will be used. The concept behind this function is not at all novel: it was inspired by and is deeply similar to the create_post_from_template() function from Ella Kaye’s distilltools package. The arguments are a little different, but it’s the same idea.\nWhere use_article_template() differs from other “new post” functions is that it contains a renv_new argument. If renv_new = TRUE (the default), then creating the post will also set up the infrastructure necessary to manage the R environment with renv. My usual approach is to stick with the default, and allow use_article_template() to take care of that step for me, but for expository purposes the code snippet above prevents that from happening. So we’ll have to do that manually in the next section.\nIn the meantime, however, the effect of calling use_article_template() is to create a post inside the _posts folder of your blog. In the example above, a new folder will be created here:\n_posts/1999-12-31_fabulous-blog-post\nInside this folder will be an index.Rmd file that has been constructed from the post template.\n\n\n\nFigure 4: Image by Nick Fewings. Available by CC0 licence on unsplash.\n\n\n\nStep 2: Start using renv\nBecause I set renv_new = FALSE in the code snippet above, we currently don’t have any renv infrastructure associated with this post. To do that, we’d use the following command:\n\n\nrefinery::renv_new(\"1999-12-31_fabulous-blog-post\")\n\n\n\nLike everything else in the refinery package, this is just a convenience function. All of the heavily lifting is being performed by renv::init(). What the refinery::renv_new() does is make sure that the renv infrastructure doesn’t get lumped in with the distill infrastructure, and a few other little niceties.\nWhy separate renv from distill? I’m so glad you asked! The default behaviour of renv::init() is to create a renv folder inside your project directory. This makes perfect sense in the “one environment per project” scenario, but it’s awkward for a blog. If you define “the blog” as the project, then you’re right back where you started: there’s no way to have separate environments for each post. But if you define “the post” as the project, you run into a different problem: distill doesn’t know about renv, and if a post folder contains a renv folder, distill will search inside it looking for things that might be blog posts (and it sometimes finds them, which leads to chaos!) We don’t want that.\nThe solution adopted by the refinery package is to create a new top level folder called _renv,3 and then place all the renv infrastructure in there. For our hypothetical post above, the renv infrastructure would be stored in\n_renv/_posts/1999-12-31_fabulous-blog-post\nThe lockfile and library files associated with our new blog post are stored in there, cleanly separated from anything that distill would be interested in peeking at!\nStep 3: Loading the environment\nThe next step is to make sure that your blog post makes proper use of the renv infrastructure we’ve just created. To do that for the hypothetical post above, all you’d need to do is ensure that the R markdown file contains a line like this:\n\n\nrefinery::renv_load(\"1999-12-31_fabulous-blog-post\")\n\n\n\nWhat that will do is ensure that when the post is knit, all the R code is executed using the R environment associated with the post. Yet again, if you take a look at the source code you’ll see that the refinery package really isn’t doing very much work. This is a very thin wrapper around renv::load().\nStep 4: Updating the R environment\nWhen writing a new blog post, there are two main functions in the refinery package that I use to manage the R environment (and a third one I use to rage quit!)\nThe refinery::renv_snapshot() function is a wrapper around renv::snapshot(): it uses renv to scan the post folder looking for package dependencies, and then writes the lockfile to the appropriate location in the renv infrastructure.\nThe refinery::renv_restore() function is a wrapper around renv::restore(). It updates the state of the local package library so that it mirrors the state of the lockfile\nThe refinery::renv_delete() function deletes all the renv infrastructure associated with a particular post. It exists so that you can wipe the local library, lockfile, etc, and start over.\nThe process works like this. When the renv infrastructure gets created using refinery::renv_new(), it includes a bare minimum of packages in the local package library: only renv, distill, refinery, and their dependencies are added. It doesn’t, for example, include dplyr.\nAs you’re writing your blog post, you might find yourself using dplyr functions, and when you go to knit that post… it won’t work, even if you have dplyr on your machine. That’s because dplyr is not yet listed in the lockfile and it’s not stored in the local package library. We can fix this with two lines of code. First, we can use refinery::renv_snapshot() to scan the current post: because Kevin Ushey is very smart and renv is a very good package, the renv::snapshot() function that does all the real work will automatically discover that dplyr is being used, and it will update the lockfile:\n\n\nrefinery::renv_snapshot(\"1999-12-31_fabulous-blog-post\")\n\n\n\nThis updates the lockfile, but only the lockfile. What you can then do is use the updated lockfile to update the library. The command for that is refinery::renv_restore() which – shockingly – is in fact just a thin wrapper around renv::restore():\n\n\nrefinery::renv_restore(\"1999-12-31_fabulous-blog-post\")\n\n\n\nOnce you’ve done that, your post will knit, your lockfile will record all the reproducibility information associated with your post, and you will be happy! (Maybe)\nStep 5: Let your readers know!\nOne thing I’ve been doing on my blog is including a couple of additional appendices besides the usual ones that distill provides: a “last updated” appendix that contains the timestamp indicating when post was most recently re-knit, and a “details” appendix that contains two links: one that goes to the R markdown source for the blog post, and another one that goes to the renv lockfile for the post. For that, there’s a convenience function called insert_appendix(). There are two arguments you need to include: repo_spec is the usual “user/repo” specification for the GitHub repository, and name is the name of the folder containing the blog post. Something like this:\n\nrefinery::insert_appendix(\n  repo_spec = \"djnavarro/distill-blog\"\n  name = \"1999-12-31_fabulous-blog-post\"\n)\n\n\n\n\nFigure 5: Image by Brett Jordan Available by CC0 licence on unsplash.\n\n\n\nSo… what next?\nOne of the open questions I have is whether it’s worthwhile putting much more effort into the refinery package. As it stands I’m planning to improve the documentation a little (so that “me six months in the future” doesn’t hate “me today”), but in truth this is something I wrote for myself: I like having the refinery package around because it supports this blog, but that goal is now (I hope!) mostly accomplished. It may be that other folks running distill blogs would like to use these tools, in which case it might be valuable to do something more rigorous like, oh, write some unit tests and send it to CRAN.\nFor now though I’m happy where things stand. If things work as planned, this should give me the infrastructure I need to maintain this blog properly for as long as I want to, and when the world moves on and an old post is no longer accurate, it should be easy to edit the post noting that the code in the post won’t work any more, re-knit it using the original R environment, and continue blogging with fewer tears. At least, that’s the hope!\n\n\nLast updated\n2021-10-01 20:41:34 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\nIt doesn’t give you complete information about the machine it’s running on though, and I’m not quite at the point that I’m willing to resort to docker yet!↩︎\nThis is an oversimplification: renv tries to be efficient and maintains a cache that helps you avoid duplication. But as I said, I’m not going to dive into details here↩︎\nI decided to call the top-level folder _renv rather than renv to ensure that distill will ignore the folder unless you explicitly tell it otherwise. The _renv files won’t end up being copied to your website.↩︎\n",
    "preview": "posts/2021-09-30_on-blogging-reproducibly/preview-image.jpg",
    "last_modified": "2022-01-10T11:27:13+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-09-26_setting-up-on-hic-et-nunc/",
    "title": "How to mint digital art on HEN",
    "description": "Not every artist wants to make cryptoart, and that's okay. Others do, and that's okay too. But if you want to try it out in a socially responsible way, it takes a bit of effort to get started. This post attempts to make the process a little easier by walking you through the whole thing, on the assumption that you are an artist who (like me) has very little interest in blockchain or cryptocurrency but would like to get paid and pay the rent",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-09-26",
    "categories": [],
    "contents": "\n\nContents\nPrologue: Barriers to entry\nEnvironmental costs matter\nThere are alternatives\nIt can be confusing\nLet’s demystify it\n\n1: Get an overview\n2: Create a wallet\n3: Tell HEN who you are\nSynchronise with your wallet\nThe HEN menu is weird\nName, avatar and bio\nCheck out your profile\n\nIntermission: Follow people\n4: Get a little money\n5: Release your art!\nMinting the art\nPutting OBJKTs up for sale\nCreating auctions\nSome art…\n\n6: Share on social media\n7: Manage your identity\nEstablishing a Tezos Profile\nCreating an alias on Tezos Blockchain Explorer\nPurchasing a Tezos Domain\n\n8: Convert tez to dollars\nEpilogue: Is all it worth it?\n\n\n\nCryptoart can be a touchy subject for generative artists, and it’s something a lot of us have messy feelings about. In my case it is no secret that I feel conflicted, and I completely understand why a lot of us are uncomfortable with it. I genuinely believe there are many perfectly good reasons why a generative artist would choose not to participate. On the other hand, I also recognise that there are some very sensible reasons why a generative artist would want (or need) to sell NFTs: artists have to pay rent, for example. So this post isn’t about passing judgment one way or the other. It’s intended to be a guide to help other artists get started in this area, particularly artists in the R community, if they should decide to try it out. That’s all.\nThis post is also not supposed to be an introduction to blockchains or cryptocurrencies. It doesn’t dive into the details on what these things are or even what an NFT is. I make art: I don’t care about any of these subjects. What I’m assuming is that you’re coming to this world from a similar position to me: you have a vague understanding of what blockchain is, what cryptocurrencies are about, and have a similarly vague notion that an NFT is kind of like a “digitally signed copy” of your art that you can sell to other people. That’s all you need.\nPrologue: Barriers to entry\nOne thing I have noticed about the world of cryptoart is that there are many barriers to entry. Some barriers are obvious: if you want to sell art on Foundation, for example, you need to be invited. To be invited, you need to know someone who can and will invite you. As anyone who has ever been excluded from a fancy venue by virtue of their race, gender, sexual orientation, transgender status etc can attest, an invitation requirement is a non-trivial and frequently discriminatory barrier. “By invitation” systems create entry barriers by design: for good or ill, they are inherently exclusionary. But there are other ways in which cryptoart creates barriers to entry.\nEnvironmental costs matter\nAnother kind of barrier comes from the nature of cryptoart. Blockchains were not designed to be energy efficient, and they can be extraordinarily wasteful (much more than you’d think). Environmental considerations also create barriers to entry, albeit indirect barriers. For example, the biggest cryptocurrencies like Bitcoin and Ethereum operate on a “proof of work” principle (often abbreviated to “PoW”) and as the name suggests, operations on those chains require a lot of computational work. A lot. They are staggeringly wasteful, and as a consequence the total energy consumption of these chains is so high that an NFT minted on one of these chains has a very high carbon footprint. Proof of work chains are an environmental disaster, and so (in my mind) they are socially irresponsible. Don’t use them if you can avoid it.\nThis poses a problem for artists, unfortunately. The biggest cryptoart markets are based on the Ethereum chain, and Ethereum is a proof of work chain. True, there are plans to change this and make Ethereum more ethical, but it hasn’t happened yet and I personally am unwilling to participate until that switch actually occurs. This is deeply unfortunate from artistic point of view, because it rules out OpenSea. It sucks because OpenSea is the largest marketplace and it’s very easy to get started there. For instance, I have an unused account that I set up in a few minutes before I realised the problem. But for me the end-user convenience wasn’t worth the environmental costs, so I abandoned this idea at the outset. On the plus side, OpenSea have announced that they are planning to support the Tezos blockchain (see below), and when that day comes I will probably make use of my OpenSea account: the thing I take moral issue with is not OpenSea, it is with Ethereum (or more precisely, with proof-of-work chains). Personally, I don’t want to touch the stuff.\nSo what are the alternatives?\nThere are alternatives\nThe main alternative to the “proof of work” blockchains are the “proof of stake” (PoS) blockchains. These don’t require anywhere near as much computation, and as a consequence are much more energy efficient. For that reason, NFTs on those chains are often called “clean NFTs”. There are a multiple proof of stake chains (Tezos, Solana, etc), but the one I’m most familiar with is Tezos. To give you a sense of just how extreme the difference is, this is a screenshot that popped up on one of the sites while I was doing my initial exploration:\n\n\n\nEven if this claim is somewhat exaggerated for marketing purposes, the sheer scale of it is remarkable. A multiplicative factor of 1.5 million is… enormous. I could literally mint NFTs on Tezos for every single image that I have ever created for the rest of my life, and it would still be several orders of magnitude more energy efficient than minting one piece on Ethereum. To my way of thinking, that makes a massive difference to the moral calculus associated with minting NFTs. In fact, the difference between Tezos and Ethereum is so extreme that there is actually one art marketplace there – Bazaar – that is not just carbon neutral but is actually carbon negative. That’s only possible because Tezos is so much more efficient than Ethereum, and it becomes practical for the developers to impose a carbon tax on minting: the transaction costs are used to purchase sufficient carbon offsets to ensure the system as a whole remains carbon negative. Right now I wouldn’t recommend setting up on Bazaar because it’s so early in development that it’s hard to use, but I’m absolutely keeping an eye on it for the future!\nSetting up on the Tezos blockchain is particularly appealing because it has an established digital art marketplace called “hic et nunc”. The name is Latin in origin and translates to “here and now”. You’ll usually see it abbreviated to “HEN”, which is what I’ll call it in this post, but some people use “H=N”, I guess because it looks visually similar to the HEN logo. The HEN marketplace is completely open: you don’t need an invitation. There’s no super-secret club to be invited into (as far as I know!), and to my mind that’s a huge positive. Better yet, a few folks from the R art community are already there. I’m entirely certain that there are others I don’t know about yet, but so far on HEN I’ve already found Thomas Lin Pedersen, Will Chase, Antonio S. Chinchón, and George Savva. As of a few days ago, I’m there too.\nOpenness! Community! Yay!\nIf there’s one thing I have learned from the lovely R folks on twitter, everything is better when you are part of a supportive team of people who actually care about each other and work to build each other up. From my perspective, this makes HEN a very attractive option.\nThere is, unfortunately, a catch. There is always a catch.\nIt can be confusing\nOne big limitation to HEN is that it isn’t easy to get started there unless you are already somewhat enmeshed in the crypto world generally, or the cryptoart scene specifically. The ecosystem is distributed over several sites that have weird names without enough vowels, the user interfaces on the sites tend to be unconventional (often pointlessly so in my opinion), and the “how to” guides aren’t very easy to read. The overall aesthetic and typology screams out WE ARE THE COOL KIDS in capital letters. It doesn’t even have the good grace to be subtle about it. Taken together, all these little things add up, and it annoys me. I have been a professional educator for 15 years now, and I can absolutely guarantee that the overall effect of this is to create a de facto entry barrier. All these things act as signals to exclude people who aren’t already part of the clique. It feels disproportionately uncomfortable if you’re an outsider. It tells you that you’re not welcome if you’re not one of the cool kids. Are you one of the cool kids? No? Then sorry. No HEN for you babe.\nWell, fuck.\nYet again, there are barriers to entry to HEN, and that makes me uncomfortable. However, unlike the other cryptoart options I looked at, there’s something I can do to improve the situation: I can write a blog post explaining the process. This blog post.\nLet’s demystify it\nLet’s assume you’re not one of the cool kids. Let’s assume you’re just a regular human being who likes to make generative art in R, and are a little curious. You have a vague idea of what cryptocurrencies are (yeah, yeah, digital currency blah blah blah). You have a vague idea of what an NFT is (digitally signed copy of the art, whatever dude). Maaaaaybe you’ve sort of heard of HEN … but that’s only because you’ve seen some R people posting about it on twitter. And that’s it. That’s all you know. But maybe you want to try it out, just to see if it’s for you? Just to try. But you really, really, reaaaaaalllllllly don’t want to wade into all the details and you’re secretly worried that it’s all too complicated and you won’t be able to do it. Your impostor sydrome is going wild. Is that you? Do you feel the same way I felt?\nIf so, this post is written for you.\n1: Get an overview\nWhen I started setting up on, I wandered around the Tezos cryptoart landscape in confusion, wandering aimlessly over the terrain. It was all deeply unsettling. Eventually I pieced together some overall view of things, but I wouldn’t recommend doing things the same way I did. I think the best thing to do first is to “zoom out” and look at the landscape as a whole. The best site I’ve found for doing that is tezos.art. If you click on the link it will take you to a page with the following three sections:\nMarketplaces: Sites where you can mint, buy, and sell art\nWallets: Tools that handle your identity and store your funds\nCommunity: Places where you can go for help\nIt’s worth taking a quick look at this page because it gives you a feel for what all the moving parts are, but doesn’t dive into details. You’ve taken a quick peek, yes? Cool. Let’s get started…\n2: Create a wallet\nIt’s a little counterintuitive, but the natural place to start is not the art marketplaces: the first thing you need is a wallet. The reason for this is that your wallet serves two distinct purposes. As the name suggests, the wallet provides a method for storing funds: the currency itself is referred to as “tezos”, which you’ll see abbreviated to “tez” or denoted “ꜩ”. However, it also serves as your unique identifier on the Tezos blockchain. On blockchains as in life it is rather hard to do anything interesting without a public identity, so you need to create one first.\nOkaaaay… at this point you’d probably be wondering “where do I sign up for one of these wallets?” Excellent question. As you will have noticed by peeking at the tezos.art website, you have a few different options. Being offered choices is nice, of course, but it can also be anxiety-provoking when you don’t even know what the differences between the options are. So, for whatever it’s worth, I’ll mention that I chose Temple Wallet. I made that choice for two reasons and only two reasons. First, it was one of the options listed on the HEN wiki. Second, I was complaining privately to Will Chase about how confused I was and he told me uses Temple and I copied what he did. That being said, I suspect the choice is arbitrary.\nFor the sake of argument, I’ll assume you decided to use Temple too. So now you’re clicking through the link above in order to open an account with Temple Wallet and… wait, it’s just a browser extension? Yup. This seems to be very common in blockchain land, and initially it struck me as bizarre. The longer I hang around there, however, the more I realise it does make a kind of sense. Once you start doing things on Tezos, you’ll find that you have to validate everything you do. Any time you ask a website to undertake some action on your behalf, the first thing that will happen is that you’ll be asked to authorise the action using your public identity. What that means is that you have to use your wallet all the time, even for things that don’t cost money. A browser extension makes this a little easier. When the website asks you to authenticate, the wallet browser extension will create a little popup window that asks you to confirm the transaction. There’s a bit of friction to the process sometimes, and it feels a little alien, but it does start to feel normal after a while.\nMoving on… the next little strangeness is that when you set up the wallet you don’t create a username, only the password, and you’ll be given a “recovery phrase”, which is a sequence of 12 random words. Don’t lose either of these things. Here, as always, I strongly recommend that you use a password manager to store your password, because there aren’t that many options for recovery if you start losing passwords. Personally, I’ve been using 1password for a few years and I really like it. So yes. Use a password manager, store your wallet password there and store your recovery phrase there too.\nAt the end of this process you are assigned a public identity, which is a long string of complete gibberish. For example, this is me:\ntz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7\nNaturally, the first thing I did when seeing this is groan. The second thing I did is notice the Srmojf substring and it made me think of Smurfs. So I secretly think of this gibberish identifier as the Smurf, and that’s how I’ll refer to it for the rest of this post. Of course, in the long run you probably don’t want to be a random string of digits, you want to have a name! This is possible to do, and I’ll walk you through that later. But right now that’s not a complication you need to care about.\nWe’ll get to that a little bit later but the key thing for now is that your equivalent of the Smurf is both a public identifier and a bank account number. If someone wants to send you some tez, all they need to know is that string.\n3: Tell HEN who you are\nSynchronise with your wallet\nWhen you go to the HEN website you’ll see a little bit of text on the top right hand side that has a link that says “sync”. Click on that:\n\n\n\nThis will bring up an overlay that looks like this:\n\n\n\nIf you chose a Temple wallet choose the “Temple - Tezos Wallet (ex. Thanos)” option. It might ask for your password at this point but it probably won’t if you’re already logged in. What you’re more likely to see is a screen like this:\n\n\n\nThis is a message from your wallet asking you to confirm that yes, you do want to synchronise with HEN (it also shows you that I currently have a balance of 11 tez, which I guess is something like US$60). Click on connect, and HEN will now be synchronised with your identity. You can see that because the menu at the top now looks something like this:\n\n\n\nYou’re now synced: in effect, you are now logged in to HEN. You still don’t have a username, but you have authenticated yourself and you can now change some settings.\nThe HEN menu is weird\nOkay, let’s move to the next step. To the right of your Smurf, you’ll see the “hamburger” menu. It behaves pretty much the same as any menu you’d encounter on the internet, but some of the options have very non-intuitive names. Here’s what the menu looks like, with my annotations added:\n\n\n\nAs with everything about HEN, it’s very minimalist. Some of the options are easy to understand, but others are not. The options I’ve been using most are these:\nsearch takes you to the HEN search page\nedit profile allows you add some information about yourself (see next section)\nmanage assets will take you to your profile page (it took me a long time to realise this)\nOBJKT (mint) is the option you select when you want to create art. I’ll talk bout that later\nName, avatar and bio\nThe time has come to give yourself a name. If you do things in the right order and with the right mental model of what’s going on, this is pretty easy to do, but it’s easy to get a little confused because there are actually multiple things going on here, and you always have to keep in mind that your equivalent of my Smurf string is your actual identity.\nSo… your first step is to tell HEN to link your Smurf string to a name, bio and avatar. Click on “edit profile”. This brings up another slightly unconventional looking screen that has several options you can set. Here’s what mine currently looks like:\n\n\n\nThere are three things you can do immediately without any major hassle:\nFirst, if you click on “choose file” you can upload an image to give yourself a profile image.\nSecond, you can give yourself a username. The advice I read on the relevant HEN wiki page suggested that you should avoid spaces and special characters, and should stick to lower case letters because usernames are case sensitive.\nThird, you can write a brief description of yourself. It doesn’t have to be very thorough. Most people say something about who they are and what they do, but you don’t have to. For example, I’ve had a habit of identifying myself as “an object of type closure” on all my social media websites. It’s intended as a silly reference to the classic R error message:\n\n\nidentity[]\n  \n\nError in identity[]: object of type 'closure' is not subsettable\n\nAs it happens, this allowed me to make an even sillier double-layered joke in my HEN bio. When you create art on HEN the tokens that you generate are referred to as OBJKTs, so now I refer to myself as “an OBJKT of type closure”. I’m so funny.\nAaaaanyway… once you’ve done those three things, click on “save profile”, and you’re done for now. Ignore everything below the “save profile” button. All that stuff is useful, and it will let you do things like link to your twitter profile and your github profile, but it’s surprisingly finicky to set up and it costs money, so we’ll leave that until later.\nCheck out your profile\nBefore moving on, take a quick look at your profile. As I mentioned earlier, you can do this through the menu system, by selecting the “manage assets” option. Personally I wish they’d chosen a better name: I’m not an investor and I don’t think of my art as “assets”. The page that displays my art is my homepage on HEN, and it bothers me a little that the site frames it in such mercenary terms. It’s irritating. But whatever, it’s not a dealbreaker.\nIt’s worth quickly commenting on the URL for your profile. When you click on the “manage assets” link, it will take you to a URL that identifies you using the Smurf. For me, that URL is:\nhttps://www.hicetnunc.xyz/tz/tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7/\nAs long as you have your very own Smurf in your wallet, you’ll have this URL. However, if you followed the instructions in the last section, HEN is kind enough to arrange it so that the ugly Smurf based URL will automatically redirect to one based on your username. For me, that URL is:\nhttps://www.hicetnunc.xyz/djnavarro/\nAt this point, you exist on HEN! Yaaaay!\nIntermission: Follow people\nThere’s more stuff you can do to get your account set up, but you might want to take a little breather and look for some art. Maybe you want to search for someone you know in the R community who might be on HEN, and you’d like to find them. As I mentioned earlier, the HEN site does have a search page, but there are some limitations. It’s okay if you want to search by keywords to find art or artists, but what it won’t let you do is follow them. Personally, I quite like being able to follow artists whose work I love, and it would be pretty cool to have a feed where I can see what they’ve posted, arranged in chronological order. That’s where the the “HEN explorer” website is handy:\nhttps://www.henext.xyz/\nLike HEN itself, the HEN explorer site has browsing and search capability. It’s a little clunky in places (on my browser, there seems to be a bug where the search box only works when you’re on the home page), but it does the job.\nTo use HEN explorer, you’ll need to synchronise with your wallet (i.e., log in). To do that you can click on the “profile” icon in the nav bar (the one that looks like a little person), or just visit\nhttps://henext.xyz/profile\nThat will bring up a screen that looks like this\n\n\n\nClick on the “connect wallet” button, and it will take you through the same steps that were involved when you connected your wallet to the HEN site.\nOnce you’ve done that, you’re logged in to HEN explorer, and you’re able to find artists you like and follow them! If you would like to follow me, you can search for “djnavarro” on the HEN explorer search box, or you can visit my HEN explorer profile page directly:\nhttps://www.henext.xyz/tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7\nAdd a few artists you like, and you’ll get a sense of what the feed looks like. The location of the feed is\nhttps://www.henext.xyz/following\nHappy browsing!\n4: Get a little money\nOne slightly frustrating thing about this process is that it’s hard accomplish very much in this arena without spending money, and we’re rapidly reaching the point where you’ll need a little bit. Thankfully, if you’re an artist wanting to create your own art, and aren’t looking to collect anyone else’s, you don’t need very much to get started. If you’re in the R community there’s a good chance you can ask one of the other R folks on HEN to help out. That’s what I did, and I’m grateful to the people who sent me a few tez, and the others who spontaneously offered. R people are lovely.\nIf the “ask a friend” approach is an option for you, I’d recommend it for artists. The reason I say this is that you have a bigger set up cost (in terms of your time and effort) than someone who is joining in order to purchase art, so from the perspective of the artist all you need – right now – is a little start up fund. To use myself as the example, I made a lot of weird mistakes setting up and wasted quite a lot of transactions, but even with all that I think I only spent about 1 tez in total (at the exchange rate at the time that was about US$5).\nAssuming that you can solve the problem that way, you can take care of the other financials later (and there’s a guide on how to do that coming later in the post). There’s a part of me that hopes that if the R art community does end up with a larger presence on HEN, we’ll look after our own. We’re R folks, and we pay it forward because we care for each other.\nThat being said, I’m also not naive, and I know perfectly well that it doesn’t always work that way, so I’ll briefly mention other options. For example, the HEN website has some suggestions for other places you can ask for help. Alternatively if you have a Visa card, one possibility is to buy through https://tzkt.io/buy-tezos (the tzkt.io site will come up later in the post!), though you’ll need identification documents for this (or any other option) because it’s a financial institution. Finally, you can sign up at a currency exchange, which you’ll probably want to do later anyway because that’s going to be how you convert the funds from your HEN sales to regular currency. I’ll talk about that later on.\nRegardless of how you solve this part of the problem, I’m hoping that at this point you have a few tez to start out!\n5: Release your art!\nMinting the art\nSurprisingly, the process of releasing your art on HEN is quite easy, at least when compared to how complicated everything else is. If you open the menu and click on the “OBJKT (mint)” option, it will take you to the minting page, which looks like this:\n\n\n\nAt this stage in the process you upload the file, give it a name and a description, and make some decisions about (a) how many tokens you want to create, and (b) your royalties, the percentage of future sales that are returned to you. Here’s me filling one out:\n\n\n\nClick on the preview button, and it will show you a preview of what the page will look like when it goes live. If you’re happy with it you can proceed and click the “mint OBJKT” button. You’ll be asked by your wallet to confirm the minting operation (this costs a small amount of tez), and then after a short time the OBJKT (i.e., the token) exists. In this case, here’s the page displaying the OBJKT that I’ve just created:\nhttps://www.hicetnunc.xyz/objkt/359761\nPutting OBJKTs up for sale\nThe tokens now exist, but as yet they have not been placed on the market. People can’t buy them from you. To place the token for sale, go to the page showing the token (i.e., the link above). It will look something like this:\n\n\n\nIf you want to put the art on sale, click on the “swap” link that I’ve highlighted here (and if you change your mind and want to destroy it, click on the “burn” link next to it). The interface will look like this:\n\n\n\nIt will then let you decide you many of your tokens you want to put up for sale, and set the price for each one. For this particular piece I’d decided to create a lot of tokens (there are 50 of them), and I’m going to put them all on sale at the very low price of 2 tez. I honestly know nothing about pricing, but I’m playing around with it at the moment: some pieces I mint only a single token and set the price high, others I mint a large number of tokens and set the price low. In any case, when you’re happy press the “swap” button, confirm with your wallet, and the pieces will now be on sale!\nCreating auctions\nThe mechanism I’ve shown above is the simplest way to put art on sale: you list a price and wait for someone to purchase it. However, if you want to try more exotic options like auctions, you can check out objkt.com.\nSome art…\nHere are the Native Flora pieces I posted while writing this post. They’re all available for purchase!\n\n\n\n\n\n\n\n\nOBJKT 359814\n\n\n\n\n\n\n\n\nOBJKT 359795\n\n\n\n\n\n\n\n\nOBJKT 359761\n\n\n\n\n\n\n\n\nOBJKT 359745\n\n\n\n\n\n\n6: Share on social media\nAt some point you’ll probably want to advertise the fact that the artwork is available for purchase. You don’t have to, of course, and I’m honestly not sure how much of my online life I want to spend advertising art for sale, but it’s handy to have the option, and that probably means sharing on social media.\nMost of us in the R community who make art are primarily sharing on twitter. Yes, I have seen some people post on reddit, others on instagram, and no doubt many other places besides, but my social media world is dominated by twitter, and I’d like to be able to post to twitter. To my mild irritation, the HEN website doesn’t seem to do twitter cards properly, so if you share the link on its own, people won’t see a nice preview image.\nThere are a couple of ways to get around this. The first is to post the link on twitter and attach your art as an image: that way folks on twitter will get the link and and the image. But they won’t get an actual twitter card displaying the title of the piece.\nThe second solution is to use the hic.art website. At the moment, if you visit the website it will tell you that signups are closed, but that actually doesn’t matter. You don’t need to sign up to use the service. All you have to do is provide the OBJKT identifier. For instance, here’s one of my pieces on HEN:\nhttps://www.hicetnunc.xyz/objkt/354474\nThe identifier here is 354474. If I share the link above on twitter, it won’t display a very nice twitter preview. However, if I tweet this link\nhttps://hic.art/354474\nIt will display a very lovely looking twitter preview, and when the user clicks on the link or the preview it will automatically redirect to the official HEN page. It’s a nice service!\nHere’s an example from Antonio Sánchez Chinchón:\n\n\nMondrianomie 28Basic cellular multiorganism grown according to neoplasticism assumptions (2033 x 2400 PNG)3 ed - 28 tez at @hicetnunc2000https://t.co/TyNvt1zMBu#HEN #hicetnunc #hicetnunc2000 #nft #NFTs #nftcommunity #nftcollectors #cleannft #nftart #tezos #tezosart\n\n— Antonio Sánchez Chinchón (@aschinchon) September 25, 2021\n\n7: Manage your identity\nThere are at least three additional tools that may be useful to you in managing your identity in the peculiar world of cryptoart on the Tezos blockchain: (1) you can set up a Tezos Profile, (2) you can establish an alias on the Tezos Blockchain Explorer, and/or (3) you can purchase a Tezos Domain. None of these are strictly necessary, but all of them offer some value to you as an artist on HEN so I’ll discuss each one.\nEstablishing a Tezos Profile\nEarlier in this post I mentioned that it’s possible to connect your twitter profile, github account, website, etc with your HEN profile? You can do this with the assistance of Tezos Profiles. So lets go back HEN, open the menu, click on the option that says “edit profile” and then take a closer look at the window that pops up. It’s almost impossible to notice, but the text that reads “Tezos Profiles” is in fact a link:\n\n\n\nClicking on that link will take you to https://tzprofiles.com/, where you will see a very prominent “connect wallet” button. Click on that button, confirm with your wallet that you want to allow tzprofiles to connect (the little popup window will appear, like it always does), and then you’ll see a screen that looks like this:\n\n\n\nThere are several different things you can do here, and any of them that you verify on tzprofiles will eventually end up on HEN. For example, if you want to verify your twitter account, you’ll go through a series of elaborate steps (which, yes, will have to be confirmed with your wallet) and in the end you’ll be forced to send a tweet like this one:\n\n\nI am attesting that this twitter handle @djnavarro is linked to the Tezos account tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7 for @tzprofilessig:edsigtaH3nvbQjpiAfMCnT4zcQESZefXoVLPf2NEYaZeUfhwHjzRYp4oeBiiyDFLdrUAUvjBhvepyDFoxuyE2ynVYxd7TvV9fj6\n\n— Danielle Navarro (@djnavarro) September 21, 2021\n\nTo verify your GitHub account it’s pretty similar, except that it forces you to create a gist, using your GitHub account, that includes a signature block similar to the one in the tweet. For a website, it’s the same idea except you have to insert it as a DNS record (which I found extremely irritating to do). You can verify as many or as few of these as you like, but there is some value to doing them. Because Tezos Profiles forces you to go through the clunky verification process, other people can check your HEN profile and verify for themselves that it really is you posting your artwork onto the site, and not someone else who has stolen your piece (apparently, that happens way too often)\nOnce you’re done verifying your accounts, you may need to use your wallet to confirm again so that the updated Tezos Profile information can be accessed by the HEN website. After that’s been done, you’ll see icons appear on your HEN page, linking to your twitter account, github account, etc:\n\n\n\nAt this point your HEN profile is meaningfully linked to your other public identities, and any artwork you mint on HEN can be traced back to you, the original artist.\nCreating an alias on Tezos Blockchain Explorer\nAll right. If you’re like me you’ve probably been exploring as you go and you’ve been encountering other sites that seem connected to this ecosystem. In particular, you may have clicked on links associated with transactions and it has taken you to the Tezos Blockchain Explorer website. As the name suggests, the role of this website is to publicly display transactions that take place on the Tezos blockchain. For example, here’s the page showing all the transactions that have involved me in some fashion:\nhttps://tzkt.io/tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7/operations/\nWhen I first started (oh so many days ago…) it looked something like this:\n\n\n\nA lot of it is gibberish, but you can kind of see what’s going on here. Yet again you can see my Smurf, there’s a bunch of transactions that show me minting NFTs, etc. It makes a kind of sense.\nWhat might be surprising, particularly if you’ve just gone to the effort of setting up a Tezos Profile, is that the account information doesn’t show my avatar. It doesn’t include my name, or a bio, and it doesn’t include my social media links. Instead, all I have is a cartoon image of a very suspicious looking cartoon cat. Unlike HEN, the tzkt.io site doesn’t pull information from your Tezos Profile.\nThe mystery deepens a little when you start noticing that the exact same cartoon cat appears on various other sites. For example, this was how my profile looked on objkt.com at the time:\n\n\n\nThe weird cryptocat was following me around across all these websites. Hm. The suspicious kitty is cute and everything, but honestly I’d prefer my usual name and profile image to follow me around instead.\nAs it turns out, the source for all these skeptical cats is the blockchain explorer site, tzkt.io, and you can submit an application to the people who run that site to create an alias for you. The process is described in this post on the “Baking Bad” blog (don’t let the name and silly images fool you, the blog is associated with the people who run the site). The post will take you to a Google Form that you can fill out, in order to have your alias created. When you do this, it won’t update immediately: there is a manual verification process that takes about three days, so you’ll need to be patient.\nOnce that happens you’ll discover that your links have appeared on your tzkt.io page, and more importantly perhaps, you have an avatar and description on other sites that make use of this alias. This is what my profile page on objkt.com looks like now:\n\n\n\nMine is a deliberately vague because I’m a peculiar person, but you can see a slightly more informative version if you look at Thomas Lin Pedersen’s profile:\n\n\n\nPurchasing a Tezos Domain\nWhen you look at the two profiles above, there’s something slightly peculiar. Notice how Thomas’ profile now links to thomasp85.tez and mine links to djnavarro.tez? That’s something slightly different again. Those addresses aren’t created by the Tezos Profile, nor are they created when you set your alias on the Tezos Blockchain Explorer. Those are Tezos Domains. The idea is very sensible: human beings don’t really enjoy memorising long strings of random digits. It would be much more convenient if I could message someone and say “hey send tez to me at djnavarro.tez, because that’s me!”. It’s certainly nicer than trying to say “send tez to me at tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7, because that’s me!”\nIf you’d like to do this, visit tezos.domains and follow the instructions there: it costs 1 tez per year to set one up.\n8: Convert tez to dollars\nAt some point, hopefully very soon, you’ll sell some artwork and you’ll want to get paid. To do that, you’ll probably need to sign up with one of the currency exchanges. Although you likely have no desire to be a currency trader, it’s a necessity if you want to get paid in real money. Yes, cryptocurrencies sound cool, but coolness does not pay the rent. My landlord expects to be paid in Australian dollars, and – by extension – so do I. That means exchanging your tez for regular money. The HEN wiki lists a couple of options along with the standard warning that you should definitely do your own research, because this is a thing that will depend a bit on where you live. I looked into one of their suggested options (Kraken) and it seemed fairly standard, but in the end used an Australian provider, CoinSpot. The sign up process was fairly standard, requiring identification documents for verification. Once that was completed, I was able to send money to my bank account. It ended up being a three-step process:\nSend tezos from the Temple wallet associated with my public identity (i.e., the one I’ve been using on HEN etc), to a tezos wallet that is provided for me through my CoinSpot account\nOn CoinSpot, sell the tezos in exchange for Australian dollars\nWithdraw money from my CoinSpot account and deposit it in my Australian bank account\nOnce I figured it all out it was surprisingly smooth. I imagine the process varies a lot from country to country and from exchange to exchange, but hopefully the description of my process is at least somewhat helpful.\nEpilogue: Is all it worth it?\nI haven’t been doing this for very long, but I’m a little surprised to find that I’m enjoying the process of minting art on HEN. I’ve sold three pieces to people who know me, and it is a nice feeling. I’m not making mountains of money, and I don’t expect that I will any time soon, but it is still quite satisfying. The fact that I’m doing it on HEN makes a big difference to how I feel about it too: the environmental costs worry me a lot and don’t think I could make myself use a site that relied on Ethereum. And to be honest, it really is nice to get paid for my art. Praise is nice, sure, but you can’t live off that.\nI suppose the other thing I’m noticing already is that I feel a little less constrained on HEN. When I post art to twitter or instagram, it’s always with the knowledge that the big social media websites are also places where my professional networks exist, and I’m obliged to behave, to be nice, to be the “good girl”. I might swear and be grumpy on twitter sometimes, but for the most part I try not to let other parts of my personality and my life show on those sites. That’s okay, and it’s probably how it should be. Twitter is a place where it’s okay to mix some parts of your personal life with some parts of your work life, but there’s a tacit understanding that you probably ought to keep some things carefully sequestered from the bird site. There are a lot of things about a person’s life that their employer and professional colleagues may not want to know.\nWhere that runs into some difficulty, for me at least, is that a lot of my generative art is deeply entwined with my personal life, with my moods, and my experiences. When done well, art is always intimate, and the intimacy of creating and sharing the art often entails personal disclosures that might not be welcome on twitter. Consider these pieces, for example:\n\n\n\n\n\n\n\n\nOBJKT 341833\n\n\n\n\n\n\n\n\nOBJKT 341852\n\n\n\n\n\n\n\n\nOBJKT 341868\n\n\n\n\n\n\n\n\nOBJKT 341880\n\n\n\n\n\n\nI am very fond of these pieces, but they aren’t the easiest ones to share on twitter. The title of the series is Bruises are how sadists kiss, and the pieces are tagged with “sadomasochism” on my HEN profile. The title isn’t deliberately intended to be provocative or anything of the sort. That’s not really my preferred style. It’s much more prosaic: those things are part of my world and part of my life, and sometimes they show up in my art. The emotional experience expressed through the art (via the code) was one in which a very polite sadist had turned up in my life after a long absence. I was reminiscing, trying to work out what he meant to me, and I wrote the code while I was thinking about it. This was the system that emerged.\nOn twitter I would not dream of referring to those parts of my world so overtly (nor would I typically do so on this blog, focused as it is on technical topics). On HEN though, it feels a little more natural: art is often raw, it is often personal, and those subjects do come up if you spend a little time exploring the cryptoart space. It feels like a place where that version of me is permitted to have an online existence. As it turns out, that’s a thing that has some value to me.\n\n\nLast updated\n2021-10-17 13:58:48 AEDT\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-09-26_setting-up-on-hic-et-nunc/preview-image.jpg",
    "last_modified": "2022-01-10T11:27:13+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-09-14_tidy-tuesday-billboard/",
    "title": "Visualising the hits of Queen Britney",
    "description": "A gentle walkthrough of a few data wrangling and visualisation tools using the Billboard 100 data for this weeks Tidy Tuesday. Pitched at beginners looking to refresh their knowledge and maybe get some pointers at intermediate level tools",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-09-14",
    "categories": [],
    "contents": "\n\nContents\nFinding the data on GitHub\nGitHub repositories\nRepositories have branches\nRepositories are usually organised\nThe anatomy of the data link\n\nAttaching packages\nImporting the data\nFinding Britney\nPattern matching for text data\nCreating the Britney data\nFixing the dates\n\nVisualising a queen\n\n\n\n\nI’ve never participated in Tidy Tuesday before, but because I’ve now joined a slack that does, it is high time I did something about that poor track record. I wasn’t sure what I wanted to do with this week’s “Billboard” data, other than I wanted it to have something to do with Britney Spears (because she’s awesome). After going back and forward for a while, I decided what I’d do is put together a couple of plots showing the chart performance of all her songs and – more importantly – write it up as a blog post in which I try to “over-explain” all my choices. There are a lot of people in our slack who haven’t used R very much, and I want to “unpack” some of the bits and pieces that are involved. This post is pitched at beginners who are hoping for a little bit of extra scaffolding to explain some of the processes…\n\nThere’s an R script containing the source code for this analysis here, and an R markdown version that mirrors this post almost exactly here\nFinding the data on GitHub\nEvery week the Tidy Tuesday data are posted online, and the first step in participating is generally to import the data. After a little bit of hunting online, you might discover that the link to the billboard data looks like this:\nhttps://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/billboard.csv\nLet’s start by unpacking this link. There is a lot of assumed knowledge buried here, and while it is entirely possible for you to get started without understanding it all, for most of us in the slack group the goal is to learn new data science skills. At some point you are probably going to want to learn the “version control” magic. This post is not the place to learn this sorcery, but I am going to start foreshadowing some important concepts because they will be useful later.\nGitHub repositories\nThe place to start in understanding this link is the peculiar bit at the beginning: what is this “github” nonsense? The long answer is very long, but the short answer is that https://github.com is a website that programmers use to store their code. GitHub is one of several sites (e.g., https://gitlab.org, https://bitbucket.com) that are all built on top of a version control system called “git”. Git is a powerful tool that lets you collaborate with other people when writing code, allows you to keep track of the history of your code, and to backup your code online in case your laptop mysteriously catches on fire.\n\nIn the R community, “laptop fires” are universally understood to be a reference to what happens to you when you foolishly ignore the wise advice of Jenny Bryan\nGit is a complicated tool and it takes quite some time to get the hang of (I’m still learning, quite frankly), but it is worth your effort. When you have time, I recommend starting a free GitHub account. You can sign up using an email address, and if you have a university email address you get the educational discount (basically you get the “pro” version for free). My username on GitHub is djnavarro, and you can find my profile page here:\nhttps://github.com/djnavarro\nThe Tidy Tuesday project originated in the “R for data science” learning community, and there is a profile page for that community too:\nhttps://github.com/rfordatascience\nR for data science is a wonderful book by Hadley Wickham and Garrett Grolemund\nOkay, so that’s part of the link explained. The next thing to understand is that when you create projects using git and post them to GitHub, they are organised in a “repository” (“repo” for short). Each repo has its own page. The Tidy Tuesday repo is here:\nhttps://github.com/rfordatascience/tidytuesday\nIf you click on this link, you’ll find that there’s a nice description of the whole project, links to data sets, and a whole lot of other things besides.\nMost of the work organising this is done by Thomas Mock, and it’s very very cool.\nRepositories have branches\nWhenever someone creates a git repository, it will automatically have at least one “branch” (usually called “master” or “main”). The idea behind it is really sensible: suppose you’re working on a project and you think “ooooh, I have a cool idea I want to try but maybe it won’t work”. What you can do is create a new “branch” and try out all your new ideas in the new branch all without ever affecting the master branch. It’s a safe way to explore: if your new idea works you can “merge” the changes into the master branch, but if it fails you can switch back to the master branch and pick up where you left off. No harm done. If you have lots of branches, you effectively have a “tree”, and it’s a suuuuuuper handy feature. Later on as you develop your data science skills you’ll learn how to do this yourself, but for now this is enough information. The key thing is that what you’re looking at when you visit the Tidy Tuesday page on GitHub is actually the master branch on the tree:\nhttps://github.com/rfordatascience/tidytuesday/tree/master\nRepositories are usually organised\nThe Tidy Tuesday repository has a lot of different content, and it’s all nicely organised into folders (no different to the folders you’d have on your own computer). One of the folders is called “data”, and inside the “data” folder there is a “2021” folder:\nhttps://github.com/rfordatascience/tidytuesday/tree/master/data/2021\nInside that folder you find lots more folders, one for every week this year. If you scroll down to the current week and click on the link, it will take you here:\nhttps://github.com/rfordatascience/tidytuesday/tree/master/data/2021/2021-09-14\nBeing the kind soul that he is, Thomas has included a “readme” file in this folder: it’s a plain markdown file that gets displayed in a nice human readable format on the github page. Whenever you’re doing a Tidy Tuesday analysis, it’s super helpful to look at the readme file, because it will provide you a lot of the context you need to understand the data. Whenever doing your own projects, I’d strongly recommend creating readme files yourself: they’re reeeeaaaaaally helpful to anyone using your work, even if that’s just you several months later after you’ve forgotten what you were doing. Over and over again when I pick up an old project I curse the me-from-six-months ago when she was lazy and didn’t write one, or feel deeply grateful to her for taking the time to write one.\n\nReadme files are your best friend. Seriously\nIn any case, one of the things you’ll see on that page is a link to the “billboard.csv” data. If you click on that link it will take you here:\nhttps://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-09-14/billboard.csv\nNotice that this doesn’t take you to the data file itself: it goes to a webpage! Specifically, it takes you to the “blob” link that displays some information about the file (notice the “blob” that has sneakily inserted itself into the link above?). In this case, the page won’t show you very much information at all because the csv file is 43.7MB in size and GitHub doesn’t try to display files that big! However, what it does give you is a link that tells you where they’ve hidden the raw file! If you click on it (which I don’t recommend), it will take you to the “raw” file located at…\nhttps://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/billboard.csv\nThis is the link that you might have discovered if you’d been googling to find the Billboard data. It’s a GitHub link, but GitHub uses the “raw.githubusercontent.com” site as the mechanism for making raw files accessible, which is why that part of the link has changed.\n\nI didn’t intend for this section to be this long, honest\nThe anatomy of the data link\nAll of this tedious exposition should (I hope) help you make sense of what you’re actually looking at when you see this link. In real life I would never bother to do this, but if you wanted to you could decompose the link into its parts. In the snippet below I’ll create separate variables in R, one for each component of the link:\n\n\nsite <- \"https://raw.githubusercontent.com\"\nuser <- \"rfordatascience\"\nrepo <- \"tidytuesday\"\nbranch <- \"master\"\nfolder1 <- \"data\"\nfolder2 <- \"2021\" \nfolder3 <- \"2021-09-14\"\nfile <- \"billboard.csv\"\n\n\n\nArgh. Wait. There’s something slightly off-topic that I should point out… one thing you might be wondering when you look at this snippet, is where that pretty “arrow” character comes from. Don’t be fooled. It’s not a special arrow character, it’s two ordinary characters. What I’ve actually typed is <-, but this blog uses a fancypants font that contains a special ligature that makes <- appear to be a single smooth arrow. The font is called “Fira Code”, and a lot of programmers use it on their blogs. Once you know the trick, it’s really nice because it does make the code a little easier to read, but it can be confusing if you’re completely new to programming! It’s one of those little things that people forget to tell you about :-)\nAnyway, getting back on topic. The URL (a.k.a. “link”) for the Billboard data is what you get when you paste() all these components together, separated by the “/” character:\n\n\ndata_url <- paste(\n  site, \n  user, \n  repo, \n  branch,\n  folder1, \n  folder2, \n  folder3, \n  file, \n  sep = \"/\"\n)\n\ndata_url\n\n\n[1] \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/billboard.csv\"\n\nExciting stuff.\nAttaching packages\nI’m relatively certain that everyone in the slack has been exposed to the idea of an “R package”. A package is a collection of R functions and data sets that don’t automatically come bundled with R, but are freely available online. The tidyverse, for example, is a collection of R packages that a lot people find helpful for data analysis, and you can install all of them onto your machine (or your RStudio Cloud project) by using this command:\n\n\ninstall.packages(\"tidyverse\")\n\n\n\nThis can take quite a while to complete because there are a lot of packages that make up the tidyverse! Once the process is completed, you will now be able to use the tidyverse tools. However, it’s important to recognise that just because you’ve “installed” the packages, it doesn’t mean R will automatically use them. You have to be explicit. There are three tidyverse packages that I’m going to use a lot in this post (dplyr, stringr, and ggplot2), so I’ll use the library() function to “attach” the packages (i.e. tell R to make them available):\n\n\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(ggplot2)\n\n\n\nImporting the data\nAt this point we know where the data set is located, and we have some R tools that we can use to play around with it. The next step is reading the data into R. The readr package is part of the tidyverse, and it contains a useful function called read_csv() that can go online for you, retrive the billboard data, and load it into R. That’s cool and all but if you look at the library() commands above, I didn’t actually attach them. I didn’t want to do this because honestly I’m only going to use the readr package once, and it feels a bit silly to attach the whole package. Instead, what I’ll do is use the “double colon” notation :: to refer to the function more directly. When I write readr::read_csv() in R, what I’m doing is telling R to use the read_csv() function inside the readr package. As long as I have readr on my computer, this will work even if I haven’t attached it using library(). The technical name for this is “namespacing”, and if you hang around enough R programmers long enough that’s a word that will pop up from time to time. The way to think about it is that every package (e.g., readr) contains a collection of things, each of which has a name (e.g., “read_csv” is the name of the read_csv() function). So you can think of a “space” of these names… and hence the boring term “namespace”.\nOkay, let’s use a “namespaced” command to import the data, and assign it to a variable (i.e., give the data a name). I’ll call the data billboard:\n\n\nbillboard <- readr::read_csv(data_url)\n\n\n\nThe billboard data is a nice, rectangular data set. Every row refers to a specific song on a specific date, and tells you its position in the charts on that date. We can type print(billboard) to take a look at the first few rows and columns. In most situations (not all), you can print something out just by typing its name:\n\n\nbillboard\n\n\n# A tibble: 327,895 × 10\n   url      week_id  week_position song   performer song_id   instance\n   <chr>    <chr>            <dbl> <chr>  <chr>     <chr>        <dbl>\n 1 http://… 7/17/19…            34 Don't… Patty Du… Don't Ju…        1\n 2 http://… 7/24/19…            22 Don't… Patty Du… Don't Ju…        1\n 3 http://… 7/31/19…            14 Don't… Patty Du… Don't Ju…        1\n 4 http://… 8/7/1965            10 Don't… Patty Du… Don't Ju…        1\n 5 http://… 8/14/19…             8 Don't… Patty Du… Don't Ju…        1\n 6 http://… 8/21/19…             8 Don't… Patty Du… Don't Ju…        1\n 7 http://… 8/28/19…            14 Don't… Patty Du… Don't Ju…        1\n 8 http://… 9/4/1965            36 Don't… Patty Du… Don't Ju…        1\n 9 http://… 4/19/19…            97 Don't… Teddy Pe… Don't Ke…        1\n10 http://… 4/26/19…            90 Don't… Teddy Pe… Don't Ke…        1\n# … with 327,885 more rows, and 3 more variables:\n#   previous_week_position <dbl>, peak_position <dbl>,\n#   weeks_on_chart <dbl>\n\n\nFinally, some data!\nThis view helps you see the data in its “native” orientation: each column is a variable, each row is an observation. It’s a bit frustrating though because a lot of the columns get chopped off in the printout. It’s often more useful to use dplyr::glimpse() to take a peek. When “glimpsing” the data, R rotates the data on its side and shows you a list of all the variables, along with the first few entries for that variable:\n\n\nglimpse(billboard)\n\n\nRows: 327,895\nColumns: 10\n$ url                    <chr> \"http://www.billboard.com/charts/hot-…\n$ week_id                <chr> \"7/17/1965\", \"7/24/1965\", \"7/31/1965\"…\n$ week_position          <dbl> 34, 22, 14, 10, 8, 8, 14, 36, 97, 90,…\n$ song                   <chr> \"Don't Just Stand There\", \"Don't Just…\n$ performer              <chr> \"Patty Duke\", \"Patty Duke\", \"Patty Du…\n$ song_id                <chr> \"Don't Just Stand TherePatty Duke\", \"…\n$ instance               <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ previous_week_position <dbl> 45, 34, 22, 14, 10, 8, 8, 14, NA, 97,…\n$ peak_position          <dbl> 34, 22, 14, 10, 8, 8, 8, 8, 97, 90, 9…\n$ weeks_on_chart         <dbl> 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4,…\n\nNotice that this time I just typed glimpse rather than dplyr::glimpse. I didn’t need to tell R to look in the dplyr namespace because I’d already attached it when I typed library(dplyr) earlier.\nFinding Britney\nTime to start analysing the data. I have made a decision that today I have love in my heart only for Britney. So what I want to do is find the rows in billboard that correspond to Britney Spears songs. The natural way to do this would be to pull out the “performer” column and then try to find entries that refer to Britney. The slightly tricky aspect to this is that Britney doesn’t appear solely as “Britney Spears”. For example, “Me Against The Music” features Madonna, and the entry in the performer column is “Britney Spears Featuring Madonna”. So we’re going to have to search in a slightly smarter way. Before turning this into R code, I can sketch out my plan like this:\nget the billboard data, THEN\n  pull out the performer column, THEN\n  search for britney, THEN\n  tidy up a bit\nThis kind of workflow is naturally suited to the “pipe”, which is written %>%. You’ll see referred to either as the “magrittr pipe” (referring to the magrittr package where it originally came from) or the “dplyr pipe” (because dplyr made it famous!). I’m sure you’ve seen it before, but since one goal of this post is to be a refresher, I’ll explain it again. The pipe does the same job as the word “THEN” in the pseudo-code I wrote above. Its job is to take the output of one function (whatever is on the left) and then pass it on as the input to the next one (on the right). So here’s that plan re-written in an “R-like” format:\nthe_billboard_data %>% \n  pull_out_the_performer_column() %>% \n  search_for_britney() %>% \n  tidy_it_up()\nIn fact that’s pretty close to what the actual R code is going to look like! The dplyr package has a function dplyr::pull() that will extract a column from the data set (e.g., all 327,895 listings in the performer column), and base R has a function called unique() that will ignore repeat entries, showing you only the unique elements of a column. So our code is going to look almost exactly like this\nbillboard %>% \n  pull(performer) %>% \n  search_for_britney() %>% \n  unique()\nPattern matching for text data\nInexcusably, however, R does not come with a search_for_britney() function, so we’re going to have to do it manually. This is where the stringr package is very helpful. It contains a lot of functions that are very helpful in searching for text and manipulating text. The actual function I’m going to use here is stringr::str_subset() which will return the subset of values that “match” a particular pattern. Here’s a very simple example, where the “pattern” is just the letter “a”. I’ll quickly define a variable animals containing the names of a few different animals:\n\n\nanimals <- c(\"cat\", \"dog\", \"rat\", \"ant\", \"bug\")\n\n\n\nTo retain only those strings that contain the letter \"a\" we do this:\n\n\nstr_subset(string = animals, pattern = \"a\")\n\n\n[1] \"cat\" \"rat\" \"ant\"\n\nAlternatively we could write this using the pipe:\n\n\nanimals %>% \n  str_subset(pattern = \"a\")\n\n\n[1] \"cat\" \"rat\" \"ant\"\n\nI’m not sure this second version is any nicer than the first version, but it can be helpful to see the two versions side by side in order to remind yourself of what the pipe actually does!\nWe can use the same tool to find all the Britney songs. In real life, whenever you’re working with text data you need to be wary of the possibility of mispellings and other errors in the raw data. Wild caught data are often very messy, but thankfully for us the Tidy Tuesday data sets tend to be a little kinder. With that in mind can safely assume that any song by Britney Spears will include the pattern “Britney” in it somewhere.\nSo let’s do just try this and see what we get:\n\n\nbillboard %>% \n  pull(performer) %>% \n  str_subset(\"Britney\") %>% \n  unique()\n\n\n[1] \"Britney Spears\"                              \n[2] \"Rihanna Featuring Britney Spears\"            \n[3] \"will.i.am & Britney Spears\"                  \n[4] \"Britney Spears & Iggy Azalea\"                \n[5] \"Britney Spears Featuring G-Eazy\"             \n[6] \"Britney Spears Featuring Madonna\"            \n[7] \"Britney Spears Featuring Tinashe\"            \n[8] \"Britney Spears Featuring Nicki Minaj & Ke$ha\"\n\n\nAt this point I was sorely tempted to get distracted by Ke$ha and Rihanna, but somehow managed to stay on topic. Somehow\nOkay, so it turns out that Britney is listed in eight different ways. For the sake of this post, I’m happy to include cases where another artist features on a Britney track, but I don’t want to include the two cases where Britney is the featuring artist. Looking at the output above, it seems like I can find those cases by keeping only those rows that start with the word “Britney”.\nNow our question becomes “how do we write down a pattern like that?” and the answer usually involves crying for a bit because the solution is to use a regular expression, or “regex”.\nRegular expressions are a tool used a lot in programming: they provide a compact way to represent patterns in text. They’re very flexible, but can often be quite hard to wrap your head around because there are a lot of special characters that have particular meanings. Thankfully, for our purposes today we only need to know one of them: the ^ character is used to mean “the start of the string”. So when interpreted as a regular expression, \"^Britney\" translates to “any string that begins with ‘Britney’”. Now that we have our regular expression, this works nicely:\n\n\nbillboard %>% \n  pull(performer) %>% \n  str_subset(\"^Britney\") %>% \n  unique()\n\n\n[1] \"Britney Spears\"                              \n[2] \"Britney Spears & Iggy Azalea\"                \n[3] \"Britney Spears Featuring G-Eazy\"             \n[4] \"Britney Spears Featuring Madonna\"            \n[5] \"Britney Spears Featuring Tinashe\"            \n[6] \"Britney Spears Featuring Nicki Minaj & Ke$ha\"\n\nRegular expressions are one of those things you’ll slowly pick up as you go along, and although they can be a huuuuuuge headache to learn, the reward is worth the effort.\n\nIn my mental list of “stuff I hatelove in data science”, git and regexes are tied for first place\nCreating the Britney data\nOkay so now we’re in a position to filter the billboard data, keeping only the rows that correspond to Britney songs. Most people in our slack group have taken an introductory class before, so you’ll be expecting that dplyr::filter() is the tool we need. The kind of filtering you’ve seen before looks like this:\n\n\nbritney <- billboard %>% \n  filter(performer == \"Britney Spears\")\n\n\n\nHowever, this doesn’t work the way we want. The bit of code that reads performer == \"Britney Spears\" is a logical expression (i.e., a code snippet that only returns TRUE and FALSE values) that will only detect exact matches. It’s too literal for our purposes. We can’t use the == operator to detect our regular expression either: that will only detect cases where the performer is literally listed as “^Britney”. What we actually want is something that works like the == test, but uses a regular expression to determine if it’s a match or not.\nThat’s where the str_detect() function from the stringr package is really handy. Instead of using performer == \"Britney Spears\" to detect exact matches, we’ll use str_detect(performer, \"^Britney\") to match using the regular expression:\n\n\nbritney <- billboard %>% \n  filter(str_detect(performer, \"^Britney\"))\n\n\n\n\nA confession. I didn’t technically need to use a regex here, because stringr has a handy str_starts() function. But half the point of our slack group is to accidentally-on-purpose reveal new tools and also I forgot that str_starts() exists so… regex it is\nThis version works the way we want it to, but it’s usually a good idea in practice to check that we haven’t made any mistakes. Perhaps I have forgotten what str_detect() actually does or I’ve made an error in my use of filter(), for example. So let’s take a look at the performer column in the britney data and check that it contains the same six unique strings:\n\n\nbritney %>% \n  pull(performer) %>% \n  unique()\n\n\n[1] \"Britney Spears\"                              \n[2] \"Britney Spears & Iggy Azalea\"                \n[3] \"Britney Spears Featuring G-Eazy\"             \n[4] \"Britney Spears Featuring Madonna\"            \n[5] \"Britney Spears Featuring Tinashe\"            \n[6] \"Britney Spears Featuring Nicki Minaj & Ke$ha\"\n\nThat’s reassuring. So let’s take a quick peek at the results of our data wrangling:\n\n\nglimpse(britney)\n\n\nRows: 468\nColumns: 10\n$ url                    <chr> \"http://www.billboard.com/charts/hot-…\n$ week_id                <chr> \"4/22/2000\", \"10/24/2009\", \"12/20/200…\n$ week_position          <dbl> 67, 1, 3, 70, 70, 21, 17, 29, 76, 1, …\n$ song                   <chr> \"Oops!...I Did It Again\", \"3\", \"Circu…\n$ performer              <chr> \"Britney Spears\", \"Britney Spears\", \"…\n$ song_id                <chr> \"Oops!...I Did It AgainBritney Spears…\n$ instance               <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ previous_week_position <dbl> NA, NA, NA, NA, NA, 45, NA, NA, NA, N…\n$ peak_position          <dbl> 67, 1, 3, 70, 70, 21, 17, 29, 76, 1, …\n$ weeks_on_chart         <dbl> 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1…\n\nThat looks good to me…\nFixing the dates\n…or does it? Looking at the week_id column is enough to make any data analyst sigh in mild irritation. This column encodes the date, but the first two entries are \"4/22/2000\" and \"10/24/2009\". They are encoded in a “month/day/year” format. Nobody on this planet except Americans writes dates this way. Most countries use “day/month/year” as their standard way of writing dates, and most programming style guides strongly recommend “year/month/day” (there are good reasons for this, mostly to do with sorting chronologically). Worse yet, it’s just a character string. R doesn’t know that this column corresponds to a date, and unlike Excel it is smart enough not to try. Trying to guess what is and is not a date is notoriously difficult, so R makes that your job as the data analyst. Thankfully, the lubridate package exists to make it a little bit easier. In this case, where we have data in month/day/year format, the lubridate::mdy() function will do the conversion for us. You’ll be completely unsurprised to learn that there are lubridate::dmy() and lubridate::ymd() functions that handle other kinds of date formats.\nSo let’s do this. I’ll use the dplyr::mutate() function to modify the britney data, like so:\n\n\nbritney <- britney %>% \n  mutate(week_id = lubridate::mdy(week_id))\n\nglimpse(britney)\n\n\nRows: 468\nColumns: 10\n$ url                    <chr> \"http://www.billboard.com/charts/hot-…\n$ week_id                <date> 2000-04-22, 2009-10-24, 2008-12-20, …\n$ week_position          <dbl> 67, 1, 3, 70, 70, 21, 17, 29, 76, 1, …\n$ song                   <chr> \"Oops!...I Did It Again\", \"3\", \"Circu…\n$ performer              <chr> \"Britney Spears\", \"Britney Spears\", \"…\n$ song_id                <chr> \"Oops!...I Did It AgainBritney Spears…\n$ instance               <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ previous_week_position <dbl> NA, NA, NA, NA, NA, 45, NA, NA, NA, N…\n$ peak_position          <dbl> 67, 1, 3, 70, 70, 21, 17, 29, 76, 1, …\n$ weeks_on_chart         <dbl> 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1…\n\nMuch better!\nVisualising a queen\nI’m now at the point that I have a britney data set I can visualise. However, being the queen she is, Britney has quite a few songs that appear in the Billboard Top 100, so the first thing I’ll do is specify a few favourites that we’ll highlight in the plots:\n\n\nhighlights <- c(\"Work B**ch!\", \"...Baby One More Time\", \"Toxic\")\n\n\n\nMost people in our slack will probably have encountered the ggplot2 package before, and at least have some experience in creating data visualisations using it. So we might write some code like this, which draws a plot showing the date on the horizontal axis (the mapping x = week_id) and the position of the song on the vertical axis (represented by the mapping y = week_position). We’ll also map the colour to the song by setting colour = song. Then we’ll add some points and lines:\n\n\nggplot(\n  data = britney,\n  mapping = aes(\n    x = week_id,\n    y = week_position,\n    colour = song\n  )\n) + \n  geom_line(show.legend = FALSE) + \n  geom_point(show.legend = FALSE)\n\n\n\n\nThe reason I’ve included show.legend = FALSE here is that there are quite a few different songs in the data, and if they were all added to a legend it wouldn’t leave any room for the data!\nWe can improve on this in a couple of ways. First up, let’s use scale_y_reverse() to flip the y-axis. That way, a top ranked song appears at the top, and a 100th ranked song appears at the bottom:\n\n\nbritney %>% \n  ggplot(aes(\n    x = week_id, \n    y = week_position, \n    colour = song\n  )) + \n  geom_line(show.legend = FALSE) + \n  geom_point(show.legend = FALSE) + \n  scale_y_reverse()\n\n\n\n\nNotice that I’ve switched to using the pipe here. I take the britney data, pipe it with %>% to the ggplot() function where I set up the mapping, and then add things to the plot with +. It’s a matter of personal style though. Other people write their code differently!\nOkay, it’s time to do something about the lack of labels. My real interest here is in the three songs I listed in the highlights so I’m going to use the gghighlight package, like this:\n\n\nbritney %>% \n  ggplot(aes(\n    x = week_id, \n    y = week_position, \n    colour = song\n  )) + \n  geom_line() + \n  geom_point() + \n  scale_y_reverse() + \n  gghighlight::gghighlight(song %in% highlights)\n\n\n\n\nWhen the data are plotted like this, you get a strong sense of the chronology of Britney’s career, but the downside is that you can’t easily see how the chart performance of “…Baby One More Time” compares to the performance of “Toxic” and \"Work B**ch!\". To give a better sense of that, it’s better to plot weeks_on_chart on the horizontal axis:\n\n\nbritney %>% \n  ggplot(aes(\n    x = weeks_on_chart, \n    y = week_position, \n    group = song,\n    colour = song\n  )) + \n  geom_line() + \n  geom_point() + \n  scale_y_reverse() + \n  gghighlight::gghighlight(song %in% highlights)\n\n\n\n\nShown this way, you get a really strong sense of just how much of an impact “…Baby One More Time” had. It wasn’t just Britney’s first hit, it was also her biggest. It’s quite an outlier on the chart!\nIf we’re doing exploratory data analysis, and the only goal is to have a picture to show a colleague, that’s good enough. However, if we wanted to share it more widely, you’d probably want to spend a little more time fiddling with the details, adding text, colour and other things that actually matter a lot in real life!\n\n\nbritney %>% \n  ggplot(aes(\n    x = weeks_on_chart, \n    y = week_position, \n    group = song,\n    colour = song\n  )) + \n  geom_line(size = 1.5) + \n  scale_y_reverse() + \n  scale_color_brewer(palette = \"Dark2\") + \n  gghighlight::gghighlight(song %in% highlights, \n    unhighlighted_params = list(size = .5)) + \n  theme_minimal() +\n  labs(\n    title = \"Britney Spears' first hit was also her biggest\",\n    subtitle = \"Chart performance of Britney Spears' songs\",\n    x = \"Weeks in Billboard Top 100\",\n    y = \"Chart Position\"\n  )\n\n\n\n\nIf I were less lazy I would also make sure that the chart includes a reference to the original data source, and something that credits myself as the creator of the plot. That’s generally good etiquette if you’re planning on sharing the image on the interwebs. There’s quite a lot you could do to tinker with the plot to get it to publication quality, but this is good enough for my goals today!\n\n\n\nFigure 1: Her Royal Highness Britney Spears, performing in Las Vegas, January 2014. Figure from wikimedia commons, released under a CC-BY-2.0 licence by Rhys Adams\n\n\n\n\n\nLast updated\n2021-09-17 16:58:36 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-09-14_tidy-tuesday-billboard/britney.jpg",
    "last_modified": "2022-01-10T11:27:13+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-09-07_water-colours/",
    "title": "Art, jasmines, and the water colours",
    "description": "An essay and tutorial covering a few useful art techniques in R",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-09-07",
    "categories": [],
    "contents": "\n\nContents\nPrelude\nThe water colours repository\nWhy use version control here?\nThe manifest file\nPreviewing the artwork\n\nDependencies\nArt from image processing\nFinding the image file\nImporting the image\nConverting the image to data\nArt from data visualisation\nExtracting the colour channels\nArt from channel manipulation\n\nIntermission\nArt from noise generators\nMultidimensional noise generation\nArt from the noise\nAccumulating art with purrr\n\nAssembling the parts\nAdding noise to jasmines coordinates\nJoining the noise with jasmine colours\nThe last chapter\n\nEpilogue\n\n\n\nPrelude\nIn recent weeks I’ve been posting generative art from the Water Colours series on twitter. The series has been popular, prompting requests that I sell prints, mint NFTs, or write a tutorial showing how they are made. For personal reasons I didn’t want to commercialise this series. Instead, I chose to make the pieces freely available under a CC0 public domain licence and asked people to donate to a gofundme I set up for a charitable organisation I care about (the Lou’s Place women’s refuge here in Sydney). I’m not going to discuss the personal story behind this series, but it does matter. As I’ve mentioned previously, the art I make is inherently tied to moods. It is emotional in nature. In hindsight it is easy enough to describe how the system is implemented but this perspective is misleading. Although a clean and unemotional description of the code is useful for explanatory purposes, the actual process of creating the system is deeply tied to my life, my history, and my subjective experience. Those details are inextricably bound to the system. A friend described it better than I ever could:\n\nThe computer doesn’t make this art any more than a camera makes a photograph; art is always intimate (Amy Patterson)\n\nIn this post I’ll describe the mechanistic processes involved in creating these pieces, but this is woefully inadequate as a description of the artistic process as a whole. The optical mechanics of a camera do not circumscribe the work of a skilled photographer. So it goes with generative art. The code describes the mechanics; it does not describe the art. There is a deeply personal story underneath these pieces (one that I won’t tell here), and I would no more mint an NFT from that story than I would sell a piece of my soul to a collector.\nThe water colours repository\nWhy use version control here?\nWhen I started making generative art I didn’t think much about archiving my art or keeping it organised. I liked making pretty things, and that was as far as my thought process went. I didn’t place the code under version control, and I stored everything in my Dropbox folder. There’s nothing wrong with that: some things don’t belong on GitHub. During the development phase of any art project that’s still what I do, and I’m perfectly happy with it.\nThings become a little trickier when you want to share the art. My art website is hosted on GitHub pages, and so my initial approach was to keep the art in the website repository. Huuuuge mistake. Sometimes the image files can be quite large and sometimes a series contains a large number of images. By the time I’d reached 40+ series, Hugo took a very long time to build the site (several minutes), and GitHub took even longer to deploy it (over half an hour).\nEventually I decided it made more sense to have one repository per series. Each one uses the “series-” prefix to remind me it’s an art repo. I don’t use these repositories during development: they exist solely to snapshot the release. For example, the series-water-colours repository isn’t going to be updated regularly, it’s really just an archive combined with a “docs” folder that is used to host a minimal GitHub Pages site that makes the images public. It’s convenient for my purposes because my art website doesn’t have to host any of the images: all it does is hotlink to the images that are exposed via the series repo.\nIt may seem surprising that I’ve used GitHub for this. Image files aren’t exactly well suited to version control, but it’s not like they’re going to be updated. Plus, there are a lot of advantages. I can explicitly include licencing information in the repository, I can release source code (when I want to), and I can include a readme file for anyone who wants to use it.\nThe manifest file\nOne nice feature of doing things this way is that it has encouraged me to include a manifest file. Because the image files belong to a completely different repository to the website, I need a way to automatically inspect the image repository and construct the links I need (because I’m waaaaaay too lazy to add the links by hand). That’s the primary function of the manifest. The manifest.csv file is a plain csv file with one row per image, and one column for each piece of metadata I want to retain about the images. It might seem like organisational overkill to be this precise about the art, but I’m starting to realise that if I don’t have a proper system in place I’ll forget minor details like “what the piece is called” or “when I made it”. That seems bad :-)\n\n\n\nI can use readr::read_csv() to download the manifest and do a little data wrangling to organise it into a format that is handy to me right now:\n\nThe data wrangling code is here\n\n\nmanifest\n\n\n# A tibble: 20 × 9\n   series      sys_id img_id short_name  format long_name   date      \n   <chr>       <chr>  <chr>  <chr>       <chr>  <chr>       <date>    \n 1 watercolour sys02  img34  teacup-oce… jpg    Ocean in a… 2021-07-31\n 2 watercolour sys02  img31  incursions  jpg    Incursions  2021-08-14\n 3 watercolour sys02  img32  percolate   jpg    Percolate   2021-08-21\n 4 watercolour sys02  img37  gentle-des… jpg    Gentle Des… 2021-08-21\n 5 watercolour sys02  img41  stormy-seas jpg    Stormy Seas 2021-08-22\n 6 watercolour sys02  img42  turmeric    jpg    Turmeric A… 2021-08-24\n 7 watercolour sys02  img43  torn-and-f… jpg    Torn and F… 2021-08-24\n 8 watercolour sys02  img47  inferno     jpg    Seventh Ci… 2021-08-27\n 9 watercolour sys02  img48  storm-cell  jpg    Storm Cell… 2021-08-27\n10 watercolour sys02  img49  tonal-earth jpg    Tonal Earth 2021-08-29\n11 watercolour sys02  img50  cold-front  jpg    Cold Front  2021-08-29\n12 watercolour sys02  img51  kintsugi-d… jpg    Kintsugi D… 2021-08-29\n13 watercolour sys02  img53  departure   jpg    Departure   2021-08-29\n14 watercolour sys02  img54  echo        jpg    Echo        2021-08-30\n15 watercolour sys02  img57  portal      jpg    Portal      2021-08-31\n16 watercolour sys02  img60  salt-stone… jpg    Gods of Sa… 2021-08-31\n17 watercolour sys02  img61  amanecer-d… jpg    El Último … 2021-09-01\n18 watercolour sys02  img65  plume       jpg    Plume       2021-09-02\n19 watercolour sys02  img67  woodland-s… jpg    Woodland S… 2021-09-02\n20 watercolour sys02  img68  below-the-… jpg    Below the … 2021-09-03\n# … with 2 more variables: path_2000 <chr>, path_500 <chr>\n\nPreviewing the artwork\nMore to the point, the manifest data frame is nicely suited for use with the bs4cards package, so I can display some of the pieces in a neat and tidy thumbnail grid. Here are the first eight pieces from the series, arranged by date of creation:\n\n\nmanifest[1:8, ] %>% \n  bs4cards::cards(\n    image = path_500,\n    link = path_2000,\n    title = long_name,\n    spacing = 3,\n    width = 2\n  )  \n\n\n\n\n\n\n\n\n\nOcean in a Teacup\n\n\n\n\n\n\n\n\nIncursions\n\n\n\n\n\n\n\n\nPercolate\n\n\n\n\n\n\n\n\nGentle Descent\n\n\n\n\n\n\n\n\nStormy Seas\n\n\n\n\n\n\n\n\nTurmeric Against Grey Tuesday\n\n\n\n\n\n\n\n\nTorn and Frayed\n\n\n\n\n\n\n\n\nSeventh Circle\n\n\n\n\n\n\nEach thumbnail image links to a medium resolution (2000 x 2000 pixels) jpg version of the corresponding piece, if you’d like to see the images in a little more detail.\nDependencies\nIn the remainder of this post I’ll walk you through the process of creating pieces “in the style of” the water colours series. If you really want to, you can take a look at the actual source, but it may not be very helpful: the code is little opaque, poorly structured, and delegates a lot of the work to the halftoner and jasmines packages, neither of which is on CRAN. To make it a little easier on you, I’ll build a new system in this post that adopts the same core ideas.\nIn this post I’ll assume you’re already familiar with data wrangling and visualisation with tidyverse tools. This is the subset of tidyverse packages that I have attached, and the code that follows relies on all these in some fashion:\n\n\nlibrary(magrittr)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(tibble)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(dplyr)\n\n\n\n\nThe R environment is specified formally in the lockfile. It’s a story for another day, but for reproducibility purposes I have a separate renv configuration for every post\nIn addition to tidyverse and base R functions, I’ll use a few other packages as well. The magick, raster, rprojroot, fs, and ambient packages are all used in making the art. Because functions from those packages may not be as familiar to everyone, I’ll namespace the calls to them in the same way I did with bs4cards::cards() previously. Hopefully that will make it easier to see which functions belong to one of those packages.\nArt from image processing\nFinding the image file\nAs in life, the place to start is knowing where you are.\nThis post is part of my blog, and I’ll need to make use of an image file called \"jasmine.jpg\" stored alongside my R markdown. First, I can use rprojroot to find out where my blog is stored. I’ll do that by searching for a \"_site.yml\" file:\n\n\nblog <- rprojroot::find_root(\"_site.yml\")\nblog\n\n\n[1] \"/home/danielle/GitHub/sites/distill-blog\"\n\nI suspect that most people reading this would be more familiar with the here package that provides a simplified interface to rprojroot and will automatically detect the .Rproj or .here file associated with your project. In fact, because the here::here() function is so convenient, it’s usually my preferred method for solving this problem. Sometimes, however, the additional flexibility provided by rprojroot is very useful. Some of my projects are comprised of partially independent sub-projects, each with a distinct root directory. That happens sometimes when blogging: there are contexts in which you might want to consider “the blog” to be the project, but other contexts in which “the post” might be the project. If you’re not careful this can lead to chaos (e.g., RStudio projects nested inside other RStudio projects), and I’ve found rprojroot very helpful in avoiding ambiguity in these situations.\nHaving chosen “the blog” as the root folder, the next step in orientation is to find the post folder. Because this is a distill blog, all my posts are stored in the _posts folder, and I’ve adopted a consistent naming convention for organising the post folders. Every name begins with the post date in year-month-day format, followed by a human-readable “slug”:\n\n\npost <- paste(params$date, params$slug, sep = \"_\")\npost\n\n\n[1] \"2021-09-07_water-colours\"\n\nThis allows me to construct the path to the image file and display it here:\n\n\nfile <- fs::path(blog, \"_posts\", post, \"jasmine.jpg\")\nknitr::include_graphics(file)\n\n\n\n\n\nThe photo has an emotional resonance to me: it dates back to 2011 and appeared on the cover of Learning Statistics with R. Although 10 years separate the Water Colours series from the text and the photo, the two are linked by a shared connection to events from a decade ago\nImporting the image\nOur next step is to import the image into R at a suitable resolution. The original image size is 1000x600 pixels, which is a little more than we need. Here’s a simple import_image() function that does this:\n\n\nimport_image <- function(path, width, height) {\n  geometry <- paste0(width, \"x\", height) # e.g., \"100x60\"\n  path %>% \n    magick::image_read() %>% \n    magick::image_scale(geometry)\n}\n\n\n\nInternally, the work is being done by the fabulous magick package that provides bindings to the ImageMagick library. In truth, it’s the ImageMagick library that is doing most the work here. R doesn’t load the complete image, it lets ImageMagick take care of that. Generally that’s a good thing for performance reasons (you don’t want to load large images into memory if you can avoid it), but in this case we’re going to work with the raw image data inside R.\nThis brings us to the next task…\nConverting the image to data\nConverting the image into a data structure we can use is a two step process. First, we create a matrix that represents the image in a format similar to the image itself. That’s the job of the construct_matrix() function below. It takes the image as input, and first coerces it to a raster object and then to a regular matrix: in the code below, the matrix is named mat, and the pixel on the i-th row and j-th column of the image is represented by the contents of mat[i, j].\n\n\nconstruct_matrix <- function(image) {\n  \n  # read matrix\n  mat <- image %>% \n    as.raster() %>%\n    as.matrix()\n  \n  # use the row and column names to represent co-ordinates\n  rownames(mat) <- paste0(\"y\", nrow(mat):1) # <- flip y\n  colnames(mat) <- paste0(\"x\", 1:ncol(mat))\n  \n  return(mat)\n}\n\n\n\nA little care is needed when interpreting the rows of this matrix. When we think about graphs, the values on y-axis increase as we move our eyes upwards from the bottom, so our mental model has the small numbers at the bottom and the big numbers at the top. But that’s not the only mental model in play here. When we read a matrix or a table we don’t look at it, we read it - and we read from top to bottom. A numbered list, for example, has the smallest numbers at the top, and the numbers get bigger as we read down the list. Both of those mental models are sensible, but it’s hard to switch between them.\nThe tricky part here is that the raw image is encoded in “reading format”. It’s supposed to be read like a table or a list, so the indices increase as we read down the image. The image data returned by construct_matrix() is organised this format. However, when we draw pictures with ggplot2 later on, we’re going to need to switch to a “graph format” convention with the small numbers at the bottom. That’s the reason why the code above flips the order of the row names. Our next task will be to convert this (reading-formatted) matrix into a tidy tibble, and those row and column names will become become our (graph-formatted) x- and y-coordinates, so the row names need to be labelled in reverse order.\nTo transform the image matrix into a tidy tibble, I’ve written a handy construct_tibble() function:\n\n\nconstruct_tibble <- function(mat) {\n  \n  # convert to tibble\n  tbl <- mat %>%\n    as.data.frame() %>%\n    rownames_to_column(\"y\") %>%\n    as_tibble() \n  \n  # reshape\n  tbl <- tbl %>%\n    pivot_longer(\n      cols = starts_with(\"x\"),\n      names_to = \"x\",\n      values_to = \"shade\"\n    ) \n  \n  # tidy\n  tbl <- tbl %>%\n    arrange(x, y) %>% \n    mutate(\n      x = x %>% str_remove_all(\"x\") %>% as.numeric(),\n      y = y %>% str_remove_all(\"y\") %>% as.numeric(),\n      id = row_number()\n    )\n  \n  return(tbl)\n}\n\n\n\nThe code has the following strucure:\nThe first part of this code coerces the matrix to a plain data frame, then uses rownames_to_columns() to extract the row names before coercing it to a tibble. This step is necessary because tibbles don’t have row names, and we need those row names: our end goal is to have a variable y to store those co-ordinate values.\nThe second part of the code uses pivot_longer() to capture all the other variables (currently named x1, x2, etc) and pull them down into a single column that specifies the x co-ordinate. At this stage, the tbl tibble contains three variables: an x value, a y value, and a shade that contains the hex code for a colour.\nThe last step is to tidy up the values. After pivot_longer() does its job, the x variable contains strings like \"x1\", \"x2\", etc, but we’d prefer them to be actual numbers like 1, 2, etc. The same is true for the y variable. To fix this, the last part of the code does a tiny bit of string manipulation using str_remove_all() to get rid of the unwanted prefixes, and then coerces the result to a number.\n\nThe names_prefix argument to pivot_longer() can transform x without the third step, but I prefer the verbose form. I find it easier to read and it treats x and y the same\nTaken together, the import_image(), construct_matrix(), and construct_tibble() functions provide us with everything we need to pull the data from the image file and wrangle it into a format that ggplot2 is expecting:\n\n\njas <- file %>% \n  import_image(width = 100, height = 60) %>% \n  construct_matrix() %>% \n  construct_tibble()\n\njas\n\n\n# A tibble: 6,000 × 4\n       y     x shade        id\n   <dbl> <dbl> <chr>     <int>\n 1     1     1 #838c70ff     1\n 2    10     1 #3c3123ff     2\n 3    11     1 #503d3dff     3\n 4    12     1 #363126ff     4\n 5    13     1 #443a30ff     5\n 6    14     1 #8a6860ff     6\n 7    15     1 #665859ff     7\n 8    16     1 #5a5d51ff     8\n 9    17     1 #535c4cff     9\n10    18     1 #944b61ff    10\n# … with 5,990 more rows\n\nA little unusually, the hex codes here are specified in RGBA format: the first two alphanumeric characters specify the hexadecimal code for the red level, the second two represent the green level (or “channel”), the third two are the blue channel, and the last two are the opacity level (the alpha channel). I’m going to ignore the alpha channel for this exercise though.\nThere’s one last thing to point out before turning to the fun art part. Notice that jas also contains an id column (added by the third part of the construct_tibble() function). It’s generally good practice to have an id column that uniquely identifies each row, and will turn out to be useful later when we need to join this data set with other data sets that we’ll generate.\nArt from data visualisation\nLet the art begin!\nThe first step is to define a helper function ggplot_themed() that provides a template that we’ll reuse in every plot. Mostly this involves preventing ggplot2 from doing things it wants to do. When we’re doing data visualisation it’s great that ggplot2 automatically provides things like “legends”, “axes”, and “scales” to map from data to visual aesthetics, but from an artistic perspective they’re just clutter. I don’t want to manually strip that out every time I make a plot, so it makes sense to have a function that gets rid of all those things:\n\n\nggplot_themed <- function(data) {\n  data %>% \n    ggplot(aes(x, y)) +\n    coord_equal() + \n    scale_size_identity() + \n    scale_colour_identity() + \n    scale_fill_identity() + \n    theme_void() \n}\n\n\n\nThis “template function” allows us to start with a clean slate, and it makes our subsequent coding task easier. The x and y aesthetics are already specified, ggplot2 won’t try to “interpret” our colours and sizes for us, and it won’t mess with the aspect ratio. In a sense, this function turns off the autopilot: we’re flying this thing manually…\nThere are many ways to plot the jas data in ggplot2. The least imaginative possibility is geom_tile(), which produces a pixellated version of the jasmines photo:\n\n\njas %>% \n  ggplot_themed() + \n  geom_tile(aes(fill = shade)) \n\n\n\n\nOf course, if you are like me you always forget to use the fill aesthetic. The muscle memory tells me to use the colour aesthetic, so I often end up drawing something where only the borders of the tiles are coloured:\n\n\njas %>% \n  ggplot_themed() + \n  geom_tile(aes(colour = shade)) \n\n\n\n\nIt’s surprisingly pretty, and a cute demonstration of how good the visual system is at reconstructing images from low-quality input: remarkably, the jasmines are still perceptible despite the fact that most of the plot area is black. I didn’t end up pursuing this (yet!) but I think there’s a lot of artistic potential here. It might be worth playing with at a later date. In that sense generative art is a lot like any other kind of art (or, for that matter, science). It is as much about exploration and discovery as it is about technical prowess.\nThe path I did follow is based on geom_point(). Each pixel in the original image is plotted as a circular marker in the appropriate colour. Here’s the simplest version of this idea applied to the jas data:\n\n\njas %>% \n  ggplot_themed() + \n  geom_point(aes(colour = shade)) \n\n\n\n\nIt’s simple, but I like it.\nExtracting the colour channels\nUp to this point we haven’t been manipulating the colours in any of the plots: the hex code in the shade variable is left intact. There’s no inherent reason we should limit ourselves to such boring visualisations. All we need to do is extract the different “colour channels” and start playing around.\nIt’s not too difficult to do this: base R provides the col2rgb() function that separates the hex code into red, green, blue channels, and represents each channel with integers between 0 and 255. It also provides the rgb2hsv() function that converts this RGB format into hue, saturation, and value format, represented as numeric values between 0 and 1.\nThis technique is illustrated by the extract_channels() helper function shown below. It looks at the shade column in the data frame, and adds six new columns, one for each channel. I’m a sucker for variable names that are all the same length (often unwisely), and I’ve named them red, grn, blu, hue, sat, and val:\n\n\nextract_channels <- function(tbl) {\n  rgb <- with(tbl, col2rgb(shade))\n  hsv <- rgb2hsv(rgb)\n  tbl <- tbl %>% \n    mutate(\n      red = rgb[1, ],\n      grn = rgb[2, ],\n      blu = rgb[3, ],\n      hue = hsv[1, ],\n      sat = hsv[2, ],\n      val = hsv[3, ]\n    )\n  return(tbl)\n}\n\n\n\nHere’s what that looks like applied to the jas data:\n\n\njas <- extract_channels(jas)\njas\n\n\n# A tibble: 6,000 × 10\n       y     x shade        id   red   grn   blu    hue   sat   val\n   <dbl> <dbl> <chr>     <int> <int> <int> <int>  <dbl> <dbl> <dbl>\n 1     1     1 #838c70ff     1   131   140   112 0.220  0.200 0.549\n 2    10     1 #3c3123ff     2    60    49    35 0.0933 0.417 0.235\n 3    11     1 #503d3dff     3    80    61    61 0      0.237 0.314\n 4    12     1 #363126ff     4    54    49    38 0.115  0.296 0.212\n 5    13     1 #443a30ff     5    68    58    48 0.0833 0.294 0.267\n 6    14     1 #8a6860ff     6   138   104    96 0.0317 0.304 0.541\n 7    15     1 #665859ff     7   102    88    89 0.988  0.137 0.4  \n 8    16     1 #5a5d51ff     8    90    93    81 0.208  0.129 0.365\n 9    17     1 #535c4cff     9    83    92    76 0.260  0.174 0.361\n10    18     1 #944b61ff    10   148    75    97 0.950  0.493 0.580\n# … with 5,990 more rows\n\nA whole new world of artistic possibilities has just emerged!\nArt from channel manipulation\nOne way to use this representation is in halftone images. If you have a printer that contains only black ink, you can approximate shades of grey by using the size of each dot to represent how dark that pixel should be:\n\n\nmap_size <- function(x) {\n  ambient::normalise(1-x, to = c(0, 2))\n}\n\njas %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(size = map_size(val)),\n    colour = \"black\", \n    show.legend = FALSE\n  )\n\n\n\n\n\nIn this code the ambient::normalise() function is used to rescale the input to fall within a specified range. Usually ggplot2 handles this automatically, but as I mentioned, we’ve turned off the autopilot…\nFor real world printers, this approach is very convenient because it allows us to construct any shade we like using only a few different colours of ink. In the halftone world shades of grey are merely blacks of different size, pinks are merely sizes of red (sort of), and so on.\nBut we’re not using real printers, and in any case the image above is not a very good example of a halftone format: I’m crudely mapping 1-val to the size aesthetic, and that’s not actually the right way to do this (if you want to see this done properly, look at the halftoner package). The image above is “inspired by” the halftone concept, not the real thing. I’m okay with that, and abandoning the idea of fidelity opens up new possibilities. For example, there’s nothing stopping us retaining the original hue and saturation, while using dot size to represent the intensity value. That allows us to produce “halftonesque” images like this:\n\n\njas %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(\n      colour = hsv(hue, sat, .5), \n      size = map_size(val)\n    ), \n    show.legend = FALSE\n  )\n\n\n\n\nIn this code, the hsv() function takes the hue and saturation channels from the original image, but combines them with a constant intensity value: the output is a new colour specified as a hex code that ggplot2 can display in the output. Because we have stripped out the value channel, we can reuse the halftone trick. Much like a halftone image, the image above uses the size aesthetic to represent the intensity at the corresponding pixel.\nIntermission\nUp to this point I’ve talked about image manipulation, and I hope you can see the artistic potential created when we pair image processing tools like magick with data visualisation tools like ggplot2. What I haven’t talked about is how to choose (or generate!) the images to manipulate, and I haven’t talked about how we might introduce a probabilistic component to the process. I’m not going to say much about how to choose images. The possibilities are endless. For this post I’ve used a photo I took in my garden many years ago, but the pieces in Water Colours series have a different origin: I dripped some food colouring into a glass of water and took some photos of the dye diffusing. Small sections were cropped out of these photos and often preprocessed in some fashion by changing the hue, saturation etc. These manipulated photos were then passed into a noise generation process, and the output produced images like this:\n\n\n\n\n\n\n\n\nStorm Cell / Air Elemental\n\n\n\n\n\n\n\n\nTonal Earth\n\n\n\n\n\n\n\n\nCold Front\n\n\n\n\n\n\n\n\nKintsugi Dreams\n\n\n\n\n\n\nArt from noise generators\nMultidimensional noise generation\nHow can we generate interesting noise patterns in R? As usual, there are many different ways you can do this, but my favourite method is to use the ambient package that provides bindings to the FastNoise C++ library. A proper description of what you can do with ambient is beyond what I can accomplish here. There are a lot of things you can do with a tool like this, and I’ve explored only a small subset of the possibilities in my art. Rather than make a long post even longer, what I’ll do is link to a lovely essay on flow fields and encourage you to play around yourself.\nTo give you a sense of what the possibilities are, I’ve written a field() function that uses the ambient package to generate noise. At its heart is ambient::gen_simplex(), a function that generates simplex noise (examples here), a useful form of multidimensional noise that has applications in computer graphics. In the code below, the simplex noise is then modified by a billow fractal that makes it “lumpier”: that’s the job of ambient::gen_billow() and ambient::fracture(). This is then modified one last time by the ambient::curl_noise() function to avoid some undesirable properties of the flow fields created by simplex noise.\nIn any case, here is the code. You’ll probably need to read through the ambient documentation to understand all the moving parts here, but for our purposes the main things to note are the arguments. The points argument takes a data frame or tibble that contains the x and y coordinates of a set of points (e.g., something like the jas data!). The frequency argument controls the overall “scale” of the noise: does it change quickly or slowly as you move across the image? The octaves argument controls the amount of fractal-ness (hush, I know that’s not a word) in the image. How many times do you apply the underlying transformation?\n\n\nfield <- function(points, frequency = .1, octaves = 1) {\n  ambient::curl_noise(\n    generator = ambient::fracture,\n    fractal = ambient::billow,\n    noise = ambient::gen_simplex,\n    x = points$x,\n    y = points$y,\n    frequency = frequency,\n    octaves = octaves,\n    seed = 1\n  )\n}\n\n\n\nInterpreting the output of the field() function requires a little care. The result isn’t a new set of points. Rather, it is a collection of directional vectors that tell you “how fast” the x- and y-components are flowing at each of the locations specified in the points input. If we want to compute a new set of points (which is usually true), we need something like the shift() function below. It takes a set of points as input, computes the directional vectors at each of the locations, and then moves each point by a specified amount, using the flow vectors to work out how far to move and what direction to move. The result is a new data frame with the same columns and the same number of rows:\n\n\nshift <- function(points, amount, ...) {\n  vectors <- field(points, ...)\n  points <- points %>%\n    mutate(\n      x = x + vectors$x * amount,\n      y = y + vectors$y * amount,\n      time = time + 1,\n      id = id\n    )\n  return(points)\n}\n\n\n\nIt’s worth noting that the shift() function assumes that points contains an id column as well as the x and y columns. This will be crucial later when we want to merge the output with the jas data. Because the positions of each point are changing, the id column will be the method we use to join the two data sets. It’s also worth noting that shift() keeps track of time for you. It assumes that the input data contains a time column, and the output data contains the same column with every value incremented by one. In other words, it keeps the id constant so we know which point is referred to by the row, but modifies its position in time and space (x and y). Neat.\nArt from the noise\nTo illustrate how this all works, I’ll start by creating a regular 50x30 grid of points:\n\n\npoints_time0 <- expand_grid(x = 1:50, y = 1:30) %>% \n  mutate(time = 0, id = row_number())\n\nggplot_themed(points_time0) + \n  geom_point(size = .5)\n\n\n\n\nNext, I’ll apply the shift() function three times in succession, and bind the results into a single tibble that contains the the data at each point in time:\n\n\npoints_time1 <- shift(points_time0, amount = 1)\npoints_time2 <- shift(points_time1, amount = 1)\npoints_time3 <- shift(points_time2, amount = 1)\n\npts <- bind_rows(\n  points_time0, \n  points_time1, \n  points_time2,\n  points_time3\n)\n\n\n\nThen I’ll quickly write a couple of boring wrapper functions that will control how the size and transparency of the markers changes as a function of time…\n\n\nmap_size <- function(x) {\n  ambient::normalise(x, to = c(0, 2))\n}\nmap_alpha <- function(x) {\n  ambient::normalise(-x, to = c(0, .5))\n}\n\n\n\n…and now we can create some art:\n\n\npts %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(\n      size = map_size(time), \n      alpha = map_alpha(time)\n    ),\n    show.legend = FALSE\n  )\n\n\n\n\nSo pretty!\nAccumulating art with purrr\n… but also so ugly. The code I used above is awfully inelegant: I’ve “iteratively” created a sequence of data frames by writing the same line of code several times. That’s almost never the right answer, especially when the code doesn’t know in advance how many times we want to shift() the points! To fix this I could write a loop (and contrary to folklore, there’s nothing wrong with loops in R so long as you’re careful to avoid unnecessary copying). However, I’ve become addicted to functional programming tools in the purrr package, so I’m going to use those rather than write a loop.\nTo solve my problem I’m going to use the purrr::accumulate() function, which I personally feel is an underappreciated gem in the functional programming toolkit. It does precisely the thing we want to do here: it takes one object (e.g., points) as input together with a second quantity (e.g., an amount), and uses the user-supplied function (e.g., shift()) to produce a new object that can, once again, be passed to the user-supplied function (yielding new points). It continues with this process, taking the output of the last iteration of shift() and using it as input to the next iteration, until it runs out of amount values. It is very similar to the better-known purrr::reduce() function, except that it doesn’t throw away the intermediate values. The reduce() function is only interested in the destination; accumulate() is a whole journey.\nSo let’s use it. The iterate() function below gives a convenient interface:\n\n\niterate <- function(pts, time, step, ...) {\n  bind_rows(accumulate(\n    .x = rep(step, time), \n    .f = shift, \n    .init = pts,\n    ...\n  ))\n}\n\n\n\nHere’s the code to recreate the pts data from the previous section:\n\n\npts <- points_time0 %>% \n  iterate(time = 3, step = 1)\n\n\n\nIt produces the same image, but the code is nicer!\n\n\n\nAssembling the parts\nAdding noise to jasmines coordinates\nThe time has come to start assembling the pieces of the jigsaw puzzle, by applying the flow fields from the previous section to the data associated with the jasmines image. The first step in doing so is to write a small extract_points() function that will take a data frame (like jas) as input, extract the positional information (x and y) and the identifier column (id), and add a time column so that we can modify positions over time:\n\n\nextract_points <- function(data) {\n  data %>% \n    select(x, y, id) %>% \n    mutate(time = 0)\n}\n\n\n\nHere’s how we can use this. The code below extracts the positional information from jas and then use the iterate() function to iteratively shift those positions along the paths traced out by a flow field:\n\n\npts <- jas %>% \n  extract_points() %>% \n  iterate(time = 20, step = .1)\n\n\n\nThe pts tibble doesn’t contain any of the colour information from jas, but it does have the “right kind” of positional information. It’s also rather pretty in its own right:\n\n\nmap_size <- function(x) {\n  ambient::normalise(x^2, to = c(0, 3.5))\n}\n\npts %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(size = map_size(time)),\n    alpha = .01,\n    show.legend = FALSE\n  ) \n\n\n\n\nJoining the noise with jasmine colours\nWe can now take the pixels from the jasmines image and make them “flow” across the image. To do this, we’ll need to reintroduce the colour information. We can do this using full_join() from the dplyr package. I’ve written a small convenience function restore_points() that performs the join only after removing the original x and y coordinates from the jas data. The reason for this is that the pts data now contains the positional information we need, so we want the x and y values from that data set. That’s easy enough: we drop those coordinates with select() and then join the two tables using only the id column. See? I promised it would be useful!\n\n\nrestore_points <- function(jas, pts) {\n  jas %>% \n    select(-x, -y) %>% \n    full_join(pts, by = \"id\") %>% \n    arrange(time, id) \n}\n\n\n\nThe result is a tibble that looks like this:\n\n\njas <- restore_points(jas, pts)\njas\n\n\n# A tibble: 126,000 × 11\n   shade     id   red   grn   blu    hue   sat   val     x     y  time\n   <chr>  <int> <int> <int> <int>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 #838c…     1   131   140   112 0.220  0.200 0.549     1     1     0\n 2 #3c31…     2    60    49    35 0.0933 0.417 0.235     1    10     0\n 3 #503d…     3    80    61    61 0      0.237 0.314     1    11     0\n 4 #3631…     4    54    49    38 0.115  0.296 0.212     1    12     0\n 5 #443a…     5    68    58    48 0.0833 0.294 0.267     1    13     0\n 6 #8a68…     6   138   104    96 0.0317 0.304 0.541     1    14     0\n 7 #6658…     7   102    88    89 0.988  0.137 0.4       1    15     0\n 8 #5a5d…     8    90    93    81 0.208  0.129 0.365     1    16     0\n 9 #535c…     9    83    92    76 0.260  0.174 0.361     1    17     0\n10 #944b…    10   148    75    97 0.950  0.493 0.580     1    18     0\n# … with 125,990 more rows\n\nMore importantly though, it produces images like this:\n\n\nmap_size <- function(x, y) {\n  ambient::normalise((1 - x) * y^2, to = c(0, 5))\n}\n\njas %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(\n      colour = hsv(hue, sat, .5), \n      size = map_size(val, time)\n    ), \n    alpha = .03,\n    show.legend = FALSE\n  )\n\n\n\n\nWhen colouring the image, we’re using the same “halftonesque” trick from earlier. The colours vary only in hue and saturation. The intensity values are mapped to the size aesthetic, much like we did earlier, but this time around the size aesthetic is a function of two variables: it depends on time as well as val. The way I’ve set it up here is to have the points get larger as time increases, but there’s no reason we have to do it that way. There are endless ways in which you could combine the positional, temporal, and shading data to create interesting generative art. This is only one example.\nThe last chapter\nAt last we have the tools we need to create images in a style similar (though not identical) to those produced by the Water Colours system. We can import, reorganise, and separate the data:\n\n\njas <- file %>% \n  import_image(width = 200, height = 120) %>% \n  construct_matrix() %>% \n  construct_tibble() %>% \n  extract_channels()\n\n\n\nWe can define flow fields with different properties, move the pixels through the fields, and rejoin the modified positions with the colour information\n\n\npts <- jas %>% \n  extract_points() %>% \n  iterate(\n    time = 40, \n    step = .2, \n    octaves = 10, \n    frequency = .05\n  )\n\njas <- jas %>%\n  restore_points(pts)\n\njas\n\n\n# A tibble: 984,000 × 11\n   shade    id   red   grn   blu    hue    sat   val     x     y  time\n   <chr> <int> <int> <int> <int>  <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 #9c8…     1   156   129   120 0.0417 0.231  0.612     1     1     0\n 2 #81b…     2   129   181   100 0.274  0.448  0.710     1    10     0\n 3 #8b7…     3   139   120   112 0.0494 0.194  0.545     1   100     0\n 4 #eed…     4   238   223   219 0.0351 0.0798 0.933     1   101     0\n 5 #c29…     5   194   154   163 0.962  0.206  0.761     1   102     0\n 6 #d5e…     6   213   225   195 0.233  0.133  0.882     1   103     0\n 7 #bde…     7   189   232   190 0.337  0.185  0.910     1   104     0\n 8 #b3d…     8   179   223   188 0.367  0.197  0.875     1   105     0\n 9 #b2d…     9   178   220   189 0.377  0.191  0.863     1   106     0\n10 #b3d…    10   179   217   191 0.386  0.175  0.851     1   107     0\n# … with 983,990 more rows\n\nWe can write customised helpers to guide how information is used:\n\n\nmap_size <- function(x, y) {\n  12 * (1 - x) * (max(y)^2 - y^2) / y^2\n}\n\n\n\nAnd we can render the images with ggplot2:\n\n\npic <- jas %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(\n      colour = shade, \n      size = map_size(val, time)\n    ), \n    alpha = 1,\n    stroke = 0,\n    show.legend = FALSE\n  ) \n\npic\n\n\n\n\nThe colour bleeding over the edges here is to be expected. Some of the points created with geom_point() are quite large, and they extend some distance beyond the boundaries of the original jasmines photograph. The result doesn’t appeal to my artistic sensibilities, so I’ll adjust the scale limits in ggplot2 so that we don’t get that strange border:\n\n\npic +\n  scale_x_continuous(limits = c(11, 190), expand = c(0, 0)) +\n  scale_y_continuous(limits = c(7, 114), expand = c(0, 0))\n\n\n\n\nThe end result is something that has a qualitative similarity to the Water Colours pieces, but is also possessed of a style that is very much its own. This is as it should be. It may be true that “all art is theft” – as Picasso is often misquoted as saying – but a good artistic theft is no mere replication. It can also be growth, change, and reconstruction.\nA happy ending after all.\nEpilogue\n\nI find it so amazing when people tell me that electronic music has no soul. You can’t blame the computer. If there’s no soul in the music, it’s because nobody put it there (Björk, via Tim de Sousa)\n\n\n\n\n\n\n\n\n\nDeparture\n\n\n\n\n\n\n\n\nEcho\n\n\n\n\n\n\n\n\nPortal\n\n\n\n\n\n\n\n\nGods of Salt, Stone, and Storm\n\n\n\n\n\n\n\n\nEl Último Amanecer de Invierno\n\n\n\n\n\n\n\n\nPlume\n\n\n\n\n\n\n\n\nWoodland Spirits\n\n\n\n\n\n\n\n\nBelow the Horizon\n\n\n\n\n\n\n\n\nLast updated\n2021-09-17 16:55:04 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-09-07_water-colours/jasmine-recollected.png",
    "last_modified": "2022-01-10T11:27:13+11:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-08-08_git-credential-helpers/",
    "title": "Managing GitHub credentials from R, difficulty level linux",
    "description": "A sick sad story in which a humble R user was forced to learn something about\nhow linux stores passwords and, more importantly, got R to use her GitHub\ncredentials properly",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-08-08",
    "categories": [],
    "contents": "\n\nContents\nThe story is quite short…\nUsing GitHub credentials with R\nSetting up the credentials\n\n… unless you’re on linux\nWhere did I leave my config?\nDon’t forget to update git\n\nThree solutions\n1. Set a long timeout for the git cache\n2. Use libsecret credential manager\n3. Use GCM core\n\n\n\n\nThere are days when I regret switching to linux as an R user. It’s not that I’m particularly enamoured of Apple or Microsoft, and I do enjoy the freedom to tinker that linux systems provide, but without the same resourcing that underpins Windows or Mac OS, I do spent a disproportionate amount my time trying to make my long-suffering Ubuntu laptop do something that would “just work” if I’d gone with one of the more traditional options. But such is life, and besides, there’s a case to be made that the time I spend on these things is not wasted: usually, I end up learning something useful.\n La la la la la. (Figure from giphy.com)\nThis is one of those stories.\nThe story is quite short…\nUsing GitHub credentials with R\nFor some years now I have been using git repositories for version control, with some ambivalence to my feelings. I absolutely love version control, and I think GitHub is a fabulous tool, but git itself gives me headaches. It feels counterintuitive and untidy, and I am resistant to learning new git tricks because of that. However, now that GitHub is moving to end password authentication for git operations, I find myself needing to do precisely that. Sigh.\nLike many R users, whenever I encounter a git problem my first impulse is to see whether Happy Git and GitHub for the useR (Bryan 2018) can help me out, and true to form, it can. Having decided that I will revert to being an https girl, renouncing my flirtation with ssh, I’ve found the chapter on caching https credentials extremely useful. The usethis article on git credentials is also worth the read.\nThe problem can be broken into three parts:\nHow do I set up an authentication token on my GitHub account?\nHow do I configure my git installation to use the authentication token?\nHow do I ensure that R detects these credentials?\nThanks to the fabulous work of the tidyverse team, it’s possible for R users to solve the problem in a fairly painless way. The solution has been documented repeatedly, but for the sake of completeness I’ll repeat the advice here.\nSetting up the credentials\nThe first thing you’ll need to do is set up a GitHub token. You can do this on the GitHub website, but for an R user it’s probably easiest to use the usethis package (Wickham and Bryan 2021):\n\n\nusethis::create_github_token()\n\n\n\nThis will open GitHub in a browser window, take you to the “create a new token page,” and pre-populate all the fields with sensible default values. After accepting these values, the token is created and you’ll be given a PAT, a “personal authentication token.” It’ll look something like this…\nghp_dgdfasdklfjsdklfjsadfDKFJASDLKFJ3453\n…and you should immediately save this in a secure password manager, like 1password, lastpass, etc, because GitHub will only show it to you this one time. You did save it to your password manager, right? Right? I mean, you might need it again. You really might. Yes, you. All right then. I’ll trust you’ve taken sensible precautions now, so let’s keep going. The next step in the process is to configure your git installation to use your token. This is, once again, quite easy to do with gitcreds (Csárdi 2020):\n\n\ngitcreds::gitcreds_set()\n\n\n\nWhen you call this function interactively, R will ask for your PAT. Paste it into the console, hit enter, and you are done. Your git installation is now configured to use the token. Yay! Let’s move onto the third step, which is to ensure that R will recognise and use these credentials. As it turns out, step three doesn’t require you to do anything, because it happens automatically! Functions like usethis::pr_push() recognise your credentials as soon as gitcreds sets them up, and everything works perfectly…\n Quinn. (Figure from giphy.com)\n… unless you’re on linux\nIf you’re on linux, you might find yourself in the same boat I was. The credentials you just set up work flawlessly for about 15 minutes, at which time R complains that it cannot find any credentials and you spend the next 15 minutes crying melodramatically.\nWhen this happened to me I assumed the problem was my R environment. I tried updating gitcreds, usethis, and every other R package I could think of that might possibly be involved in communicating with git. Nothing worked. The reason nothing worked is that the problem wasn’t with R at all… it was git, and in hindsight I realise that the problem is specific to git on linux. All those beautiful people with their fancy Windows and Mac machines won’t run into the problem I encountered. They won’t spend an entire Saturday trying to teach themselves git credential management. They will never know my pain. Curse them and their superior purchasing decisions.\n Daria. (Figure from giphy.com)\nJust kidding. I love my quirky little Ubuntu box and I have a lot of fun learning how to fix her up every time she sets herself on fire.\nWhere did I leave my config?\nOkay, I’m going to need to make changes to my git configuration. Although git makes it possible to store configuration locally, at the repository level, I rarely need this flexibility. The relevant information is stored in the global configuration file: on my machine, this is located at /home/danielle/.gitconfig. I can use git config to list these configuration settings, like this\n\ngit config --global --list\n\nand at the start of this exercise the output would have looked like this:\nuser.name=Danielle Navarro\nuser.email=d.navarro@unsw.edu.au\nI’m not sure why this is, but I always feel slightly more reassured when I’m able to inspect the configuration file itself. Opening my .gitconfig file shows the same information, but the formatting is slightly different in the raw file:\n[user]\n    name = Danielle Navarro\n    email = d.navarro@unsw.edu.au\nTo solve the git credential problem, we’re going to need to edit this configuration information. Depending on which solution you go with, you might need to install new software too.\nDon’t forget to update git\nBefore starting, it’s a good idea to make sure you have the latest version of git: older versions may not have the tools you need. As it happens, I had already updated git to the most recent version (2.32.0 at the time of writing), but in case anyone ends up relying on this post, here’s how you do it:\nsudo add-apt-repository ppa:git-core/ppa\nsudo apt update\nsudo apt install git\nThree solutions\n1. Set a long timeout for the git cache\nRecent versions of git are released with a credential cache that retains your credentials in memory temporarily. The information is never written to disk, and it expires after a time. You can tell git to use this cache as your “credential helper” by typing the following command at the terminal:\n\ngit config --global credential.helper cache\n\nAfter doing this, my .gitconfig file now looks like this:\n[user]\n    name = Danielle Navarro\n    email = d.navarro@unsw.edu.au\n[credential]\n    helper = cache\nUnfortunately this isn’t an ideal solution, because the cache expires after 900 seconds (15 minutes). As soon as the cache expires, git loses track of your GitHub credentials and so does R. So you have to set the credentials again by calling gitcreds::gitcreds_set() and entering the PAT again. That’s annoying, but you did store the PAT in a password manager right? You were smart. You definitely aren’t going to be foolish like me, forget to store your PAT every time, and end up needing to create a new GitHub token every 15 minutes.\nA simple solution to this problem is to ask git to store information in the cache for just a teeny tiny little bit longer. Instead of having the cache expire after the default 900 seconds, maybe set it to expire after 10 million seconds. That way, you’ll only have to refresh the cache using gitcreds::gitcreds_set() once every four months instead of four times an hour. Implementing this solution requires only one line of code at the terminal:\n\ngit config --global credential.helper 'cache --timeout=10000000'\n\nAfter typing this, my .gitconfig file looks like this:\n[user]\n    name = Danielle Navarro\n    email = d.navarro@unsw.edu.au\n[credential]\n    helper = cache --timeout=10000000\nIn some ways this is a bit of a hack. If cache expiry normally happens every 15 minutes, there’s something a little odd about dragging it out and making it hang around for 16 weeks. That being said, I’ve done many stranger things than this in my life. It may not be the most elegant way to solve the problem, but it works.\n Trent. (Figure from giphy.com)\n2. Use libsecret credential manager\nIt puzzled me slightly that this problem only exists for linux computers, so I did a little more reading on how git manages credentials. It turns out you don’t have to rely on the in-memory cache: you can tell git to use some other program to supply the credentials. This is what all those swanky Mac and Windows people have been doing all along. On Macs, for example, git defaults to using the OS X keychain to store credentials safely on disk. It’s possible to do the same thing on linux using libsecret (source on gitlab) and thankfully it’s not much harder to set this up than to use the “long cache” trick described in the previous section.\nThe first step is ensuring libsecret is installed on your machine. It probably is (or at least, it was on my Ubuntu 20.04 box), but in case it isn’t here’s the command you need\n\nsudo apt install libsecret-1-0 libsecret-1-dev\n\nIt helps to realise that libsecret isn’t an application designed to work with git (i.e., it’s not the credential manager), nor is it the keyring where the passwords are stored. Rather, it’s a library that communicates with the keyring: I found this post useful for making sense of it. So if we want to use libsecret to access the keyring, we’re going to need a git credential manager that knows how to talk to libsecret. As it turns out, git comes with one already, you just have to build it using make:\n\ncd /usr/share/doc/git/contrib/credential/libsecret\nsudo make\n\nThis will build the git-credential-libsecret application for you and now all you have to do is tell git to use this as the “credential helper” application that supplies the GitHub credentials:\n\ngit config --global credential.helper \\\n  /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret\n\nAfter typing that, my .gitconfig file looks like this…\n[user]\n    name = Danielle Navarro\n    email = d.navarro@unsw.edu.au\n[credential]\n    helper = /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret\n… and I’m all set and ready to go.\nOne thing I found handy during this step is to check that R was reading the correct configuration information. It’s possible to do this with gitcreds:\n\n\ngitcreds::gitcreds_list_helpers()\n\n\n\n\n[1] \"/usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret\"\n\nIn any case, if all the applications are talking to each other properly, the next time you call gitcreds::gitcreds_set() they’ll all send the message along: R will pass your PAT to git, git will pass it to git-credential-libsecret, git-credential-libsecret will pass it to libsecret, and the PAT will end up in your linux keychain. Whenever you need to authenticate and push some commits up to GitHub from R, it should find the credentials using the same communication channel. Everything should work swimmingly.\n Quinn et al. (Figure from giphy.com)\n3. Use GCM core\nAs far as I can tell, the libsecret credential manager is a perfectly good solution to the problem, but in the end I made a different choice: I decided to go with “git credential manager core,” or GCM Core. It’s developed by Microsoft and, perhaps unsurprisingly, it is what GitHub currently recommends. It’s slightly more painful to set up, and the installation instructions are different depending on what flavour of linux you’re running. Because I’m on Ubuntu 20.04, I downloaded the .deb file associated with the most recent release of GCM core, and then installed the application using the dpkg command:\n\nsudo dpkg -i <path-to-deb-file>\n\nThis will build GCM core on your system, and once that’s done you can ask it to take care of the git configuration for you:\n\ngit-credential-manager-core configure\n\nThis will edit the .gitconfig file, so for me it now looks like this:\n[user]\n    name = Danielle Navarro\n    email = d.navarro@unsw.edu.au\n[credential]\n    helper = \n    helper = /usr/bin/git-credential-manager-core\n[credential \"https://dev.azure.com\"]\n    useHttpPath = true\nIn a happier world you would be done at this point, but we don’t live in a happy world. We live in a sick sad world that has global pandemics and pineapple on pizzas. So there’s still one job left to do.\nMuch like the libsecret credential manager I built in the previous section, GCM core is “just” a git credential manager: it communicates with git, but it isn’t a password manager or a keyring, and it doesn’t store the PAT itself. Instead, it offers you several different options for how the PAT is to be stored. If you click through and take a look at the list, the first suggested option is to connect to a secret service API. As far as I can tell “secret service” isn’t an application, it’s a specification, and in practice it’s just a fancy way of referring to a linux keychain. Just as the libsecret credential manager needs some way of communicating with the keychain (i.e., the libsecret library itself), GCM core needs an intermediary. In fact, it turns out GCM core also uses libsecret to talk to the keychain. So that’s the option I went with. The terminal command to set this up is this:\n\ngit config --global credential.credentialStore secretservice\n\nAfter running the command, my .gitconfig file looks like this:\n[user]\n    name = Danielle Navarro\n    email = d.navarro@unsw.edu.au\n[credential]\n    helper = \n    helper = /usr/bin/git-credential-manager-core\n    credentialStore = secretservice\n[credential \"https://dev.azure.com\"]\n    useHttpPath = true\n Jane. (Figure from giphy.com)\nAs before, I can check that R is reading the correct configuration information…\n\n\ngitcreds::gitcreds_list_helpers()\n\n\n[1] \"/usr/bin/git-credential-manager-core\"\n\n…and now I’m ready to go. My problems are solved. The sun is shining, the birds are singing, and git is working properly from R again. All is well in heaven and earth. Oh the sheer excitement of it all. I hope I can contain my boundless enthusiasm and joy.\n Daria. (Figure from giphy.com)\n\nLast updated\n2021-09-17 17:00:16 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\nBryan, Jennifer. 2018. Happy Git and GitHub for the useR. GitHub.\n\n\nCsárdi, Gábor. 2020. Gitcreds: Query ’Git’ Credentials from ’r’. https://CRAN.R-project.org/package=gitcreds.\n\n\nWickham, Hadley, and Jennifer Bryan. 2021. Usethis: Automate Package and Project Setup. https://CRAN.R-project.org/package=usethis.\n\n\n\n\n",
    "preview": "posts/2021-08-08_git-credential-helpers/credentials.jpg",
    "last_modified": "2022-01-10T11:27:13+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-07-08_generative-art-in-r/",
    "title": "Generative art in R",
    "description": "Comments on an exhibit I contributed to as part of useR!2021",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-07-08",
    "categories": [],
    "contents": "\n\n\nA little while ago I was invited by Sara Mortara to contribute art as part of an exhibit to be presented at the 2021 useR! conference, along with several artists who I admire greatly. I could hardly say no to that, now could I? So I sent some pieces that I’m fond of, most of which are posted somewhere on my art website. I realised later though that I was going to have to talk a little about my art too, and Sara suggested an informal Q&A during the timeslot allocated to the exhibit. Naturally, I agreed since that meant I didn’t have to prepare anything formal, and like all artists I am extremely lazy. Later though, it occurred to me that it actually wouldn’t be terrible if I wrote a blog post to accompany my contribution to the exhibit, loosely based on the questions Sara suggested. And so here we are…\nWhen did you start using R for art? Do you remember your first piece?\nI started making art in R some time in late 2019. I’d discovered some of the art that Thomas Lin Pedersen had been making – at the time he was posting pieces from his Genesis series – and at the same time I found the ambient package that he was using to create the pieces. Thomas famously does not post source code for his art, and being stubborn and curious I wanted to work out how he was doing it, so I started playing with ambient to see if I could reverse engineer his system. My very first piece was Constellations, shown below. It’s certainly not the prettiest thing I’ve created, and there are a lot of things I’d like to change about it now, but it’s nice to have your early work lying around to see how you’ve changed since then:\n\nConstellations\n\nIf you follow the link above and look at Thomas’ Genesis pieces you can tell that it’s not even remotely close to the mark, but I did eventually get the hang of it and managed to produce a few pieces like Rainbow Prisms which are closer to the kind of work he was producing:\n\nRainbow Prisms\n\nIt’s still not quite the same as Thomas’ in style, but by the time I’d worked out how to produce these I decided it was time to change my approach and branch out a bit. I love Thomas’ work of course, but I didn’t want my art to be just a low quality imitation of his! And besides, by that point I’d started discovering a whole lot of other people making generative art in R, such as Will Chase, Antonio Sánchez Chinchón, Marcus Volz, and (somewhat later) Ijeamaka Anyene. Each has their own style and – following the famous advice that art is theft – have shamelessly taken ideas and inspiration from each at different times.\nSome of those early pieces are still around, as part of the Rosemary gallery.\nWere you an artist before making generative art in R?\nNot really. I always wanted to do more artistic and creative things, but the only thing I’d ever done that required any kind of mix of aesthetic sensibility and craftwork was gardening. I used to have a lovely garden in Adelaide with a mix of Mediterranean and Australian native plants, and I had the same kind of enthusiasm for gardening then as I do for art now. Maybe one day I’ll garden again but there’s no space for that in my Sydney apartment!\nCan you talk about your creative process? Do you begin from code or from the outcome you are looking for? Do you start with the color palette in mind, or is it an iterative process?\nI’m honestly not sure I have a consistent process? I spend a lot of time browsing artwork by other people on twitter and instagram, and from time to time I read posts about the techniques that they use. Whenever I do this I end up thinking a bit about how I might use this technique or wondering what methods other artists use to create their work, but I don’t usually act on that information until I think of something I want to do with it. That kind of technical or stylistic information is like background knowledge that lies dormant until I need it.\nMost of the time the starting point for my art is an emotion. I might be angry or lonely or tired, or just in need of something to occupy my mind and distract me from something else. When I start implementing a new system it’s often (though not always) a modification of a previous one. In principle this modification process could go in any direction, but my aesthetic sensibilities depend a lot on my state of mind, and that imposes a bias. I tweak the code one way, and see what it produces. If I like it, I keep the change, if I don’t I reject it. It’s a lot like a Metropolis-Hastings sampler that way, but my mood strongly shapes the accept/reject decision, so the same starting point can lead to different outcomes. As a concrete example, the Pollen, Bursts and Embers series are all based on the same underlying engine, the fractal flame algorithm created by Scott Draves, but my emotional state was very different at the time I coded each version. For example, the Pollen Cloud piece I contributed to the useR exhibit is soft and gentle largely because I was feeling peaceful and relaxed at the time:\n\nPollen Cloud\n\nBy way of contrast, the Geometry in a Hurricane piece from Bursts is layered in jagged textures with a chaotic energy because I was angry at the time I was coding:\n\nGeometry in a Hurricane\n\nThe Soft Ember piece below (also included in the exhibit) has a different feel again. There’s more energy to it than the pollen pieces, but it’s not as chaotic as the bursts series. Again, that’s very much a reflection of my mood. I wasn’t angry when I coded this system, but I wasn’t relaxed either. At the time, something exciting had happened in my life that I wasn’t quite able to do anything about, but I was indulging in the anticipation of a new thing, and some of that emotion ended up showing through in the pieces that I made at the time:\n\nSoft Ember\n\nTo bring all this back to the question, it’s very much an iterative process. The driver behind the process is usually an emotion, and the colour choices, the shapes, and the code are all adapted on the fly to meet with how I’m feeling.\nWhat is your inspiration?\nTo the extent that my art is driven by emotion, the inspiration for it tends to be tied to sources of strong emotion in my life. Sometimes that emotion comes from the sources of love and joy: family, intimate partners, and so on. The Heartbleed series is one of those. The background texture to these images is generated by simulating a simple Turing machine known as a turmite and the swirly hearts in the foreground are generated using the toolkit provided by the ambient package. This system is very much motivated from emotional responses to the loved ones in my life. One of the pieces in the exhibit is from this series:\n\nTurmite 59 in Red\n\nOther times the emotional motivation comes from sources of pain - sometimes things that were physically painful, sometimes that were psychologically painful. The Orchid Thorn piece I included in the exhibit is one of those, linked to an intense physically painful experience.\n\nOrchid Thorn\n\nThe Bitterness piece below, which I haven’t done much with other than post to my instagram, is strongly tied to the psychological stresses associated with my gender transition. Yes, there’s a softness to the piece, but there’s also a sandpaper-like texture there that makes me think of abrasion. The colour shifts make me think about transitions, but the roughness at some of the boundaries reminds me that change is often painful.\n\nBitterness\n\nOne odd property of the art, at least from my point of view, is that looking at a given piece recalls to mind the events and emotions that inspired the work, and to some extent that recollection becomes a way of re-experiencing the events. Sometimes that’s a good thing. Not always though.\nWhat is your advice for people who wants to create art in R?\nI think I’d suggest three things. Find artists you like, read about their processes. Sometimes they’ll show source code or link to algorithms like I’ve done in a few places in this piece, and it can be really valuable to try to retrace their steps. There’s nothing wrong with learning technique by initially copying other artists and then developing your own style as you go.\nThe second thing I’d suggest, for R folks specifically, is to take advantage of the skills you already have. Most of us have skills in simulation, data wrangling, and data visualisation, and those skills can be repurposed for artistic work quite easily. A lot of my pieces are created using that specific combination. I’ll often define a stochastic process and sample data from it using tools in base R, use dplyr to transform and manipulate it, then use ggplot2 to map the data structure onto a visualisation. One of the nice things about dplyr and ggplot2 being compositional grammars is the fact that you can “reuse” their parts for different purposes. I get a lot of artistic mileage out of geom_point() and geom_polygon(), and quite frankly purrr is an absolute godsend when the generative process you’re working with is iterative in nature.\nThe other thing would be try not to put pressure on yourself to be good at it immediately. I wasn’t, and I don’t think anyone else was either. Earlier I showed the Constellations piece and referred to it as the first piece I created. In a way that’s true, because it was the first time I reached a level that I felt comfortable showing to other people. But I made a lot of junk before that, and I made a lot of junk after that. I make some good art now (or so people tell me) precisely because I made a lot of bad art before. Even now, though, I can’t tell which systems will end up good and which will end up bad. It’s a bit of a lottery, and I’m trying my best not to worry too much about how the lottery works. I like to have fun playing with visual tools, and sometimes the tinkering takes me interesting places.\nAnything to add about your pieces in the exhibit?\nNot a lot. Several of the pieces I’ve contributed are already linked above, but I might just say a little about the other pieces and how they were made. The Silhouette in Teal piece uses the flametree generative art package to create the tree shown in silhouette in the foreground, and a simple random walk to generate the texture in the background:\n\nSilhouette in Teal\n\nIt has also been surprisingly popular on my Society6 store, which you can visit if you want some of my art on random objects. I am not sure why, but I have sold a lot more shower curtains and yoga mats than I would have expected to sell in my lifetime.\nLeviathan emerged from my first attempt to create simulated watercolours in R using this guide written by Tyler Hobbs. I was in a dark mood at the time and the ominous mood to the piece seems quite fitting to me.\n\nLeviathan\n\nThe Floral Effect piece is an odd one. It’s part of the Viewports series that I created by applying Thomas Lin Pedersen’s ggfx package over the top of the output of the same system I used to create the Native Flora series, which in turn is an application of the flametree system I mentioned earlier. I quite like it when these systems build on top of one another.\n\nFloral Effect\n\nThe last piece I included, Fire and Ice, is a little different from the others in that it’s not a “pure” generative system. It works by reading an image file into R, using Chris Marcum’s halftoner package to convert it to a halftone image, and then manipulate that image using the tools provided in the ambient package. The end result is something that still resembles the original image but has more of a painted feel:\n\nFire and Ice\n\n\n\nLast updated\n2021-09-17 17:01:46 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-07-08_generative-art-in-r/turmite59-in-red.jpg",
    "last_modified": "2022-01-10T11:27:12+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-04-19_bs4cards-in-distill/",
    "title": "Bootstrap cards in distill",
    "description": "How to enable bootstrap 4 on a distill website, even though you probably \ndon't need to. I like it though because I get to add pretty bootstrap cards",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-04-19",
    "categories": [],
    "contents": "\n\nContents\nEnabling bootstrap 4\nVanilla R markdown\nPkgdown\nDistill\n\nTesting with pretty pictures\n\n\n\nWhen creating R markdown websites, I often find myself wanting to organise content into a nice-looking grid of links. For example, in a recent project I wanted to be able to create something like this:\n\n\n\n\n\n\n\n\nStarting R markdown\n\nAn introduction to R markdown. The target audience is a novice R user with no previous experience with markdown.\n\n\n\n\n\n\n\nStarting ggplot2\n\nAn introduction to ggplot2. The target audience is a novice user with no previous experience with R or ggplot2.\n\n\n\n\n\n\n\nStarting programming\n\nThis is primarily a tutorial on making generative art in R, but in doing so introduces core programming constructs and data structures. It is assumed the user has some previous experience with ggplot2.\n\n\n\n\n\nIt bothered me that this wasn’t as straightforward as I was expecting, so for one of my side projects I’ve been putting together a small package called bs4cards to make this a little easier inside an R markdown document or website. There are some introductory articles posted on the bs4cards package website showing how the package works, and there’s no need to duplicate that content here. However, because this website uses the distill package (Allaire et al. 2021) and the package website is built using pkgdown (Wickham, Hesselberth, and Salmon 2021), it seems like a good idea to have at least one post on both sites that uses bs4cards.\nEnabling bootstrap 4\nThe reason for doing this is that the first step in using the package is to make sure that your R markdown document uses version 4 of bootstrap: the bs4cards package takes its name from the cards system introduced in bootstrap version 4, and will not work properly if used in R markdown documents that rely on bootstrap version 3, or don’t use bootstrap at all. To ensure that you are using bootstrap 4, you need to edit the YAML header for your document to specify which version of bootstrap you want to use. The instructions are slightly different depending on what kind of document you’re creating:\nVanilla R markdown\nFor a plain R markdown document or website (i.e., one where the output format is html_document) here is the relevant section of YAML you might use:\noutput:\n  html_document:\n    theme:\n      version: 4\nThis overrides the R markdown defaults (Xie, Dervieux, and Riederer 2020) to ensure that the output is built using bootstrap 4.5.\nPkgdown\nTo enable bootstrap 4 in a pkgdown site, the process is similar but not identical. Edit the _pkgdown.yml file to include the following\ntemplate:\n  bootstrap: 4\nNote that this relies on a currently-in-development feature, so you may need to update to the development version of pkgdown to make this work.\nDistill\nDistill R markdown does not use bootstrap, which is a little inconvenient if you want to use bs4cards with distill. With a little effort it is possible to enable the entire bootstrap library in a distill site, but this can lead to undesirable side-effects because bootstrap has a lot of styling that doesn’t look visually appealing when mixed with the istill styling. The solution I’ve adopted for this is to use a custom bootstrap build that includes a minimal number of bootstrap components. If you want to try the same approach, you can download the strapless.css file to the same folder as the distill post you want to enable it for, and include the following YAML in the post header:\noutput:\n  distill::distill_article:\n    css: \"strapless.css\"\nIf you want to enable strapless for the entire site, this markup goes in the _site.yml file and the css file should go in the home folder for the project. Once that’s done you should be ready to go. That being said, you’d be wise to be careful when adopting this approach: the strapless build is a crude hack, and I haven’t tested it very thoroughly.\nTesting with pretty pictures\nJust to make certain, let’s check that it does what we want by generating cards using the galleries data that comes bundled with the bs4cards package:\n\n\nlibrary(bs4cards)\ngalleries %>% \n  cards(title = long_name, image = image_url)\n\n\n\n\n\n\nAsh Cloud and Blood\n\n\n\n\nGhosts on Marble Paper\n\n\n\n\nIce Floes\n\n\n\n\nNative Flora\n\n\n\n\nSilhouettes\n\n\n\n\nTrack Marks\n\n\n\n\nViewports\n\n\n\n\n\n\nLooks about right to me?\n\n\nLast updated\n2021-09-17 17:03:00 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\nAllaire, JJ, Rich Iannone, Alison Presmanes Hill, and Yihui Xie. 2021. Distill: ’R Markdown’ Format for Scientific and Technical Writing. https://CRAN.R-project.org/package=distill.\n\n\nWickham, Hadley, Jay Hesselberth, and Maëlle Salmon. 2021. Pkgdown: Make Static HTML Documentation for a Package.\n\n\nXie, Yihui, Christophe Dervieux, and Emily Riederer. 2020. R Markdown Cookbook. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/rmarkdown-cookbook.\n\n\n\n\n",
    "preview": "posts/2021-04-19_bs4cards-in-distill/bs4cards-logo.png",
    "last_modified": "2022-01-10T11:27:12+11:00",
    "input_file": {},
    "preview_width": 2820,
    "preview_height": 1620
  },
  {
    "path": "posts/2021-04-18_pretty-little-clis/",
    "title": "Pretty little CLIs",
    "description": "How to make a gorgeous command line interface in R using the cli package.\nSomewhere along the way I accidentally learned about ANSI control codes,\nwhich strikes me as unfortunate",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-04-18",
    "categories": [],
    "contents": "\n\nContents\nMeet the cli package\nUsing the status bar\nCreating spinners\nShowing cli messages in R markdown\nWriting longer messages\nCreating structured messages\nEpilogue\n\n\n\n\n\n\n\nLyrics to the title theme of the US TV show, Pretty Little Liars. The song is called Secrets, taken from the fabulous Thirteen Tales of Love and Revenge album by The Pierces\nAnytime you write R code whose output needs to be understood by a human being, it is an act of kindness to spend a little time making sure that the output shown to the human being properly communicates with that human. As a consequence of this, you often find yourself needing to write information to the R console, just to cater to those precious human sensibilities. Perhaps the simplest way to do this is to use the cat() function. It’s a simple tool and it gets the job done in most cases.\nFor example, consider the use case for the antagonist character “A” from Pretty Little Liars, whose stalking and threats were delivered mostly via text message. Had she used R to craft her threatening text messages, she could have written code like this:\n\n\nwait <- function(seconds = 2) {\n  Sys.sleep(seconds)\n}\n\nsend_cat_threat <- function() {\n  cat(\"Dead girls walking.\\n\"); wait()\n  cat(\"--A.\\n\")\n}\n\n\n\nEquipped with a function that specifies her threat, complete with a dramatic pause for effect, she’s ready to go. When her unwitting victim does something to trigger the send_cat_threat() function, a two part message is displayed on the console. The first part shows up immediately\n\nDead girls walking.\n\nand after a two second delay, her call sign is revealed\n\nDead girls walking.\n--A.\n\nIt’s not too difficult to imagine what this message might look like at the R console, but where’s the fun in that? Thanks to the asciicast package (Csárdi et al. 2019), there’s no need to leave anything to the imagination, and we can see the malevolent message in screencast form:\n\n\n\n\nThe ominous text messages used in this post are taken from Pretty Little Liars. This one is from episode two in season one. It’s important that one documents ones sources, right?\nUsing cat() to craft messages works perfectly well for simple text communication, but sometimes you want something that looks a little fancier. After all, if the big picture plan here is to impersonate a dead teenager and terrorise her friends - and for some reason you’ve chosen R to do so - you might as well put a little effort into the details, right?\nMeet the cli package\nOne thing I love about the R community is that if you search long enough you’ll find that someone else has already written a package that solves the problem you’re facing. If your problem is “how to craft nicely formatted messages” then you’ll be delighted to learn that many wonderful things become possible if you have the cli package (Csárdi 2021a) as your talented assistant. To craft a beautiful command line interface (CLI) of her very own, the first thing A will need to do is load the package:\n\n\nlibrary(cli)\n\n\n\nOnce this is done, it is a very trivial task for A to write the same threatening text message using cli_text()…\n\n\nsend_cli_threat <- function() {\n  cli_text(\"Dead girls walking.\"); wait()\n  cli_text(\"--A.\")\n}\nsend_cli_threat()\n\n\n\n\n\n\n…which is nice and all, but it doesn’t make much of a case for using cli. Stalking and threatening is busy work, and I’d imagine that A would want a more compelling justification before deciding to switch her evil workflow. However - much like A herself - the R console has many dark secrets, and fancier tricks than this are possible once you know how to expose them using cli.\nUsing the status bar\nOne piece of magic that I have wondered about for a long time is how fancy progress bars work: often when you’re doing something that takes a long time, you’ll see an ASCII progress bar rendered in text on the screen, which suddenly vanishes once the process is complete. How exactly does this work? Normally you can’t “unprint” a message from the console, so how is it possible for the progress bar to update without leaving an ugly trail of earlier messages behind it?\nWhile teaching myself cli, I found the answer. The most recent line of text generated at the terminal is speciall. It’s called the status bar: the state of the status bar can be manipulated, and the cli package provides a neat toolkit for doing so. So let’s say I were trying to convince A to switch to the cli tools. Right now, she’s writing a function that will send a four-part message, using cli_text() because I’ve at least convinced her to try the new tools:\n\n\nmessage_scroll <- function() {\n  cli_text(\"You found my bracelet.\"); wait()\n  cli_text(\"Now come find me.\"); wait()\n  cli_text(\"Good luck bitches.\"); wait()\n  cli_text(\"-A\"); wait()\n}\nmessage_scroll()\n\n\n\nWhen her victim triggers this message the lines will appear on screen, one after the other with an appropriate dramatic pause separating them. The victim might see something that looks like this:\n\n\n\nThe problem – when viewed from an evil point of view – is that this message stays on screen after delivery.1 The victim has time to think about it, take a screenshot to show her friends, that kind of thing. Wouldn’t the gaslighting be so much more effective if she were to send the message piece by piece, each part disappearing as the next one appears, only to have the whole thing vanish without a trace and leaving the victim wondering if she imagined the whole thing? This is where the status bar comes in handy. Here’s how it would work:\n\n\nmessage_inline <- function() {\n  id <- cli_status(\"\")\n  cli_status_update(id, \"You found my bracelet.\"); wait()\n  cli_status_update(id, \"Now come find me.\"); wait()\n  cli_status_update(id, \"Good luck bitches.\"); wait()\n  cli_status_update(id, \"-A\"); wait()\n  cli_status_clear(id)\n}\n\n\n\nThe first line in this function uses cli_status() to create a blank message on the status bar, and returns an identifier that refers to the status bar. The next four lines all use cli_status_update() to overwrite the current state of the status bar, and then pause dramatically for two seconds. In a final act of malice, the last line in the function clears the status bar using cli_status_clear(), leaving nothing except a blank space behind. So what the victim sees is something more like this:\n\n\nmessage_inline()\n\n\n\n\n\n\n\nThis message was sent to Aria in episode 10 of season one. I’m sure it is deeply important to everyone that I mention this.\nCreating spinners\nThe ability to control the status bar opens up a world of new possibilities. Progress bars are one such possibility, but the progress package (Csárdi and FitzJohn 2019) already does this nicely, and in any case I suspect that A might be more intrigued by the possibility of spinners, since they just spin and spin and give the victim no clue about when the process is going to end. Much more appealing when the developer doesn’t know (or doesn’t want to reveal) when the wait will end. The cli package has a nice makes_spinner function that serves this purpose. Here’s an example:\n\n\nspinny <- make_spinner(\n  which = \"dots2\",\n  template = \"{spin} It's not over until I say it is.\"\n)\n\n\n\nThe which argument is used to choose how the spinner would look, and the template argument is used to define how the “spinny bit” is placed relative to the rest of the text. The spinny object includes functions to update the state of the spinner (in this case spinny$spin() would be that function), and a function to clear the spinner from the status bar. So here’s how A might define a function that uses a spinner to keep the victim in suspense…\n\n\ntheatrics <- function(which) {\n  \n  # define the spinner\n  spinny <- make_spinner(\n    which = which,\n    template = \"{spin} It's not over until I say it is.\"\n  )\n  \n  # update the spinner 100 times\n  for(i in 1:100) {\n    spinny$spin()\n    wait(.05)\n  }\n  \n  # clear the spinner from the status bar\n  spinny$finish()\n  \n  # send the final part of the message\n  cli_alert_success(\"Sleep tight while you still can, bitches. -A\")\n}\n\n\n\nHere’s what happens:\n\n\ntheatrics(\"dots2\")\n\n\n\n\n\n\n\nThis message was sent to all four of the liars in the final episode of season one. I don’t think A used a spinner though, which feels like a missed opportunity to me\nSetting which = \"dots2\" is only one possibility. There are quite a lot of different spinner types that come bundled with the cli package, and I’d imagine A would want to look around to see which one suits her needs. Personally, I’m a fan of hearts:\n\n\ntheatrics(\"hearts\")\n\n\n\n\n\n\nTo see the full list use the list_spinners() function:\n\n\nlist_spinners()\n\n\n [1] \"dots\"                \"dots2\"               \"dots3\"              \n [4] \"dots4\"               \"dots5\"               \"dots6\"              \n [7] \"dots7\"               \"dots8\"               \"dots9\"              \n[10] \"dots10\"              \"dots11\"              \"dots12\"             \n[13] \"line\"                \"line2\"               \"pipe\"               \n[16] \"simpleDots\"          \"simpleDotsScrolling\" \"star\"               \n[19] \"star2\"               \"flip\"                \"hamburger\"          \n[22] \"growVertical\"        \"growHorizontal\"      \"balloon\"            \n[25] \"balloon2\"            \"noise\"               \"bounce\"             \n[28] \"boxBounce\"           \"boxBounce2\"          \"triangle\"           \n[31] \"arc\"                 \"circle\"              \"squareCorners\"      \n[34] \"circleQuarters\"      \"circleHalves\"        \"squish\"             \n[37] \"toggle\"              \"toggle2\"             \"toggle3\"            \n[40] \"toggle4\"             \"toggle5\"             \"toggle6\"            \n[43] \"toggle7\"             \"toggle8\"             \"toggle9\"            \n[46] \"toggle10\"            \"toggle11\"            \"toggle12\"           \n[49] \"toggle13\"            \"arrow\"               \"arrow2\"             \n[52] \"arrow3\"              \"bouncingBar\"         \"bouncingBall\"       \n[55] \"smiley\"              \"monkey\"              \"hearts\"             \n[58] \"clock\"               \"earth\"               \"moon\"               \n[61] \"runner\"              \"pong\"                \"shark\"              \n[64] \"dqpb\"               \n\nShowing cli messages in R markdown\nThroughout this post I’ve relied on asciicast to display screencasts of the R console as animated SVG files, rather than what I might normally do and rely on regular R markdown code chunks to do the work. There’s a reason for this: the R console is a terminal, and its behaviour doesn’t always translate nicely to HTML. Part of the magic of the rmarkdown package (Xie, Allaire, and Grolemund 2018) is that most of the time it is able to capture terminal output and translate it seamlessly into HTML, and we mere mortal users never notice how clever this is. However, when dealing with cli output, we run into cases where this breaks down and the law of leaky abstractions comes into play: text generated at the R console does not follow the same rules as text inserted into an HTML document, and R Markdown sometimes needs a little help when transforming one to the other.\nAn important thing to remember about cli is that the text it produces is a message, so its visibility in R Markdown depends on the chunk option for messages. As long as the message option is set to TRUE, R Markdown will include them as part of the output.2 In the simplest case, R Markdown works nicely, so as long as all A wants to do is send an unformatted threat within an R Markdown document, then this works:\n\n\ncli_text(\"I'm still here bitches, and I know everything. -A\")\n\n\nI'm still here bitches, and I know everything. -A\n\nHowever, the moment A tries to use any fancy formatting, things will go haywire for her. For example, suppose she wanted to send the message above as a simple “alert” message using cli_alert(), which uses fancy symbols and colours in the output. It is at this point that the cracks in the R Markdown pipeline start to leak. In this case, the leak would result in the document failing to knit and an error message complaining about\nPCDATA invalid Char value\nIntuitively she might guess that somewhere in the R Markdown pipeline, an invalid or malformed character has been created.3 The reason this happens is that the colours and symbols used by cli, and supported in the R console, rely on ANSI escape codes, but those escape codes aren’t recognised in HTML and – apparently – they can wreak havoc when R markdown writes those characters into the HTML document. ANSI colours in R are usually generated with the help of the crayon package (Csárdi 2021b), and per the issue #24 thread that I encounter on a semi-regular basis, it can be tricky to manage the process of translating these to HTML via R Markdown.\nSolving this issue requires A to jump through a few hoops. It’s annoying I know, but no-one ever said that running an unhinged stalking campaign via text messages was easy, right? Her first task is to make sure that the R Markdown document turns on crayon support:\n\n\noptions(crayon.enabled = TRUE)\n\n\n\nThis isn’t the whole solution, however, because while that tells R Markdown to stop ignoring all the ANSI stuff, it doesn’t necessarily allow it to render ANSI sequences properly. To fix this she needs to specify the knit hooks that explicitly tell R Markdown what to do. She can do this with the help of the fansi package (Gaslam 2021), which contains an obscurely-named function sgr_to_html() that translates a subset of the ANSI control sequences to HTML, and strips out all the others. Using this, she can write an ansi_aware_handler() function that will take an input string x and return HTML output appropriate for the R Markdown context:\n\n\nansi_aware_handler <- function(x, options) {\n  paste0(\n    \"<pre class=\\\"r-output\\\"><code>\",\n    fansi::sgr_to_html(x = x, warn = FALSE, term.cap = \"256\"),\n    \"<\/code><\/pre>\"\n  )\n}\n\n\n\nFrom there, it’s relatively easy. All she needs to do is tell knitr (Xie 2021) to use this function whenever it needs to handle output. Just for good measure she might do the same for messages, errors, and warnings:\n\n\nknitr::knit_hooks$set(\n  output = ansi_aware_handler, \n  message = ansi_aware_handler, \n  warning = ansi_aware_handler,\n  error = ansi_aware_handler\n)\n\n\n\nAt long last she is done.4 Her campaign of bullying and cruelty can continue:\n\n\ncli_alert(\"I'm still here bitches, and I know everything. -A\")\n\n\n→ I'm still here bitches, and I know everything. -A\n\n\n\nThis message was sent in the pilot episode. Yes, the quotes I’ve used are all from season one: I’ve just started a rewatch of the show, so the early episodes are quite fresh in my memory!\nWriting longer messages\nUp to this point the threatening messages that A has been sending have been short, only one line long. In several cases the messages have been cleverly constructed so that the same line (the status bar) is used to display multiple pieces of text, but ultimately it’s still one line messaging. A needs to take a little care when she wants to branch out. Conceptually, a message should correspond to “one semantically meaningful bundle of information” that might be split over several lines. However, as far as R is concerned, each call to cli_text() creates a distinct message. To see how this might cause A some grief, here’s the letter that she sent to Aria’s mother announcing the infidelity of Aria’s father:\n\n\nsend_cruel_letter_piecewise <- function() {\n  cli_text('Your husband, Byron, is involved with another woman')\n  cli_text('and when I say involved I mean in a \"romantic\" way.')\n  cli_text('This is not something recent. It started before your')\n  cli_text('family went away to Iceland and from the look of')\n  cli_text('things, it may be starting up again now that you\\'re')\n  cli_text('back. I know this is hard to hear, but it is the')\n  cli_text('truth. If you don\\'t believe this about your husband,')\n  cli_text('ask your daughter. She knows all about it.')\n  cli_text('Sincerely,')\n  cli_text('A')\n}\n\nsend_cruel_letter_piecewise()\n\n\nYour husband, Byron, is involved with another woman\n\nand when I say involved I mean in a \"romantic\" way.\n\nThis is not something recent. It started before your\n\nfamily went away to Iceland and from the look of\n\nthings, it may be starting up again now that you're\n\nback. I know this is hard to hear, but it is the\n\ntruth. If you don't believe this about your husband,\n\nask your daughter. She knows all about it.\n\nSincerely,\n\nA\n\n\nThis is not an ideal implementation. What A wants to send is one message spanning 10 lines not 10 separate one-line messages, but it’s the latter that she has actually implemented here. This is where the cli() function is handy: to takes an expression as input and collects all the constituent parts into a single message. This version of the function now sends a single message:\n\n\nsend_cruel_letter_singly <- function() {\n  cli({\n    cli_text('Your husband, Byron, is involved with another woman')\n    cli_text('and when I say involved I mean in a \"romantic\" way.')\n    cli_text('This is not something recent. It started before your')\n    cli_text('family went away to Iceland and from the look of')\n    cli_text('things, it may be starting up again now that you\\'re')\n    cli_text('back. I know this is hard to hear, but it is the')\n    cli_text('truth. If you don\\'t believe this about your husband,')\n    cli_text('ask your daughter. She knows all about it.')\n    cli_text('Sincerely,')\n    cli_text('A')\n  })\n}\n\nsend_cruel_letter_singly()\n\n\nYour husband, Byron, is involved with another woman\nand when I say involved I mean in a \"romantic\" way.\nThis is not something recent. It started before your\nfamily went away to Iceland and from the look of\nthings, it may be starting up again now that you're\nback. I know this is hard to hear, but it is the\ntruth. If you don't believe this about your husband,\nask your daughter. She knows all about it.\nSincerely,\nA\n\n\n\nThe letter was sent to Ella in episode four season one. Even on a rewatch I’m finding it impossible to imagine Holly Marie Combs as anyone other than Piper from Charmed and I keep expecting “Ella” to stop time and, idk, shave off her husbands eyebrows or something?\nMuch nicer. As every would-be tormenter knows, it’s important to pay attention to the details.\nCreating structured messages\nWriting long messages when sending a threatening letter is a simple enough thing, but at some point A will likely find herself wanting to add some structure to these missives. Lists are nice. Stalkers like keeping lists, I hear. With that in mind, a nice property of cli is that it allows you to separate style from structure using an HTML-like syntax. Top level headings are specified using cli_h1(), and second level headings are produced by cli_h2(). Unordered lists are produced using cli_ul() and ordered lists by cli_ol(). This make it easy to write structured messages to the R console:\n\n\ncli({\n  cli_h1(\"Characters\")\n  cli_h2(\"The Liars\")\n  cli_ul(c(\n    \"Alison DiLaurentis\",\n    \"Spencer Hastings\",\n    \"Aria Montgomery\",\n    \"Hanna Marin\",\n    \"Emily Fields\"\n  ))\n  cli_h2(\"The A-Team\")\n  cli_ul(c(\n    \"Mona Vanderwaal\",\n    \"Lucas Gottesman\",\n    \"Melissa Hastings\"\n  ))\n})\n\n\n\n── Characters ────────────────────────────────────────────────────────\n\n── The Liars ──\n\n• Alison DiLaurentis\n• Spencer Hastings\n• Aria Montgomery\n• Hanna Marin\n• Emily Fields\n\n── The A-Team ──\n\n• Mona Vanderwaal\n• Lucas Gottesman\n• Melissa Hastings\n\n\nBetter yet, the cli package has a whole swathe of other utilities that follow this same HTML-like naming scheme, making it possible to send elaborate and disturbing messages in so many different ways.\nEpilogue\nThere is a lot more to the cli package that I haven’t talked about in this post. I’ve not talked about how to modify the themes, how to create custom cli “apps” that use different themes or send output to different connections. I’ve not talked about how to use conditional logic within a cli call, displaying different messages depending on whether a process succeeds or fails. Those will have to remain secret for now, because this post is quite long enough already and quite frankly I’m still learning myself. Besides, these powers would no doubt would be put to terrible purposes in an R-themed Pretty Little Liars spinoff show, and I’m not entirely sure that all secrets need sharing…\n\n\ncli(\n  cli_blockquote(\n    quote = \"Friends share secrets, that's what keeps us close\",\n    citation = \"Alison\"\n  )\n)\n\n\n\n    “Friends share secrets, that's what keeps us close”\n    — Alison\n\n\n\n\nLast updated\n2021-09-17 17:03:57 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\nCsárdi, Gábor. 2021a. Cli: Helpers for Developing Command Line Interfaces. https://CRAN.R-project.org/package=cli.\n\n\n———. 2021b. Crayon: Colored Terminal Output. https://CRAN.R-project.org/package=crayon.\n\n\nCsárdi, Gábor, and Rich FitzJohn. 2019. Progress: Terminal Progress Bars. https://CRAN.R-project.org/package=progress.\n\n\nCsárdi, Gábor, Romain Francois, Mario Nebl, and Marcin Kulik. 2019. Asciicast: Create ’Ascii’ Screen Casts from r Scripts. https://CRAN.R-project.org/package=asciicast.\n\n\nGaslam, Brodie. 2021. Fansi: ANSI Control Sequence Aware String Functions. https://CRAN.R-project.org/package=fansi.\n\n\nXie, Yihui. 2021. Knitr: A General-Purpose Package for Dynamic Report Generation in r. https://yihui.org/knitr/.\n\n\nXie, Yihui, J. J. Allaire, and Garrett Grolemund. 2018. R Markdown: The Definitive Guide. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/rmarkdown.\n\n\nYes, it does disappear in this screencast, but that’s just the screencast. If it were the R console it would stay on screen the whole time.↩︎\nSomewhat counterintuitively, although cli emits messages that can be suppressed by suppressMessages(), they don’t behave precisely the same as the messages produced by message(). The default handler for base R messages sends the output to the stderr() connection and so they are often shown as the dreaded “red text” that users learn to fear. To avoid this, the default behaviour in cli sends messages to the stdout() connection, thereby avoiding this issue. However, cli does allow you to control this behaviour: see the start_app() and stop_app() functions for more information.↩︎\nAs an aside, if you’re running a site with an RSS feed it may also write malformed characters into the index.xml file as well as any generated .html file. When I encountered this problem I found that even when I “fixed” my .Rmd file the document wouldn’t re-knit, because of the problems with the xml file. Eventually I realised that I could solve the problem by deleting the index.xml file for the RSS feed and then knitting again. Sigh↩︎\nNote that there is also the fansi::set_knit_hooks() function which will set the hooks in a more user-friendly way. I don’t think there’s any reason not to use it: the only reason I didn’t is that I found it convenient to write things from scratch here so that I understood what was happening.↩︎\n",
    "preview": "posts/2021-04-18_pretty-little-clis/pretty-little-clis.jpg",
    "last_modified": "2022-01-10T11:27:12+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-04-05_welcome/",
    "title": "Welcome to the jungle",
    "description": "I have reluctantly decided to create a new blog. Some thoughts on \nwhat I hope to achieve, having tried my hand at blogging so very many times \nbefore",
    "author": [
      {
        "name": "Danielle Navarro",
        "url": "https://djnavarro.net"
      }
    ],
    "date": "2021-04-05",
    "categories": [],
    "contents": "\n\n\nI’ve decided the time has come to restart my blog. I’ve tried blogging many times before with mixed success, and this time around I’d like to avoid the mistakes of the past. I’ve set up this blog with a few principles in mind:\nSimplicity. One mistake I’ve often made is to create blogs using the fanciest tools I could find. For example, I’ve previously used Hugo based packages like blogdown and hugodown, and much as I love those tools (and use them on other sites) I want this blog to be as low-maintenance as possible. To that end I’m using distill for R markdown, and I’m keeping the default settings in most respects.\nEncapsulation. There was a time when I really liked the idea of having my blog integrated nicely with my homepage (djnavarro.net). I’ve become less keen on this because the aesthetic and technical demands of a blog aren’t always aligned with the needs of my homepage. This time I’ve set it up so that the blog.djnavarro.net subdomain corresponds to a different repository from my homepage. I’m hoping this will make blogging simpler from a technical standpoint.\nFocus. Another mistake I have made in the past is letting blogs “sprawl”, mixing personal essays with technical posts. My intention with this blog is to write technical posts only, mostly on R and data science. I’ve moved my personal writing to essays.djnavarro.net and my artwork to art.djnavarro.net. My hope is that this will make blogging easier from an emotional standpoint.\nReproducibility. A frustration I’ve had with my previous blogs is that my posts were not particularly reproducible. Source code was often missing, information about the R session was not provided, and so on. This time, I’ve set up the blog so that there is a “details” section at the bottom of each post containing links to the source code, the R session information, and a lockfile generated using renv::snapshot(). (Edit: from 2021-08-23 I’ve extended this approach so that every post actually uses the previously stored R environment)\nAt this stage I’m not entirely certain how I’ll use the blog. There are a lot of possibilities, and I have some thoughts on which ones I’d like to explore. A self-contained blog such as this seems nicely suited to teaching materials. An obvious example would be to write blog posts to accompany the data science slides and youtube videos I’ve been making. The lack of written material to go with those talks has bothered me for some time. Another possibility might be to write tutorials on generative art. I use my art website to post the art itself, but the site functions as a gallery rather than a classroom. I get a lot of people asking questions about how I make my art, and this blog might be a good place to provide answers. Those aren’t the only possibilities, of course, but they are appealing ones.\nNot sure how this will go, but fingers crossed!\n\n\nLast updated\n2021-09-17 17:05:09 AEST\nDetails\nsource code, R environment\n\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-04-05_welcome/welcome.jpg",
    "last_modified": "2022-01-10T11:27:12+11:00",
    "input_file": {}
  }
]
